SET DEFINE OFF;

CREATE OR REPLACE PROCEDURE SP_UPDATE_INCENTIVES_LE_TABLE
(
	I_PROCID            IN      NUMBER
)
IS
	l_count	int;
BEGIN
	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN 
		SELECT count(*) INTO l_count FROM VW_INCENTIVES_LE WHERE PROC_ID = I_PROCID;
		IF 0 < l_count THEN
			MERGE INTO INCENTIVES_LE t
			USING ( SELECT * FROM VW_INCENTIVES_LE WHERE PROC_ID = I_PROCID ) v
			ON (t.PROC_ID = v.PROC_ID)
			WHEN MATCHED THEN
				UPDATE 
				SET t.COC_NAME = v.COC_NAME,
					t.COC_EMAIL = v.COC_EMAIL,
					t.COC_ID = v.COC_ID,
					t.COC_TITLE = v.COC_TITLE,
					t.INIT_ANN_LA_RATE = v.INIT_ANN_LA_RATE,
					t.SUPPORT_LE = v.SUPPORT_LE,
					t.PROPS_ANN_LA_RATE = v.PROPS_ANN_LA_RATE,
					t.TOTAL_CREDITABLE_YEARS = v.TOTAL_CREDITABLE_YEARS,
					t.TOTAL_CREDITABLE_MONTHS = v.TOTAL_CREDITABLE_MONTHS,
					t.JUSTIFICATION_LASTMOD_NAME = v.JUSTIFICATION_LASTMOD_NAME,
					t.JUSTIFICATION_LASTMOD_ID = v.JUSTIFICATION_LASTMOD_ID,
					t.JUSTIFICATION_MOD_REASON = v.JUSTIFICATION_MOD_REASON,
					t.JUSTIFICATION_MOD_SUMMARY = v.JUSTIFICATION_MOD_SUMMARY,
					t.JUSTIFICATION_MODIFIER_NAME = v.JUSTIFICATION_MODIFIER_NAME,
					t.JUSTIFICATION_MODIFIER_ID = v.JUSTIFICATION_MODIFIER_ID,
					t.JUSTIFICATION_MODIFIED_DATE = v.JUSTIFICATION_MODIFIED_DATE,
					t.JUSTIFICATION_SKILL_EXP = v.JUSTIFICATION_SKILL_EXP,
					t.JUSTIFICATION_AGENCY_GOAL = v.JUSTIFICATION_AGENCY_GOAL,
					t.SELECTEE_ELIGIBILITY = v.SELECTEE_ELIGIBILITY,
					t.HRS_RVW_CERT = v.HRS_RVW_CERT,
					t.HRS_NOT_SPT_RSN = v.HRS_NOT_SPT_RSN,
					t.RVW_HRS = v.RVW_HRS,
					t.HRS_RVW_DATE = v.HRS_RVW_DATE,
					t.RCMD_LA_RATE = v.RCMD_LA_RATE,
					t.APPROVAL_SO_VALUE = v.APPROVAL_SO_VALUE,
					t.APPROVAL_SO_ACTING = v.APPROVAL_SO_ACTING,
					t.APPROVAL_SO = v.APPROVAL_SO,
					t.APPROVAL_SO_RESP_DATE = v.APPROVAL_SO_RESP_DATE,
					t.APPROVAL_COC_VALUE = v.APPROVAL_COC_VALUE,
					t.APPROVAL_COC_ACTING = v.APPROVAL_COC_ACTING,
					t.APPROVAL_COC = v.APPROVAL_COC,
					t.APPROVAL_COC_RESP_DATE = v.APPROVAL_COC_RESP_DATE,
					t.APPROVAL_DGHO_VALUE = v.APPROVAL_DGHO_VALUE,
					t.APPROVAL_DGHO_ACTING = v.APPROVAL_DGHO_ACTING,
					t.APPROVAL_DGHO = v.APPROVAL_DGHO,
					t.APPROVAL_DGHO_RESP_DATE = v.APPROVAL_DGHO_RESP_DATE,
					t.APPROVAL_TABG_VALUE = v.APPROVAL_TABG_VALUE,
					t.APPROVAL_TABG_ACTING = v.APPROVAL_TABG_ACTING,
					t.APPROVAL_TABG = v.APPROVAL_TABG,
					t.APPROVAL_TABG_RESP_DATE = v.APPROVAL_TABG_RESP_DATE,
					t.APPROVER_NOTES = v.APPROVER_NOTES
			WHEN NOT MATCHED THEN
				INSERT (t.PROC_ID,
					t.COC_NAME,
					t.COC_EMAIL,
					t.COC_ID,
					t.COC_TITLE,
					t.INIT_ANN_LA_RATE,
					t.SUPPORT_LE,
					t.PROPS_ANN_LA_RATE,
					t.TOTAL_CREDITABLE_YEARS,
					t.TOTAL_CREDITABLE_MONTHS,
					t.JUSTIFICATION_LASTMOD_NAME, 
					t.JUSTIFICATION_LASTMOD_ID,
					t.JUSTIFICATION_MOD_REASON,
					t.JUSTIFICATION_MOD_SUMMARY,
					t.JUSTIFICATION_MODIFIER_NAME,
					t.JUSTIFICATION_MODIFIER_ID,
					t.JUSTIFICATION_MODIFIED_DATE,
					t.JUSTIFICATION_SKILL_EXP,
					t.JUSTIFICATION_AGENCY_GOAL,
					t.SELECTEE_ELIGIBILITY,
					t.HRS_RVW_CERT,
					t.HRS_NOT_SPT_RSN,
					t.RVW_HRS,
					t.HRS_RVW_DATE,
					t.RCMD_LA_RATE,
					t.APPROVAL_SO_VALUE,
					t.APPROVAL_SO_ACTING,
					t.APPROVAL_SO,
					t.APPROVAL_SO_RESP_DATE,
					t.APPROVAL_COC_VALUE,
					t.APPROVAL_COC_ACTING,
					t.APPROVAL_COC,
					t.APPROVAL_COC_RESP_DATE,
					t.APPROVAL_DGHO_VALUE,
					t.APPROVAL_DGHO_ACTING,
					t.APPROVAL_DGHO,
					t.APPROVAL_DGHO_RESP_DATE,
					t.APPROVAL_TABG_VALUE,
					t.APPROVAL_TABG_ACTING,
					t.APPROVAL_TABG,
					t.APPROVAL_TABG_RESP_DATE,
					t.APPROVER_NOTES)
				VALUES (
					v.PROC_ID,
					v.COC_NAME,
					v.COC_EMAIL,
					v.COC_ID,
					v.COC_TITLE,
					v.INIT_ANN_LA_RATE,
					v.SUPPORT_LE,
					v.PROPS_ANN_LA_RATE,
					v.TOTAL_CREDITABLE_YEARS,
					v.TOTAL_CREDITABLE_MONTHS,
					v.JUSTIFICATION_LASTMOD_NAME, 
					v.JUSTIFICATION_LASTMOD_ID,
					v.JUSTIFICATION_MOD_REASON,
					v.JUSTIFICATION_MOD_SUMMARY,
					v.JUSTIFICATION_MODIFIER_NAME,
					v.JUSTIFICATION_MODIFIER_ID,
					v.JUSTIFICATION_MODIFIED_DATE,
					v.JUSTIFICATION_SKILL_EXP,
					v.JUSTIFICATION_AGENCY_GOAL,
					v.SELECTEE_ELIGIBILITY,
					v.HRS_RVW_CERT,
					v.HRS_NOT_SPT_RSN,
					v.RVW_HRS,
					v.HRS_RVW_DATE,
					v.RCMD_LA_RATE,
					v.APPROVAL_SO_VALUE,
					v.APPROVAL_SO_ACTING,
					v.APPROVAL_SO,
					v.APPROVAL_SO_RESP_DATE,
					v.APPROVAL_COC_VALUE,
					v.APPROVAL_COC_ACTING,
					v.APPROVAL_COC,
					v.APPROVAL_COC_RESP_DATE,
					v.APPROVAL_DGHO_VALUE,
					v.APPROVAL_DGHO_ACTING,
					v.APPROVAL_DGHO,
					v.APPROVAL_DGHO_RESP_DATE,
					v.APPROVAL_TABG_VALUE,
					v.APPROVAL_TABG_ACTING,
					v.APPROVAL_TABG,
					v.APPROVAL_TABG_RESP_DATE,
					v.APPROVER_NOTES);

			DELETE INCENTIVES_LE_CRED WHERE PROC_ID = I_PROCID;
			INSERT INTO INCENTIVES_LE_CRED(PROC_ID,
				SEQ_NUM,
				START_DATE,
				END_DATE,
				WORK_SCHEDULE,
				POS_TITLE,
				CALCULATED_YEARS,
				CALCULATED_MONTHS,
				CREDITABLE_YEARS,
				CREDITABLE_MONTHS)
			SELECT 
				v.PROC_ID,
				v.SEQ_NUM,
				v.START_DATE,
				v.END_DATE,
				v.WORK_SCHEDULE,
				v.POS_TITLE,
				v.CALCULATED_YEARS,
				v.CALCULATED_MONTHS,
				v.CREDITABLE_YEARS,
				v.CREDITABLE_MONTHS
			FROM VW_INCENTIVES_LE_CRED v
			WHERE PROC_ID = I_PROCID;
		END IF;
	END IF;

	EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
END;
/

create or replace PROCEDURE SP_FINALIZE_ERLR
(
	I_PROCID               IN  NUMBER
)
IS
    V_CNT                   INT;
    V_XMLDOC                XMLTYPE;
    V_XMLVALUE              XMLTYPE;
    V_CASE_TYPE_ID          VARCHAR2(10);
    V_VALUE                 VARCHAR2(100);
    V_NEW_CASE_TYPE_ID      VARCHAR2(10);
    V_NEW_CASE_TYPE_NAME    VARCHAR2(100);
    V_GEN_EMP_ID            VARCHAR2(64);
    V_CASE_NUMBER           NUMBER(10);
    V_TRIGGER_NEW_CASE      BOOLEAN := FALSE;
    YES                     CONSTANT VARCHAR2(3) := 'Yes';
    
    CONDUCT_ISSUE_ID		CONSTANT VARCHAR2(10) :='743';
    CONDUCT_ISSUE			CONSTANT VARCHAR2(50) :='Conduct Issue';
    GRIEVANCE_ID			CONSTANT VARCHAR2(10) :='745';
    GRIEVANCE			    CONSTANT VARCHAR2(50) :='Grievance';
    INVESTIGATION_ID		CONSTANT VARCHAR2(10) :='744';
    INVESTIGATION			CONSTANT VARCHAR2(50) :='Investigation';
    LABOR_NEGOTIATION_ID	CONSTANT VARCHAR2(10) :='748';
    LABOR_NEGOTIATION		CONSTANT VARCHAR2(50) :='Labor Negotiation';
    MEDICAL_DOCUMENTATION_ID CONSTANT VARCHAR2(10) :='746';
    MEDICAL_DOCUMENTATION	CONSTANT VARCHAR2(50) :='Medical Documentation';
    PERFORMANCE_ISSUE_ID	CONSTANT VARCHAR2(10) :='750';
    PERFORMANCE_ISSUE		CONSTANT VARCHAR2(50) :='Performance Issue';
    PROBATIONARY_PERIOD_ID	CONSTANT VARCHAR2(10) :='751';
    PROBATIONARY_PERIOD		CONSTANT VARCHAR2(50) :='Probationary Period Action';
    UNFAIR_LABOR_PRACTICES_ID	CONSTANT VARCHAR2(10) :='754';
    UNFAIR_LABOR_PRACTICES	CONSTANT VARCHAR2(50) :='Unfair Labor Practices';
    WGI_DENIAL_ID			CONSTANT VARCHAR2(10) :='809';
    WGI_DENIAL			    CONSTANT VARCHAR2(50) :='Within Grade Increase Denial/Reconsideration';    
    INFORMATION_REQUEST_ID  CONSTANT VARCHAR2(10) := '747';    
    THIRD_PARTY_HEARING_ID  CONSTANT VARCHAR2(10) := '753';    
    THIRD_PARTY_HEARING     CONSTANT VARCHAR2(50) := 'Third Party Hearing';
    ACTION_TYPE_COUNSELING_ID CONSTANT VARCHAR2(10) := '785';
    ACTION_TYPE_PIP_ID      CONSTANT VARCHAR2(10) := '787';
    ACTION_TYPE_WNR_ID      CONSTANT VARCHAR2(10) := '790';    
    REASON_FMLA_ID          CONSTANT VARCHAR2(10) := '1650';
    ACTION_TYPE_CLPD        CONSTANT VARCHAR2(10) := '1794';    
BEGIN
    SELECT FIELD_DATA
      INTO V_XMLDOC
      FROM TBL_FORM_DTL
     WHERE PROCID = I_PROCID;

    V_CASE_TYPE_ID := V_XMLDOC.EXTRACT('/formData/items/item[id="GEN_CASE_TYPE"]/value/text()').getStringVal();        
    V_CASE_NUMBER  := TO_NUMBER(V_XMLDOC.EXTRACT('/formData/items/item[id="CASE_NUMBER"]/value/text()').getStringVal());    
    V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="GEN_EMPLOYEE_ID"]/value/text()');
    IF V_XMLVALUE IS NOT NULL THEN
        V_GEN_EMP_ID := V_XMLVALUE.GETSTRINGVAL();
    END IF;
    
    IF V_CASE_TYPE_ID = INFORMATION_REQUEST_ID THEN -- Information Request
        V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="IR_APPEAL_DENIAL"]/value/text()'); -- Did Requester Appeal Denial?
        IF V_XMLVALUE IS NOT NULL THEN
            V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        END IF;
        
        IF V_VALUE = YES THEN
            V_NEW_CASE_TYPE_ID   := THIRD_PARTY_HEARING_ID;
            UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_NEW_CASE_TYPE_ID WHERE RLVNTDATANAME = 'triggeringCaseTypeID1' AND PROCID = I_PROCID;
        END IF;
    ELSIF V_CASE_TYPE_ID = INVESTIGATION_ID THEN -- Investigation
        -- Triggering Conduct Case
        V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="I_MISCONDUCT_FOUND"]/value/text()'); --Was Misconduct Found?
        IF V_XMLVALUE IS NOT NULL THEN
            V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        END IF;
        
        IF V_VALUE = YES THEN
            V_NEW_CASE_TYPE_ID   := CONDUCT_ISSUE_ID;
            UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_NEW_CASE_TYPE_ID WHERE RLVNTDATANAME = 'triggeringCaseTypeID1' AND PROCID = I_PROCID;
        END IF;
    ELSIF V_CASE_TYPE_ID = MEDICAL_DOCUMENTATION_ID THEN -- Medical Documentation
        -- Triggering Grievance Case
        V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="MD_REQUEST_REASON"]/value/text()'); -- Reason for Request
        IF V_XMLVALUE IS NOT NULL THEN
            V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        END IF;
        
        IF V_VALUE = REASON_FMLA_ID THEN  -- FMLA      
            V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="MD_FMLA_GRIEVANCE"]/value/text()'); -- Did Employee File a Grievance?
            IF V_XMLVALUE IS NOT NULL THEN
                V_VALUE := V_XMLVALUE.GETSTRINGVAL();
            END IF;
            
            IF V_VALUE = YES THEN
                V_NEW_CASE_TYPE_ID   := GRIEVANCE_ID;
                UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_NEW_CASE_TYPE_ID WHERE RLVNTDATANAME = 'triggeringCaseTypeID1' AND PROCID = I_PROCID;
            END IF;
        END IF;
    ELSIF V_CASE_TYPE_ID = LABOR_NEGOTIATION_ID THEN -- Labor Negotiation
        -- Triggering Unfair Labor Practices Case
        V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="LN_FILE_ULP"]/value/text()');--Did Union File ULP?
        IF V_XMLVALUE IS NOT NULL THEN
            V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        END IF;
        
        IF V_VALUE = YES THEN        
            V_NEW_CASE_TYPE_ID   := UNFAIR_LABOR_PRACTICES_ID;
            UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_NEW_CASE_TYPE_ID WHERE RLVNTDATANAME = 'triggeringCaseTypeID1' AND PROCID = I_PROCID;
        END IF;        
    ELSIF V_CASE_TYPE_ID = PERFORMANCE_ISSUE_ID THEN -- Performance Issue
        V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="PI_ACTION_TYPE"]/value/text()');
        IF V_XMLVALUE IS NOT NULL THEN
            V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        END IF;
        
        IF V_VALUE = ACTION_TYPE_COUNSELING_ID THEN -- Action Type: Counseling
            V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="PI_CNSL_GRV_DECISION"]/value/text()'); -- Did Employee File a Grievance?
            IF V_XMLVALUE IS NOT NULL THEN
                V_VALUE := V_XMLVALUE.GETSTRINGVAL();
            END IF;
            
            IF V_VALUE = YES THEN
                V_NEW_CASE_TYPE_ID   := GRIEVANCE_ID;
                UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_NEW_CASE_TYPE_ID WHERE RLVNTDATANAME = 'triggeringCaseTypeID1' AND PROCID = I_PROCID;
            END IF;
        ELSIF V_VALUE = ACTION_TYPE_PIP_ID THEN -- Action Type: PIP
            V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="PI_PIP_EMPL_GRIEVANCE"]/value/text()'); -- Did Employee File a Grievance?
            IF V_XMLVALUE IS NOT NULL THEN
                V_VALUE := V_XMLVALUE.GETSTRINGVAL();
            END IF;
            
            IF V_VALUE = YES THEN
                V_NEW_CASE_TYPE_ID   := GRIEVANCE_ID;
                UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_NEW_CASE_TYPE_ID WHERE RLVNTDATANAME = 'triggeringCaseTypeID1' AND PROCID = I_PROCID;
            END IF;
            
            V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="PI_PIP_WGI_WTHLD"]/value/text()'); --Was WGI Withheld?
            IF V_XMLVALUE IS NOT NULL THEN
                V_VALUE := V_XMLVALUE.GETSTRINGVAL();
            END IF;
            
            IF V_VALUE = YES THEN
                V_NEW_CASE_TYPE_ID   := WGI_DENIAL_ID;
                UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_NEW_CASE_TYPE_ID WHERE RLVNTDATANAME = 'triggeringCaseTypeID2' AND PROCID = I_PROCID;
            END IF;
        ELSIF V_VALUE = ACTION_TYPE_WNR_ID THEN -- Action Type: Written Narrative Review
            V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="PI_WNR_WGI_WTHLD"]/value/text()'); -- Was WGI Withheld?
            IF V_XMLVALUE IS NOT NULL THEN
                V_VALUE := V_XMLVALUE.GETSTRINGVAL();
            END IF;
            
            IF V_VALUE = YES THEN
                V_NEW_CASE_TYPE_ID   := WGI_DENIAL_ID;
                UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_NEW_CASE_TYPE_ID WHERE RLVNTDATANAME = 'triggeringCaseTypeID1' AND PROCID = I_PROCID;
            END IF;        
        ELSIF V_VALUE = ACTION_TYPE_CLPD THEN -- Action Type: Career Ladder Promotion Denial
            -- Triggering Grievance Case
            V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id="PI_CLPD_EMP_GRIEVANCE"]/value/text()'); -- Did Employee File a Grievance?
            IF V_XMLVALUE IS NOT NULL THEN
                V_VALUE := V_XMLVALUE.GETSTRINGVAL();
            END IF;
            
            IF V_VALUE = YES THEN
                V_NEW_CASE_TYPE_ID   := GRIEVANCE_ID;
                UPDATE BIZFLOW.RLVNTDATA SET VALUE = V_NEW_CASE_TYPE_ID WHERE RLVNTDATANAME = 'triggeringCaseTypeID1' AND PROCID = I_PROCID;
            END IF;            
        END IF;
    END IF;
    
EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
END;
/

create or replace PROCEDURE SP_UPDATE_ERLR_TABLE
(
    I_PROCID            IN      NUMBER
)
IS
    V_CASE_NUMBER               NUMBER(20);
    V_CASE_TYPE                 NUMBER;
    V_JOB_REQ_NUM               NVARCHAR2(50);
    V_CASE_CREATION_DT          DATE;    
    V_VALUE                     NVARCHAR2(4000);
    V_XMLDOC                    XMLTYPE;
    V_APPEAL_TYPE               VARCHAR2(50);
BEGIN
	IF I_PROCID IS NULL OR I_PROCID = 0 THEN
		RETURN;
	END IF;

	------------------------------------------------------
	-- Transfer XML data into operational table
	--
	-- 1. Get Case number and Job Request Number
	-- 1.1 Select it from data xml from TBL_FORM_DTL table.
	-- 1.2 If not found, select it from BIZFLOW.RLVNTDATA table.
	-- 2. If Case number /Job Request Number not found, issue error.
	-- 3. For each target table,
	-- 3.1. If record found for the CASE_NUMBER, update record.
	-- 3.2. If record not found for the CASE_NUMBER, insert record.
	------------------------------------------------------

	--------------------------------
	-- get Case number
	--------------------------------
	BEGIN
	    SELECT VALUE
	    INTO V_CASE_NUMBER
	    FROM BIZFLOW.RLVNTDATA
	    WHERE PROCID = I_PROCID AND RLVNTDATANAME = 'caseNumber';
	EXCEPTION
	    WHEN NO_DATA_FOUND THEN V_CASE_NUMBER := NULL;
	END;

	IF V_CASE_NUMBER IS NULL THEN
	    RAISE_APPLICATION_ERROR(-20902, 'SP_UPDATE_ERLR_TABLE: Case Number is invalid.  I_PROCID = '
		|| TO_CHAR(I_PROCID) || ' V_CASE_NUMBER = ' || V_CASE_NUMBER || '  V_CASE_NUMBER = ' || TO_CHAR(V_CASE_NUMBER));
	END IF;

	--------------------------------
	-- get Request number 
	--------------------------------
	BEGIN
	    SELECT VALUE
	    INTO V_JOB_REQ_NUM
	    FROM BIZFLOW.RLVNTDATA
	    WHERE PROCID = I_PROCID AND RLVNTDATANAME = 'requestNum';
	EXCEPTION
	    WHEN NO_DATA_FOUND THEN V_JOB_REQ_NUM := NULL;
	END;

	--------------------------------
	-- get Case Creation Date
	--------------------------------
	BEGIN
	    SELECT CREATIONDTIME
	      INTO V_CASE_CREATION_DT
	      FROM BIZFLOW.PROCS
	     WHERE PROCID = I_PROCID;
	EXCEPTION
	    WHEN NO_DATA_FOUND THEN V_CASE_CREATION_DT := NULL;
	END;

	SELECT FIELD_DATA
	  INTO V_XMLDOC
	  FROM TBL_FORM_DTL
	 WHERE PROCID = I_PROCID;

	--------------------------------
	-- ERLR_CASE table
	--------------------------------
	DELETE ERLR_CASE WHERE PROCID = I_PROCID;
	INSERT INTO ERLR_CASE (
		  ERLR_CASE_NUMBER
		  ,ERLR_JOB_REQ_NUMBER
		  ,PROCID 
		  ,ERLR_CASE_STATUS_ID
		  ,ERLR_CASE_CREATE_DT
		)VALUES(
		  V_CASE_NUMBER
		  ,V_JOB_REQ_NUM
		  ,I_PROCID
		  ,FN_EXTRACT_STR (V_XMLDOC, 'GEN_CASE_STATUS')
		  ,V_CASE_CREATION_DT
		);

	--------------------------------
	-- ERLR_GEN table
	--------------------------------
	DELETE ERLR_GEN WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
	DECLARE V_FINAL_ACTIONS VARCHAR2(2000);
	BEGIN
		SELECT XMLQUERY('for $i in /formData/items/item[id="CC_FINAL_ACTION_SEL"]/value return concat($i/value/text(), ",")'
		       PASSING V_XMLDOC RETURNING CONTENT).GETSTRINGVAL() INTO V_FINAL_ACTIONS FROM DUAL;
		V_FINAL_ACTIONS := SUBSTR(V_FINAL_ACTIONS, 0, LENGTH(V_FINAL_ACTIONS)-1);

		INSERT INTO ERLR_GEN (
                PROCID,
                ERLR_CASE_NUMBER,
                GEN_PRIMARY_SPECIALIST,
                GEN_SECONDARY_SPECIALIST,
                GEN_CUSTOMER_NAME,
                GEN_CUSTOMER_PHONE,
                GEN_CUSTOMER_ADMIN_CD,
                GEN_CUSTOMER_ADMIN_CD_DESC,
                GEN_EMPLOYEE_NAME,                    
                GEN_EMPLOYEE_ID,
                GEN_EMPLOYEE_PHONE,
                GEN_EMPLOYEE_ADMIN_CD,
                GEN_EMPLOYEE_ADMIN_CD_DESC,
                GEN_CASE_DESC,
                GEN_CASE_STATUS,
                GEN_CUST_INIT_CONTACT_DT,
                GEN_PRIMARY_REP_AFFILIATION,
                GEN_CMS_PRIMARY_REP_ID,
                GEN_CMS_PRIMARY_REP_PHONE,
                GEN_NON_CMS_PRIMARY_FNAME,
                GEN_NON_CMS_PRIMARY_MNAME,
                GEN_NON_CMS_PRIMARY_LNAME,
                GEN_NON_CMS_PRIMARY_EMAIL,
                GEN_NON_CMS_PRIMARY_PHONE,
                GEN_NON_CMS_PRIMARY_ORG,
                GEN_NON_CMS_PRIMARY_ADDR,
                GEN_CASE_TYPE,
                GEN_CASE_CATEGORY,
                GEN_INVESTIGATION,
                GEN_INVESTIGATE_START_DT,
                GEN_INVESTIGATE_END_DT,
                GEN_STD_CONDUCT,
                GEN_STD_CONDUCT_TYPE,
                CC_FINAL_ACTION,
                CC_FINAL_ACTION_OTHER,
                CC_CASE_COMPLETE_DT                    
		       ) VALUES (
                I_PROCID,
                V_CASE_NUMBER,
                SUBSTR(FN_EXTRACT_STR (V_XMLDOC, 'GEN_PRIMARY_SPECIALIST'), 4, 10),
                SUBSTR(FN_EXTRACT_STR (V_XMLDOC, 'GEN_SECONDARY_SPECIALIST'), 4, 10),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_CUSTOMER_NAME'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_CUSTOMER_PHONE'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_CUSTOMER_ADMIN_CD'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_CUSTOMER_ADMIN_CD_DESC'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_EMPLOYEE_NAME'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_EMPLOYEE_ID'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_EMPLOYEE_PHONE'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_EMPLOYEE_ADMIN_CD'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_EMPLOYEE_ADMIN_CD_DESC'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_CASE_DESC'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_CASE_STATUS'),
                FN_EXTRACT_DATE(V_XMLDOC, 'GEN_CUST_INIT_CONTACT_DT'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_PRIMARY_REP'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_CMS_PRIMARY_REP', 'value/name'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_CMS_PRIMARY_REP_PHONE'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_NON_CMS_PRIMARY_FNAME'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_NON_CMS_PRIMARY_MNAME'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_NON_CMS_PRIMARY_LNAME'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_NON_CMS_PRIMARY_EMAIL'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_NON_CMS_PRIMARY_PHONE'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_NON_CMS_PRIMARY_ORG'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_NON_CMS_PRIMARY_ADDR'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_CASE_TYPE'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_CASE_CATEGORY'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_INVESTIGATION'),
                FN_EXTRACT_DATE(V_XMLDOC, 'GEN_INVESTIGATE_START_DT'),
                FN_EXTRACT_DATE(V_XMLDOC, 'GEN_INVESTIGATE_END_DT'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_STD_CONDUCT'),
                FN_EXTRACT_STR (V_XMLDOC, 'GEN_STD_CONDUCT_TYPE'),
                V_FINAL_ACTIONS,
                FN_EXTRACT_STR (V_XMLDOC, 'CC_FINAL_ACTION_OTHER'),
                FN_EXTRACT_DATE(V_XMLDOC, 'CC_CASE_COMPLETE_DT')
		       );
        
        SELECT GEN_CASE_TYPE 
          INTO V_CASE_TYPE
          FROM ERLR_GEN
         WHERE PROCID = I_PROCID;
	END;

	--------------------------------
	-- ERLR_APPEAL table
	--------------------------------	
	DELETE ERLR_APPEAL WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    V_APPEAL_TYPE := FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_APPEAL_TYPE');
    IF V_APPEAL_TYPE IS NOT NULL AND 0<LENGTH(V_APPEAL_TYPE) THEN
        INSERT INTO ERLR_APPEAL(
            ERLR_CASE_NUMBER
            , AP_ERLR_APPEAL_TYPE
            , AP_ERLR_APPEAL_FILE_DT
            , AP_ERLR_APPEAL_TIMING
            , AP_APPEAL_HEARING_REQUESTED
            , AP_ARBITRATOR_LAST_NAME
            , AP_ARBITRATOR_FIRST_NAME
            , AP_ARBITRATOR_MIDDLE_NAME
            , AP_ARBITRATOR_EMAIL
            , AP_ARBITRATOR_PHONE_NUM
            , AP_ARBITRATOR_ORG_AFFIL
            , AP_ARBITRATOR_MAILING_ADDR
            , AP_ERLR_PREHEARING_DT
            , AP_ERLR_HEARING_DT    
            , AP_POSTHEARING_BRIEF_DUE
            , AP_FINAL_ARBITRATOR_DCSN_DT
            , AP_ERLR_EXCEPTION_FILED
            , AP_ERLR_EXCEPTION_FILE_DT
            , AP_RESPON_TO_EXCEPT_DUE
            , AP_FINAL_FLRA_DECISION_DT
            , AP_ERLR_STEP_DECISION_DT
            , AP_ERLR_ARBITRATION_INVOKED
            , AP_ARBITRATOR_LAST_NAME_3
            , AP_ARBITRATOR_FIRST_NAME_3
            , AP_ARBITRATOR_MIDDLE_NAME_3
            , AP_ARBITRATOR_EMAIL_3
            , AP_ARBITRATOR_PHONE_NUM_3
            , AP_ARBITRATOR_ORG_AFFIL_3
            , AP_ARBITRATION_MAILING_ADDR_3
            , AP_ERLR_PREHEARING_DT_2
            , AP_ERLR_HEARING_DT_2
            , AP_POSTHEARING_BRIEF_DUE_2
            , AP_FINAL_ARBITRATOR_DCSN_DT_2
            , AP_ERLR_EXCEPTION_FILED_2
            , AP_ERLR_EXCEPTION_FILE_DT_2
            , AP_RESPON_TO_EXCEPT_DUE_2
            , AP_FINAL_FLRA_DECISION_DT_2
            , AP_ARBITRATOR_LAST_NAME_2
            , AP_ARBITRATOR_FIRST_NAME_2
            , AP_ARBITRATOR_MIDDLE_NAME_2
            , AP_ARBITRATOR_EMAIL_2
            , AP_ARBITRATOR_PHONE_NUM_2
            , AP_ARBITRATOR_ORG_AFFIL_2
            , AP_ARBITRATION_MAILING_ADDR_2
            , AP_ERLR_PREHEARING_DT_SC
            , AP_ERLR_HEARING_DT_SC
            , AP_ARBITRATOR_LAST_NAME_4
            , AP_ARBITRATOR_FIRST_NAME_4
            , AP_ARBITRATOR_MIDDLE_NAME_4
            , AP_ARBITRATOR_EMAIL_4
            , AP_ARBITRATOR_PHONE_NUM_4
            , AP_ARBITRATOR_ORG_AFFIL_4
            , AP_ARBITRATOR_MAILING_ADDR_4
            , AP_DT_SETTLEMENT_DISCUSSION
            , AP_DT_PREHEARING_DISCLOSURE
            , AP_DT_AGNCY_FILE_RESPON_DUE
            , AP_ERLR_PREHEARING_DT_MSPB
            , AP_WAS_DISCOVERY_INITIATED
            , AP_ERLR_DT_DISCOVERY_DUE
            , AP_ERLR_HEARING_DT_MSPB
            , AP_PETITION_FILE_DT_MSPB
            , AP_WAS_PETITION_FILED_MSPB
            , AP_INITIAL_DECISION_DT_MSPB
            , AP_FINAL_BOARD_DCSN_DT_MSPB
            , AP_DT_SETTLEMENT_DISCUSSION_2
            , AP_DT_PREHEARING_DISCLOSURE_2
            , AP_DT_AGNCY_FILE_RESPON_DUE_2
            , AP_ERLR_PREHEARING_DT_FLRA
            , AP_ERLR_HEARING_DT_FLRA
            , AP_INITIAL_DECISION_DT_FLRA
            , AP_WAS_PETITION_FILED_FLRA
            , AP_PETITION_FILE_DT_FLRA
            , AP_FINAL_BOARD_DCSN_DT_FLRA
            )VALUES(
            V_CASE_NUMBER
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_APPEAL_TYPE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_APPEAL_FILE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_APPEAL_TIMING')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_APPEAL_HEARING_REQUESTED')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_LAST_NAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_FIRST_NAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_MIDDLE_NAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_EMAIL')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_PHONE_NUMBER')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_ORGANIZATION_AFFILIATION')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATION_MAILING_ADDR')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_PREHEARING_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_HEARING_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_POSTHEARING_BRIEF_DUE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_FINAL_ARBITRATOR_DECISION_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_EXCEPTION_FILED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_EXCEPTION_FILE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_RESPONSE_TO_EXCEPTIONS_DUE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_FINAL_FLRA_DECISION_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_STEP_DECISION_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATION_INVOKED')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_LAST_NAME_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_FIRST_NAME_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_MIDDLE_NAME_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_EMAIL_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_PHONE_NUMBER_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_ORGANIZATION_AFFILIATION_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATION_MAILING_ADDR_3')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_PREHEARING_DT_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_HEARING_DT_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_POSTHEARING_BRIEF_DUE_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_FINAL_ARBITRATOR_DECISION_DT_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_EXCEPTION_FILED_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_EXCEPTION_FILE_DT_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_RESPONSE_TO_EXCEPTIONS_DUE_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_FINAL_FLRA_DECISION_DT_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_LAST_NAME_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_FIRST_NAME_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_MIDDLE_NAME_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_EMAIL_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_PHONE_NUMBER_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_ORGANIZATION_AFFILIATION_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATION_MAILING_ADDR_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_PREHEARING_DT_SC')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_HEARING_DT_SC')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_LAST_NAME_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_FIRST_NAME_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_MIDDLE_NAME_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_EMAIL_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_PHONE_NUMBER_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATOR_ORGANIZATION_AFFILIATION_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_ARBITRATION_MAILING_ADDR')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_DT_SETTLEMENT_DISCUSSION')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_DT_PREHEARING_DISCLOSURE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_DT_AGENCY_FILE_RESPONSE_DUE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_PREHEARING_DT_MSPB')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_WAS_DISCOVERY_INITIATED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_DT_DISCOVERY_DUE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_HEARING_DT_MSPB')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_PETITION_4REVIEW_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_WAS_PETITION_4REVIEW_MSPB')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_initial_decision_MSPB_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_FINAL_DECISION_MSPB_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_DT_SETTLEMENT_DISCUSSION_FLRA')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_DT_PREHEARING_DISCLOSURE_FLRA')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_DT_AGENCY_FILE_RESPONSE_DUE_FLRA')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_PREHEARING_DT_FLRA')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_HEARING_DT_FLRA')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_DECISION_DT_FLRA')
            , FN_EXTRACT_STR (V_XMLDOC, 'AP_ERLR_WAS_DECISION_APPEALED_FLRA')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_APPEAL_FILE_DT_FLRA')
            , FN_EXTRACT_DATE(V_XMLDOC, 'AP_ERLR_FINAL_DECISION_FLRA_DT')
            );
    END IF;    

	--------------------------------
	-- ERLR_CNDT_ISSUE table
	--------------------------------
	DELETE ERLR_CNDT_ISSUE WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 743 THEN
        INSERT INTO ERLR_CNDT_ISSUE(
            ERLR_CASE_NUMBER
            , CI_ACTION_TYPE
            , CI_ADMIN_INVESTIGATORY_LEAVE
            , CI_ADMIN_NOTICE_LEAVE            
            , CI_LEAVE_START_DT
            , CI_LEAVE_END_DT
            , CI_APPROVAL_NAME
            , CI_LEAVE_START_DT_2
            , CI_LEAVE_END_DT_2
            , CI_APPROVAL_NAME_2
            , CI_PROP_ACTION_ISSUED_DT
            , CI_ORAL_PREZ_REQUESTED
            , CI_ORAL_PREZ_DT
            , CI_ORAL_RESPONSE_SUBMITTED
            , CI_RESPONSE_DUE_DT
            , CI_WRITTEN_RESPONSE_SBMT_DT
            , CI_POS_TITLE
            , CI_PPLAN
            , CI_SERIES
            , CI_CURRENT_INFO_GRADE
            , CI_CURRENT_INFO_STEP
            , CI_PROPOSED_POS_TITLE
            , CI_PROPOSED_PPLAN
            , CI_PROPOSED_SERIES
            , CI_PROPOSED_INFO_GRADE
            , CI_PROPOSED_INFO_STEP
            , CI_FINAL_POS_TITLE
            , CI_FINAL_PPLAN
            , CI_FINAL_SERIES
            , CI_FINAL_INFO_GRADE
            , CI_FINAL_INFO_STEP
            , CI_DEMO_FINAL_AGNCY_DCSN
            , CI_DECIDING_OFFCL
            , CI_DECISION_ISSUED_DT
            , CI_DEMO_FINAL_AGENCY_EFF_DT
            , CI_NUMB_DAYS
            , CI_COUNSEL_TYPE
            , CI_COUNSEL_ISSUED_DT
            , CI_SICK_LEAVE_ISSUED_DT
            , CI_RESTRICTION_ISSED_DT
            , CI_SL_REVIEWED_DT_LIST
            , CI_SL_WARNING_DISCUSS_DT_LIST
            , CI_SL_WARN_ISSUE
            , CI_NOTICE_ISSUED_DT
            , CI_EFFECTIVE_DT
            , CI_CURRENT_ADMIN_CODE
            , CI_RE_ASSIGNMENT_CURR_ORG
            , CI_FINAL_ADMIN_CODE
            , CI_RE_ASSIGNMENT_FINAL_ORG
            , CI_REMOVAL_PROP_ACTION_DT
            , CI_EMP_NOTICE_LEAVE_PLACED
            , CI_REMOVAL_NOTICE_START_DT
            , CI_REMOVAL_NOTICE_END_DT
            , CI_RMVL_ORAL_PREZ_RQSTED
            , CI_REMOVAL_ORAL_PREZ_DT
            , CI_RMVL_WRTN_RESPONSE
            , CI_WRITTEN_RESPONSE_DUE_DT
            , CI_WRITTEN_SUBMITTED_DT
            , CI_RMVL_FINAL_AGNCY_DCSN
            , CI_DECIDING_OFFCL_NAME
            , CI_RMVL_DATE_DCSN_ISSUED
            , CI_REMOVAL_EFFECTIVE_DT
            , CI_RMVL_NUMB_DAYS
            , CI_SUSPENTION_TYPE
            , CI_SUSP_PROP_ACTION_DT
            , CI_SUSP_ORAL_PREZ_REQUESTED
            , CI_SUSP_ORAL_PREZ_DT
            , CI_SUSP_WRITTEN_RESP
            , CI_SUSP_WRITTEN_RESP_DUE_DT
            , CI_SUSP_WRITTEN_RESP_DT
            , CI_SUSP_FINAL_AGNCY_DCSN
            , CI_SUSP_DECIDING_OFFCL_NAME
            , CI_SUSP_DECISION_ISSUED_DT
            , CI_SUSP_EFFECTIVE_DECISION_DT
            , CI_SUS_NUMB_DAYS
            , CI_REPRIMAND_ISSUE_DT
            , CI_EMP_APPEAL_DECISION               
            )
            VALUES
            (
            V_CASE_NUMBER
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_ACTION_TYPE')
            ,CASE WHEN FN_EXTRACT_STR (V_XMLDOC, 'CI_ADMIN_INVESTIGATORY_LEAVE') = 'true'  THEN '1' ELSE '0' END
            ,CASE WHEN FN_EXTRACT_STR (V_XMLDOC, 'CI_ADMIN_NOTICE_LEAVE') = 'true'  THEN '1' ELSE '0' END
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_LEAVE_START_DT')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_LEAVE_END_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_APPROVAL_NAME', 'value/name')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_LEAVE_START_DT_2')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_LEAVE_END_DT_2')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_APPROVAL_NAME_2', 'value/name')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_PROP_ACTION_ISSUED_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_ORAL_PREZ_REQUESTED')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_ORAL_PREZ_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_ORAL_RESPONSE_SUBMITTED')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_RESPONSE_DUE_DT')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_WRITTEN_RESPONSE_SUBMITTED_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_POS_TITLE')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_PPLAN')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_SERIES')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_CURRENT_INFO_GRADE')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_CURRENT_INFO_STEP')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_PROPOSED_POS_TITLE')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_PROPOSED_PPLAN')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_PROPOSED_SERIES')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_PROPOSED_INFO_GRADE')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_PROPOSED_INFO_STEP')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_FINAL_POS_TITLE')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_FINAL_PPLAN')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_FINAL_SERIES')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_FINAL_INFO_GRADE')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_FINAL_INFO_STEP')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_DEMO_FINAL_AGENCY_DECISION')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_DECIDING_OFFCL', 'value/name')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_DECISION_ISSUED_DT')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_DEMO_FINAL_AGENCY_EFF_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_NUMB_DAYS')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_COUNSEL_TYPE')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_COUNSEL_ISSUED_DT')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_SICK_LEAVE_ISSUED_DT')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_RESTRICTION_ISSED_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_SICK_LEAVE_REVIEWED_DT_LIST')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_SL_WARNING_DISCUSSION_DT_LIST')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_SL_WARN_ISSUE')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_NOTICE_ISSUED_DT')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_EFFECTIVE_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_CURRENT_ADMIN_CODE')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_RE_ASSIGNMENT_CURR_ORG')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_FINAL_ADMIN_CODE')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_RE_ASSIGNMENT_FINAL_ORG')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_REMOVAL_PROP_ACTION_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_EMP_NOTICE_LEAVE_PLACED')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_REMOVAL_NOTICE_START_DT')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_REMOVAL_NOTICE_END_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_REMOVAL_ORAL_PREZ_REQUESTED')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_REMOVAL_ORAL_PREZ_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_REMOVAL_WRITTEN_RESPONSE')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_WRITTEN_RESPONSE_DUE_DT')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_WRITTEN_SUBMITTED_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_RMVL_FINAL_AGENCY_DECISION')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_DECIDING_OFFCL_NAME', 'value/name')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_REMOVAL_DATE_DECISION_ISSUED')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_REMOVAL_EFFECTIVE_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_RMVL_NUMB_DAYS')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_SUSPENTION_TYPE')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_SUSP_PROP_ACTION_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_SUSP_ORAL_PREZ_REQUESTED')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_SUSP_ORAL_PREZ_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_SUSP_WRITTEN_RESP')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_SUSP_WRITTEN_RESP_DUE_DT')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_SUSP_WRITTEN_RESP_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_SUSP_FINAL_AGENCY_DECISION')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_SUSP_DECIDING_OFFCL_NAME', 'value/name')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_SUSP_DECISION_ISSUED_DT')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_SUSP_EFFECTIVE_DECISION_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_SUS_NUMB_DAYS')
            ,FN_EXTRACT_DATE(V_XMLDOC, 'CI_REPRIMAND_ISSUE_DT')
            ,FN_EXTRACT_STR (V_XMLDOC, 'CI_EMP_APPEAL_DECISION')
            );
    END IF;
    
	--------------------------------
	-- ERLR_PERF_ISSUE table
	--------------------------------
	DELETE ERLR_PERF_ISSUE WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 750 THEN
        INSERT INTO ERLR_PERF_ISSUE TRG (
            ERLR_CASE_NUMBER
            , PI_ACTION_TYPE
            , PI_NEXT_WGI_DUE_DT    
            , PI_PERF_COUNSEL_ISSUE_DT    
            , PI_CNSL_GRV_DECISION
            , PI_DMTN_PRPS_ACTN_ISSUE_DT    
            , PI_DMTN_ORAL_PRSNT_REQ
            , PI_DMTN_ORAL_PRSNT_DT    
            , PI_DMTN_WRTN_RESP_SBMT
            , PI_DMTN_WRTN_RESP_DUE_DT    
            , PI_DMTN_WRTN_RESP_SBMT_DT    
            , PI_DMTN_CUR_POS_TITLE
            , PI_DMTN_CUR_PAY_PLAN
            , PI_DMTN_CUR_JOB_SERIES
            , PI_DMTN_CUR_GRADE
            , PI_DMTN_CUR_STEP
            , PI_DMTN_PRPS_POS_TITLE
            , PI_DMTN_PRPS_PAY_PLAN
            , PI_DMTN_PRPS_JOB_SERIES
            , PI_DMTN_PRPS_GRADE
            , PI_DMTN_PRP_STEP
            , PI_DMTN_FIN_POS_TITLE
            , PI_DMTN_FIN_PAY_PLAN
            , PI_DMTN_FIN_JOB_SERIES
            , PI_DMTN_FIN_GRADE
            , PI_DMTN_FIN_STEP
            , PI_DMTN_FIN_AGCY_DECISION
            , PI_DMTN_FIN_DECIDING_OFC
            , PI_DMTN_FIN_DECISION_ISSUE_DT    
            , PI_DMTN_DECISION_EFF_DT    
            , PI_DMTN_APPEAL_DECISION
            , PI_PIP_RSNBL_ACMDTN
            , PI_PIP_EMPL_SBMT_MEDDOC
            , PI_PIP_DOC_SBMT_FOH_RVW
            , PI_PIP_WGI_WTHLD
            , PI_PIP_WGI_RVW_DT    
            , PI_PIP_MEDDOC_RVW_OUTCOME
            , PI_PIP_START_DT    
            , PI_PIP_END_DT    
            , PI_PIP_EXT_END_DT    
            , PI_PIP_EXT_END_REASON
            , PI_PIP_EXT_END_NOTIFY_DT    
            , PI_PIP_EXT_DT_LIST    
            , PI_PIP_ACTUAL_DT    
            , PI_PIP_END_PRIOR_TO_PLAN
            , PI_PIP_END_PRIOR_TO_PLAN_RSN
            , PI_PIP_SUCCESS_CMPLT
            , PI_PIP_PMAP_RTNG_SIGN_DT    
            , PI_PIP_PMAP_RVW_SIGN_DT    
            , PI_PIP_PRPS_ACTN    
            , PI_PIP_PRPS_ISSUE_DT    
            , PI_PIP_ORAL_PRSNT_REQ    
            , PI_PIP_ORAL_PRSNT_DT    
            , PI_PIP_WRTN_RESP_SBMT    
            , PI_PIP_WRTN_RESP_DUE_DT    
            , PI_PIP_WRTN_SBMT_DT    
            , PI_PIP_FIN_AGCY_DECISION
            , PI_PIP_DECIDING_OFFICAL
            , PI_PIP_FIN_AGCY_DECISION_DT    
            , PI_PIP_DECISION_ISSUE_DT    
            , PI_PIP_EFF_ACTN_DT    
            , PI_PIP_EMPL_GRIEVANCE    
            , PI_PIP_APPEAL_DECISION
            , PI_REASGN_NOTICE_DT    
            , PI_REASGN_EFF_DT    
            , PI_REASGN_CUR_ADMIN_CD
            , PI_REASGN_CUR_ORG_NM    
            , PI_REASGN_FIN_ADMIN_CD
            , PI_REASGN_FIN_ORG_NM    
            , PI_RMV_PRPS_ACTN_ISSUE_DT    
            , PI_RMV_EMPL_NOTC_LEV    
            , PI_RMV_NOTC_LEV_START_DT    
            , PI_RMV_NOTC_LEV_END_DT    
            , PI_RMV_ORAL_PRSNT_REQ    
            , PI_RMV_ORAL_PRSNT_DT    
            , PI_RMV_WRTN_RESP_DUE_DT    
            , PI_RMV_WRTN_RESP_SBMT_DT    
            , PI_RMV_FIN_AGCY_DECISION    
            , PI_RMV_FIN_DECIDING_OFC    
            , PI_RMV_DECISION_ISSUE_DT    
            , PI_RMV_EFF_DT    
            , PI_RMV_NUM_DAYS    
            , PI_RMV_APPEAL_DECISION    
            , PI_WRTN_NRTV_RVW_TYPE    
            , PI_WNR_SPCLST_RVW_CMPLT_DT    
            , PI_WNR_MGR_RVW_RTNG_DT    
            , PI_WNR_CRITICAL_ELM    
            , PI_WNR_FIN_RATING
            , PI_WNR_RVW_OFC_CONCUR_DT    
            , PI_WNR_WGI_WTHLD
            , PI_WNR_WGI_RVW_DT
            , PI_CLPD_ENTRANCE_DUTY_DT
            , PI_CLPD_NEXT_CLP_DUE_DT
            , PI_CLPD_PRE_WITHHELD
            , PI_CLPD_FIRST_WNI_DT
            , PI_CLPD_NEXT_REVIEW_DUE_DT
            , PI_CLPD_DAPI_DT
            , PI_CLPD_FIRST_WITHHELD_DT
            , PI_CLPD_PLANNED_REVIEW_DT
            , PI_CLPD_DETER_FAV
            , PI_CLPD_SECOND_WNI_DT
            , PI_CLPD_DECISION_ISSUED_DT
            , PI_CLPD_DECIDING_OFFCL
            , PI_CLPD_EMP_GRIEVANCE
            , PI_CLPD_EMP_APPEAL_DECISION            
            )VALUES(
            V_CASE_NUMBER
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_ACTION_TYPE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_NEXT_WGI_DUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PERF_COUNSEL_ISSUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_CNSL_GRV_DECISION')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_DMTN_PRPS_ACTN_ISSUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_ORAL_PRSNT_REQ')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_DMTN_ORAL_PRSNT_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_WRTN_RESP_SBMT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_DMTN_WRTN_RESP_DUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_DMTN_WRTN_RESP_SBMT_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_CUR_POS_TITLE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_CUR_PAY_PLAN')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_CUR_JOB_SERIES')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_CUR_GRADE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_CUR_STEP')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_PRPS_POS_TITLE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_PRPS_PAY_PLAN')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_PRPS_JOB_SERIES')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_PRPS_GRADE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_PRP_STEP')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_FIN_POS_TITLE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_FIN_PAY_PLAN')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_FIN_JOB_SERIES')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_FIN_GRADE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_FIN_STEP')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_FIN_AGCY_DECISION')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_FIN_DECIDING_OFC_NM', 'value/name')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_DMTN_FIN_DECISION_ISSUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_DMTN_DECISION_EFF_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_DMTN_APPEAL_DECISION')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_RSNBL_ACMDTN')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_EMPL_SBMT_MEDDOC')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_DOC_SBMT_FOH_RVW')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_WGI_WTHLD')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_WGI_RVW_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_MEDDOC_RVW_OUTCOME')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_START_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_END_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_EXT_END_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_EXT_END_REASON')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_EXT_END_NOTIFY_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_EXT_DT_LIST')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_ACTUAL_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_END_PRIOR_TO_PLAN')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_END_PRIOR_TO_PLAN_RSN')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_SUCCESS_CMPLT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_PMAP_RTNG_SIGN_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_PMAP_RVW_SIGN_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_PRPS_ACTN')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_PRPS_ISSUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_ORAL_PRSNT_REQ')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_ORAL_PRSNT_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_WRTN_RESP_SBMT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_WRTN_RESP_DUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_WRTN_SBMT_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_FIN_AGCY_DECISION')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_DECIDING_OFFICAL_NM', 'value/name')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_FIN_AGCY_DECISION_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_DECISION_ISSUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_PIP_EFF_ACTN_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_EMPL_GRIEVANCE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_PIP_APPEAL_DECISION')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_REASGN_NOTICE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_REASGN_EFF_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_REASGN_CUR_ADMIN_CD')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_REASGN_CUR_ORG_NM')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_REASGN_FIN_ADMIN_CD')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_REASGN_FIN_ORG_NM')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_RMV_PRPS_ACTN_ISSUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_RMV_EMPL_NOTC_LEV')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_RMV_NOTC_LEV_START_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_RMV_NOTC_LEV_END_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_RMV_ORAL_PRSNT_REQ')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_RMV_ORAL_PRSNT_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_RMV_WRTN_RESP_DUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_RMV_WRTN_RESP_SBMT_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_RMV_FIN_AGCY_DECISION')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_RMV_FIN_DECIDING_OFC_NM', 'value/name')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_RMV_DECISION_ISSUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_RMV_EFF_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_RMV_NUM_DAYS')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_RMV_APPEAL_DECISION')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_WRTN_NRTV_RVW_TYPE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_WNR_SPCLST_RVW_CMPLT_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_WNR_MGR_RVW_RTNG_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_WNR_CRITICAL_ELM')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_WNR_FIN_RATING')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_WNR_RVW_OFC_CONCUR_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_WNR_WGI_WTHLD')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_WNR_WGI_RVW_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_CLPD_ENTRANCE_DUTY_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_CLPD_NEXT_CLP_DUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_CLPD_PRE_WITHHELD')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_CLPD_FIRST_WNI_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_CLPD_NEXT_REVIEW_DUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_CLPD_DAPI_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_CLPD_FIRST_WITHHELD_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_CLPD_PLANNED_REVIEW_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_CLPD_DETER_FAV')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_CLPD_SECOND_WNI_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PI_CLPD_DECISION_ISSUED_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_CLPD_DECIDING_OFFCL', 'value/name')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_CLPD_EMP_GRIEVANCE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PI_CLPD_EMP_APPEAL_DECISION')            
            );
    END IF;
    
	--------------------------------
	-- ERLR_GRIEVANCE table
	--------------------------------
	DELETE ERLR_GRIEVANCE WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 745 THEN
        INSERT INTO ERLR_GRIEVANCE(
            ERLR_CASE_NUMBER
            , GI_TYPE                
            , GI_NEGOTIATED_GRIEVANCE_TYPE                
            , GI_TIMELY_FILING_2
            , GI_IND_MANAGER
            , GI_FILING_DT_2
            , GI_TIMELY_FILING
            , GI_FILING_DT
            , GI_IND_MEETING_DT
            , GI_IND_STEP_1_DECISION_DT
            , GI_IND_DECISION_ISSUE_DT
            , GI_IND_STEP_1_DEADLINE
            , GI_IND_STEP_1_EXT_DUE_DT
            , GI_IND_STEP_1_EXT_DUE_REASON
            , GI_STEP_2_REQUEST
            , GI_IND_STEP_2_MTG_DT
            , GI_IND_STEP_2_DECISION_DUE_DT
            , GI_IND_STEP_2_DCSN_ISSUE_DT    
            , GI_IND_STEP_2_DEADLINE
            , GI_IND_EXT_2_EXT_DUE_DT
            , GI_IND_STEP_2_EXT_DUE_REASON
            , GI_IND_THIRD_PARTY_APPEAL_DT
            , GI_IND_THIRD_APPEAL_REQUEST
            , GI_UM_GRIEVABILITY
            , GI_MEETING_DT
            , GI_GRIEVANCE_STATUS
            , GI_ARBITRATION_DEADLINE_DT
            , GI_ARBITRATION_REQUEST
            , GI_ADMIN_OFFCL_1
            , GI_ADMIN_STG_1_DECISION_DT
            , GI_ADMIN_STG_1_ISSUE_DT    
            , GI_ADMIN_STG_2_RESP
            , GI_ADMIN_OFFCL_2
            , GI_ADMIN_STG_2_DECISION_DT
            , GI_ADMIN_STG_2_ISSUE_DT
            ) VALUES (
            V_CASE_NUMBER
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_TYPE')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_NEGOTIATED_GRIEVANCE_TYPE')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_TIMELY_FILING_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_IND_MANAGER', 'value/name')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_FILING_DT_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_TIMELY_FILING')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_FILING_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_IND_MEETING_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_IND_STEP_1_DECISION_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_IND_DECISION_ISSUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_IND_STEP_1_DEADLINE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_IND_STEP_1_EXT_DUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_IND_STEP_1_EXT_DUE_REASON')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_STEP_2_REQUEST')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_IND_STEP_2_MTG_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_IND_STEP_2_DECISION_DUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_IND_STEP_2_DECISION_ISSUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_IND_STEP_2_DEADLINE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_IND_EXT_2_EXT_DUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_IND_STEP_2_EXT_DUE_REASON')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_IND_THIRD_PARTY_APPEAL_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_IND_THIRD_APPEAL_REQUEST')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_UM_GRIEVABILITY')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_MEETING_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_GRIEVANCE_STATUS')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_ARBITRATION_DEADLINE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_ARBITRATION_REQUEST')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_ADMIN_OFFCL_1', 'value/name')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_ADMIN_STG_1_DECISION_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_ADMIN_STG_1_ISSUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_ADMIN_STG_2_RESP')
            , FN_EXTRACT_STR (V_XMLDOC, 'GI_ADMIN_OFFCL_2', 'value/name')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_ADMIN_STG_2_DECISION_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'GI_ADMIN_STG_2_ISSUE_DT')
            );
    END IF;
    
	--------------------------------
	-- ERLR_INVESTIGATION table
	--------------------------------
	DELETE ERLR_INVESTIGATION WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 744 THEN
        INSERT INTO ERLR_INVESTIGATION(
            ERLR_CASE_NUMBER
            , INVESTIGATION_TYPE
            , I_MISCONDUCT_FOUND 
            ) VALUES (
            V_CASE_NUMBER
            , FN_EXTRACT_STR (V_XMLDOC, 'INVESTIGATION_TYPE')
            , FN_EXTRACT_STR (V_XMLDOC, 'I_MISCONDUCT_FOUND')
            );
    END IF;
    
	--------------------------------
	-- ERLR_WGI_DNL table
	--------------------------------
	DELETE ERLR_WGI_DNL WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 809 THEN
        INSERT INTO ERLR_WGI_DNL(
            ERLR_CASE_NUMBER
            , WGI_DTR_DENIAL_ISSUED_DT
            , WGI_DTR_EMP_REQ_RECON
            , WGI_DTR_RECON_REQ_DT
            , WGI_DTR_RECON_ISSUE_DT
            , WGI_DTR_DENIED
            , WGI_DTR_DENIAL_ISSUE_TO_EMP_DT
            , WGI_RVW_REDTR_NOTI_ISSUED_DT
            , WGI_REVIEW_DTR_FAVORABLE
            , WGI_REVIEW_EMP_REQ_RECON
            , WGI_REVIEW_RECON_REQ_DT
            , WGI_REVIEW_RECON_ISSUE_DT
            , WGI_REVIEW_DENIED
            , WGI_EMP_APPEAL_DECISION
            )VALUES(
            V_CASE_NUMBER
            , FN_EXTRACT_DATE(V_XMLDOC, 'WGI_DTR_DENIAL_ISSUED_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'WGI_DTR_EMP_REQ_RECON')
            , FN_EXTRACT_DATE(V_XMLDOC, 'WGI_DTR_RECON_REQ_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'WGI_DTR_RECON_ISSUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'WGI_DTR_DENIED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'WGI_DTR_DENIAL_ISSUE_TO_EMP_DT'                            )
            , FN_EXTRACT_DATE(V_XMLDOC, 'WGI_REVIEW_DTR_NOTICE_ISSUED_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'WGI_REVIEW_DTR_FAVORABLE')
            , FN_EXTRACT_STR (V_XMLDOC, 'WGI_REVIEW_EMP_REQ_RECON')
            , FN_EXTRACT_DATE(V_XMLDOC, 'WGI_REVIEW_RECON_REQ_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'WGI_REVIEW_RECON_ISSUE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'WGI_REVIEW_DENIED')
            , FN_EXTRACT_STR (V_XMLDOC, 'WGI_EMP_APPEAL_DECISION')
            );
    END IF;
    
	--------------------------------
	-- ERLR_MEDDOC table
	--------------------------------
	DELETE ERLR_MEDDOC WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 746 THEN
        INSERT INTO ERLR_MEDDOC TRG(
            ERLR_CASE_NUMBER
            , MD_REQUEST_REASON
            , MD_MED_DOC_SBMT_DEADLINE_DT
            , MD_FMLA_DOC_SBMT_DT
            , MD_FMLA_BEGIN_DT
            , MD_FMLA_APROVED
            , MD_FMLA_DISAPRV_REASON
            , MD_FMLA_GRIEVANCE
            , MD_MEDEXAM_EXTENDED
            , MD_MEDEXAM_ACCEPTED
            , MD_MEDEXAM_RECEIVED_DT
            , MD_DOC_SUBMITTED
            , MD_DOC_SBMT_DT
            , MD_DOC_SBMT_FOH
            , MD_DOC_REVIEW_OUTCOME
            , MD_DOC_ADMTV_ACCEPTABLE
            , MD_DOC_ADMTV_REJECT_REASON
        )VALUES(
            V_CASE_NUMBER
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_REQUEST_REASON')
            , FN_EXTRACT_DATE(V_XMLDOC, 'MD_MED_DOC_SBMT_DEADLINE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'MD_FMLA_DOC_SBMT_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'MD_FMLA_BEGIN_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_FMLA_APROVED')
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_FMLA_DISAPRV_REASON')
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_FMLA_GRIEVANCE')
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_MEDEXAM_EXTENDED')
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_MEDEXAM_ACCEPTED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'MD_MEDEXAM_RECEIVED_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_DOC_SUBMITTED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'MD_DOC_SBMT_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_DOC_SBMT_FOH')
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_DOC_REVIEW_OUTCOME')
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_DOC_ADMTV_ACCEPTABLE')
            , FN_EXTRACT_STR (V_XMLDOC, 'MD_DOC_ADMTV_REJECT_REASON')
        );
    END IF;
    
	--------------------------------
	-- ERLR_INFO_REQUEST table
	--------------------------------
	DELETE ERLR_INFO_REQUEST WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 747 THEN
        INSERT INTO ERLR_INFO_REQUEST(
            ERLR_CASE_NUMBER
            , IR_REQUESTER    
            , IR_CMS_REQUESTER_NAME    
            , IR_CMS_REQUESTER_PHONE    
            , IR_NCMS_REQUESTER_LAST_NAME    
            , IR_NCMS_REQUESTER_FIRST_NAME
            , IR_NCMS_REQUESTER_MN    
            , IR_NON_CMS_REQUESTER_PHONE    
            , IR_NON_CMS_REQUESTER_EMAIL    
            , IR_NCMS_REQUESTER_ORG_AFFIL    
            , IR_SUBMIT_DT
            , IR_MEET_PTCLRIZED_NEED_STND
            , IR_RSNABLY_AVAIL_N_NECESSARY
            , IR_PRTCT_DISCLOSURE_BY_LAW
            , IR_MAINTAINED_BY_AGENCY
            , IR_COLLECTIVE_BARGAINING_UNIT
            , IR_APPROVE
            , IR_PROVIDE_DT
            , IR_DENIAL_NOTICE_DT_LIST
            , IR_APPEAL_DENIAL
        )VALUES(
            V_CASE_NUMBER
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_REQUESTER')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_CMS_REQUESTER_NAME', 'value/value')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_CMS_REQUESTER_PHONE')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_NON_CMS_REQUESTER_LAST_NAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_NON_CMS_REQUESTER_FIRST_NAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_NON_CMS_REQUESTER_MIDDLE_NAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_NON_CMS_REQUESTER_PHONE')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_NON_CMS_REQUESTER_EMAIL')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_NON_CMS_REQUESTER_ORGANIZATION_AFFILIATION')
            , FN_EXTRACT_DATE(V_XMLDOC, 'IR_SUBMIT_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_MEET_PARTICULARIZED_NEED_STANDARD')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_REASONABLY_AVAILABLE_AND_NECESSARY')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_PROTECTED_FROM_DISCLOSURE_BY_LAW')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_MAINTAINED_BY_AGENCY')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_COLLECTIVE_BARGAINING_UNIT')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_APPROVE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'IR_PROVIDE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_PROVIDE_DT_LIST')
            , FN_EXTRACT_STR (V_XMLDOC, 'IR_APPEAL_DENIAL')
        );
    END IF;
    
	--------------------------------
	-- ERLR_3RDPARTY_HEAR table
	--------------------------------
	DELETE ERLR_3RDPARTY_HEAR WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 753 THEN
        INSERT INTO ERLR_3RDPARTY_HEAR(
              ERLR_CASE_NUMBER
            , THRD_PRTY_APPEAL_TYPE
            , THRD_PRTY_APPEAL_FILE_DT
            , THRD_PRTY_ASSISTANCE_REQ_DT
            , THRD_PRTY_HEARING_TIMING
            , THRD_PRTY_HEARING_REQUESTED
            , THRD_PRTY_STEP_DECISION_DT
            , THRD_PRTY_ARBITRATION_INVOKED
            , THRD_PRTY_ARBIT_LNM_3
            , THRD_PRTY_ARBIT_FNM_3
            , THRD_PRTY_ARBIT_MNM_3
            , THRD_PRTY_ARBIT_EMAIL_3
            , THRD_ERLR_ARBIT_PHONE_NUM_3
            , THRD_PRTY_ARBIT_ORG_AFFIL_3
            , THRD_PRTY_ARBIT_MAILING_ADDR_3
            , THRD_PRTY_PREHEARING_DT_2
            , THRD_PRTY_HEARING_DT_2
            , THRD_PRTY_POSTHEAR_BRIEF_DUE_2
            , THRD_PRTY_FNL_ARBIT_DCSN_DT_2
            , THRD_PRTY_EXCEPTION_FILED_2
            , THRD_PRTY_EXCEPTION_FILE_DT_2
            , THRD_PRTY_RSPS_TO_EXCPT_DUE_2
            , THRD_PRTY_FNL_FLRA_DCSN_DT_2
            , THRD_PRTY_ARBIT_LNM
            , THRD_PRTY_ARBIT_FNM
            , THRD_PRTY_ARBIT_MNM
            , THRD_PRTY_ARBIT_EMAIL
            , THRD_ERLR_ARBIT_PHONE_NUM
            , THRD_PRTY_ARBIT_ORG_AFFIL
            , THRD_PRTY_ARBIT_MAILING_ADDR
            , THRD_PRTY_PREHEARING_DT
            , THRD_PRTY_HEARING_DT
            , THRD_PRTY_POSTHEAR_BRIEF_DUE
            , THRD_PRTY_FNL_ARBIT_DCSN_DT
            , THRD_PRTY_EXCEPTION_FILED
            , THRD_PRTY_EXCEPTION_FILE_DT
            , THRD_PRTY_RSPS_TO_EXCPT_DUE
            , THRD_PRTY_FNL_FLRA_DCSN_DT
            , THRD_PRTY_ARBIT_LNM_4
            , THRD_PRTY_ARBIT_FNM_4
            , THRD_PRTY_ARBIT_MNM_4
            , THRD_PRTY_ARBIT_EMAIL_4
            , THRD_ERLR_ARBIT_PHONE_NUM_4
            , THRD_PRTY_ARBIT_ORG_AFFIL_4
            , THRD_PRTY_ARBIT_MAILING_ADDR_4
            , THRD_PRTY_DT_STLMNT_DSCUSN
            , THRD_PRTY_DT_PREHEAR_DSCLS
            , THRD_PRTY_DT_AGNCY_RSP_DUE
            , THRD_PRTY_PREHEARING_DT_MSPB
            , THRD_PRTY_WAS_DSCVRY_INIT
            , THRD_PRTY_DT_DISCOVERY_DUE
            , THRD_PRTY_HEARING_DT_MSPB
            , THRD_PRTY_INIT_DCSN_DT_MSPB
            , THRD_PRTY_WAS_PETI_FILED_MSPB
            , THRD_PRTY_PETITION_RV_DT
            , THRD_PRTY_FNL_BRD_DCSN_DT_MSPB
            , THRD_PRTY_DT_STLMNT_DSCUSN_2
            , THRD_PRTY_DT_PREHEAR_DSCLS_2
            , THRD_PRTY_PREHEARING_CONF
            , THRD_PRTY_HEARING_DT_FLRA
            , THRD_PRTY_DECISION_DT_FLRA
            , THRD_PRTY_TIMELY_REQ
            , THRD_PRTY_PROC_ORDER
            , THRD_PRTY_PANEL_MEMBER_LNAME
            , THRD_PRTY_PANEL_MEMBER_FNAME
            , THRD_PRTY_PANEL_MEMBER_MNAME
            , THRD_PRTY_PANEL_MEMBER_EMAIL
            , THRD_PRTY_PANEL_MEMBER_PHONE
            , THRD_PRTY_PANEL_MEMBER_ORG
            , THRD_PRTY_PANEL_MEMBER_MAILING
            , THRD_PRTY_PANEL_DESCR         
            )VALUES(
            V_CASE_NUMBER
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_APPEAL_TYPE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_APPEAL_FILE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_ASSISTANCE_REQ_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_HEARING_TIMING')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_HEARING_REQUESTED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_STEP_DECISION_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATION_INVOKED')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_LAST_NAME_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_FIRST_NAME_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_MIDDLE_NAME_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_EMAIL_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_ERLR_ARBITRATOR_PHONE_NUMBER_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATION_ORGANIZATION_AFFILIATION_3')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATION_MAILING_ADDR_3')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_PREHEARING_DT_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_HEARING_DT_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_POSTHEARING_BRIEF_DUE_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_FINAL_ARBITRATOR_DECISION_DT_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_EXCEPTION_FILED_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_EXCEPTION_FILE_DT_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_RESPONSE_TO_EXCEPTIONS_DUE_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_FINAL_FLRA_DECISION_DT_2')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_LAST_NAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_FIRST_NAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_MIDDLE_NAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_EMAIL')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_ERLR_ARBITRATOR_PHONE_NUMBER')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATION_ORGANIZATION_AFFILIATION')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATION_MAILING_ADDR')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_PREHEARING_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_HEARING_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_POSTHEARING_BRIEF_DUE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_FINAL_ARBITRATOR_DECISION_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_EXCEPTION_FILED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_EXCEPTION_FILE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_RESPONSE_TO_EXCEPTIONS_DUE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_FINAL_FLRA_DECISION_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_LAST_NAME_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_FIRST_NAME_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_MIDDLE_NAME_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATOR_EMAIL_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_ERLR_ARBITRATOR_PHONE_NUMBER_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATION_ORGANIZATION_AFFILIATION_4')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_ARBITRATION_MAILING_ADDR_4')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_DT_SETTLEMENT_DISCUSSION')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_DT_PREHEARING_DISCLOSURE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_DT_AGENCY_FILE_RESPONSE_DUE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_PREHEARING_DT_MSPB')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_WAS_DISCOVERY_INITIATED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_DT_DISCOVERY_DUE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_HEARING_DT_MSPB')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_INITIAL_DECISION_DT_MSPB')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_WAS_PETITION_FILED_MSPB')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_PETITION_RV_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_FINAL_BOARD_DECISION_DT_MSPB')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_DT_SETTLEMENT_DISCUSSION_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_DT_PREHEARING_DISCLOSURE_2')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_PREHEARING_CONF')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_HEARING_DT_FLRA')
            , FN_EXTRACT_DATE(V_XMLDOC, 'THRD_PRTY_DECISION_DT_FLRA')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_TIMELY_REQ')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_PROC_ORDER')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_PANEL_MEMBER_LNAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_PANEL_MEMBER_FNAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_PANEL_MEMBER_MNAME')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_PANEL_MEMBER_EMAIL')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_PANEL_MEMBER_PHONE')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_PANEL_MEMBER_ORG')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_PANEL_MEMBER_MAILING')
            , FN_EXTRACT_STR (V_XMLDOC, 'THRD_PRTY_PANEL_DESCR')
            );
    END IF;
    
	--------------------------------
	-- ERLE_PROB_ACTION table
	--------------------------------
	DELETE ERLR_PROB_ACTION WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 751 THEN
        INSERT INTO ERLR_PROB_ACTION(
            ERLR_CASE_NUMBER
            , PPA_ACTION_TYPE
            , PPA_TERMINATION_TYPE
            , PPA_TERM_PROP_ACTION_DT
            , PPA_TERM_ORAL_PREZ_REQUESTED
            , PPA_TERM_ORAL_PREZ_DT    
            , PPA_TERM_WRITTEN_RESP
            , PPA_TERM_WRITTEN_RESP_DUE_DT    
            , PPA_TERM_WRITTEN_RESP_DT    
            , PPA_TERM_AGENCY_DECISION
            , PPA_TERM_DECIDING_OFFCL_NAME
            , PPA_TERM_DECISION_ISSUED_DT    
            , PPA_TERM_EFFECTIVE_DECISION_DT    
            , PPA_PROB_TERM_DCSN_ISSUED_DT    
            , PPA_PROBATION_CONDUCT
            , PPA_PROBATION_PERFORMANCE
            , PPA_APPEAL_GRIEVANCE_DEADLINE    
            , PPA_EMP_APPEAL_DECISION
            , PPA_PROP_ACTION_ISSUED_DT    
            , PPA_ORAL_PREZ_REQUESTED
            , PPA_ORAL_PREZ_DT    
            , PPA_ORAL_RESPONSE_SUBMITTED
            , PPA_RESPONSE_DUE_DT    
            , PPA_WRITTEN_RESPONSE_SBMT_DT    
            , PPA_POS_TITLE
            , PPA_PPLAN
            , PPA_SERIES
            , PPA_CURRENT_INFO_GRADE
            , PPA_CURRENT_INFO_STEP
            , PPA_PROPOSED_POS_TITLE
            , PPA_PROPOSED_PPLAN
            , PPA_PROPOSED_SERIES
            , PPA_PROPOSED_INFO_GRADE
            , PPA_PROPOSED_INFO_STEP
            , PPA_FINAL_POS_TITLE
            , PPA_FINAL_PPLAN
            , PPA_FINAL_SERIES
            , PPA_FINAL_INFO_GRADE
            , PPA_FINAL_INFO_STEP
            , PPA_NOTICE_ISSUED_DT    
            , PPA_DEMO_FINAL_AGENCY_DECISION
            , PPA_DECIDING_OFFCL
            , PPA_DECISION_ISSUED_DT    
            , PPA_DEMO_FINAL_AGENCY_EFF_DT    
            , PPA_NUMB_DAYS
            , PPA_EFFECTIVE_DT    
            , PPA_CURRENT_ADMIN_CODE
            , PPA_RE_ASSIGNMENT_CURR_ORG
            , PPA_FINAL_ADMIN_CODE
            , PPA_FINAL_ADMIN_CODE_FINAL_ORG
        )VALUES(
            V_CASE_NUMBER
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_ACTION_TYPE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_TERMINATION_TYPE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_TERM_PROP_ACTION_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_TERM_ORAL_PREZ_REQUESTED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_TERM_ORAL_PREZ_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_TERM_WRITTEN_RESP')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_TERM_WRITTEN_RESP_DUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_TERM_WRITTEN_RESP_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_TERM_AGENCY_DECISION')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_TERM_DECIDING_OFFCL_NAME', 'value/name')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_TERM_DECISION_ISSUED_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_TERM_EFFECTIVE_DECISION_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_PROBATION_TERMINATION_DECISION_ISSUED_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_PROBATION_CONDUCT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_PROBATION_PERFORMANCE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_APPEAL_GRIEVANCE_DEADLINE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_EMP_APPEAL_DECISION')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_PROP_ACTION_ISSUED_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_ORAL_PREZ_REQUESTED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_ORAL_PREZ_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_ORAL_RESPONSE_SUBMITTED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_RESPONSE_DUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_WRITTEN_RESPONSE_SUBMITTED_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_POS_TITLE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_PPLAN')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_SERIES')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_CURRENT_INFO_GRADE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_CURRENT_INFO_STEP')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_PROPOSED_POS_TITLE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_PROPOSED_PPLAN')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_PROPOSED_SERIES')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_PROPOSED_INFO_GRADE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_PROPOSED_INFO_STEP')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_FINAL_POS_TITLE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_FINAL_PPLAN')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_FINAL_SERIES')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_FINAL_INFO_GRADE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_FINAL_INFO_STEP')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_NOTICE_ISSUED_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_DEMO_FINAL_AGENCY_DECISION')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_DECIDING_OFFCL', 'value/name')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_DECISION_ISSUED_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_DEMO_FINAL_AGENCY_EFF_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_NUMB_DAYS')
            , FN_EXTRACT_DATE(V_XMLDOC, 'PPA_EFFECTIVE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_CURRENT_ADMIN_CODE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_RE_ASSIGNMENT_CURR_ORG')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_FINAL_ADMIN_CODE')
            , FN_EXTRACT_STR (V_XMLDOC, 'PPA_FINAL_ADMIN_CODE_FINAL_ORG')
        );
    END IF;
    
	--------------------------------
	-- ERLR_ULP table
	--------------------------------
	DELETE ERLR_ULP WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 754 THEN
        INSERT INTO ERLR_ULP(
            ERLR_CASE_NUMBER
            , ULP_RECEIPT_CHARGE_DT
            , ULP_CHARGE_FILED_TIMELY
            , ULP_AGENCY_RESPONSE_DT
            , ULP_FLRA_DOCUMENT_REUQESTED
            , ULP_DOC_SUBMISSION_FLRA_DT
            , ULP_DOCUMENT_DESCRIPTION
            , ULP_DISPOSITION_DT
            , ULP_DISPOSITION_TYPE
            , ULP_COMPLAINT_DT
            , ULP_AGENCY_ANSWER_DT
            , ULP_AGENCY_ANSWER_FILED_DT
            , ULP_SETTLEMENT_DISCUSSION_DT
            , ULP_PREHEARING_DISCLOSURE_DUE
            , ULP_PREHEARING_DISCLOSUE_DT
            , ULP_PREHEARING_CONFERENCE_DT
            , ULP_HEARING_DT
            , ULP_DECISION_DT
            , ULP_EXCEPTION_FILED
            , ULP_EXCEPTION_FILED_DT
        )VALUES(
            V_CASE_NUMBER
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_RECEIPT_CHARGE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'ULP_CHARGE_FILED_TIMELY')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_AGENCY_RESPONSE_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'ULP_FLRA_DOCUMENT_REUQESTED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_DOCUMENT_SUBMISSION_FLRA_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'ULP_DOCUMENT_DESCRIPTION')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_DISPOSITION_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'ULP_DISPOSITION_TYPE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_COMPLAINT_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_AGENCY_ANSWER_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_AGENCY_ANSWER_FILED_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_SETTLEMENT_DISCUSSION_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_PREHEARING_DISCLOSURE_DUE')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_PREHEARING_DISCLOSUE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_PREHEARING_CONFERENCE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_HEARING_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_DECISION_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'ULP_EXCEPTION_FILED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'ULP_EXCEPTION_FILED_DT')
        );
    END IF;
    
	--------------------------------
	-- ERLR_LABOR_NEGO table
	--------------------------------
	DELETE ERLR_LABOR_NEGO WHERE ERLR_CASE_NUMBER = V_CASE_NUMBER;
    IF V_CASE_TYPE = 748 THEN
        INSERT INTO ERLR_LABOR_NEGO(
            ERLR_CASE_NUMBER
            , LN_NEGOTIATION_TYPE
            , LN_INITIATOR
            , LN_DEMAND2BARGAIN_DT
            , LN_BRIEFING_REQUEST
            , LN_BRIEFING_DT
            , LN_PROPOSAL_SUBMISSION_DT
            , LN_PROPOSAL_SUBMISSION
            , LN_PROPOSAL_NEGOTIABLE
            , LN_NON_NEGOTIABLE_LETTER
            , LN_FILE_ULP
            , LN_PROPOSAL_INFO_GROUND_RULES
            , LN_PRPSAL_INFO_NEG_COMMENCE_DT
            , LN_LETTER_PROVIDED
            , LN_LETTER_PROVIDED_DT
            , LN_NEGOTIABLE_PROPOSAL
            , LN_BARGAINING_BEGAN_DT
            , LN_IMPASSE_DT
            , LN_FSIP_DECISION_DT
            , LN_BARGAINING_END_DT
            , LN_AGREEMENT_DT
            , LN_SUMMARY_OF_ISSUE
            , LN_SECON_LETTER_REQUEST
            , LN_2ND_LETTER_PROVIDED
            , LN_NEGOTIABL_ISSUE_SUMMARY
            , LN_2ND_PROVIDED_DT
            , LN_MNGMNT_ARTICLE4_NTC_DT
            , LN_MNGMNT_NOTICE_RESPONSE
            , LN_MNGMNT_BRIEFING_REQUEST
            , LN_BRIEFING_REQUESTED2_DT
            , LN_MNGMNT_BARGAIN_SBMSSION_DT
            , LN_MNGMNT_PROPOSAL_SBMSSION
            )VALUES(
            V_CASE_NUMBER
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_NEGOTIATION_TYPE')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_INITIATOR')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_DEMAND2BARGAIN_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_BRIEFING_REQUEST')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_BRIEFING_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_PROPOSAL_SUBMISSION_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_PROPOSAL_SUBMISSION')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_PROPOSAL_NEGOTIABLE')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_NON_NEGOTIABLE_LETTER')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_FILE_ULP')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_PROPOSAL_INFO_GROUND_RULES')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_PROPOSAL_INFO_NEG_COMMENCED_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_LETTER_PROVIDED')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_LETTER_PROVIDED_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_NEGOTIABLE_PROPOSAL')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_BARGAINING_BEGAN_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_IMPASSE_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_FSIP_DECISION_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_BARGAINING_END_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_AGREEMENT_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_SUMMARY_OF_ISSUE')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_SECON_LETTER_REQUEST')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_2ND_LETTER_PROVIDED')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_NEGOTIABL_ISSUE_SUMMARY')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_2ND_PROVIDED_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_MNGMNT_ARTICLE4_NTC_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_MNGMNT_NOTICE_RESPONSE')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_MNGMNT_BRIEFING_REQUEST')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_BRIEFING_REQUESTED2_DT')
            , FN_EXTRACT_DATE(V_XMLDOC, 'LN_MNGMNT_BARGAIN_SUBMISSION_DT')
            , FN_EXTRACT_STR (V_XMLDOC, 'LN_MNGMNT_PROPOSAL_SUBMISSION')
            );
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE;
END;
/

create or replace PROCEDURE SP_ERLR_DELETE_RELATED_CASE
(
    I_CASE_NUMBER IN NUMBER,
    I_RELATED_CASE_NUMBER IN NUMBER
)
IS
BEGIN
    -- DELETE ONLY MANUALLY ENTERED CASE
    DELETE ERLR_RELATED_CASE
     WHERE CASE_NUMBER = I_CASE_NUMBER
       AND RELATED_CASE_NUMBER = I_RELATED_CASE_NUMBER
       AND M_DT IS NOT NULL; 
    
EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
END;
/

GRANT SELECT, INSERT, UPDATE, DELETE ON HHS_CMS_HR.SP_ERLR_DELETE_RELATED_CASE TO HHS_CMS_HR_RW_ROLE;
GRANT SELECT, INSERT, UPDATE, DELETE ON HHS_CMS_HR.SP_ERLR_DELETE_RELATED_CASE TO HHS_CMS_HR_DEV_ROLE;
GRANT SELECT, INSERT, UPDATE, DELETE ON HHS_CMS_HR.SP_ERLR_DELETE_RELATED_CASE TO BIZFLOW;

create or replace PROCEDURE SP_ERLR_ADD_RELATED_CASE
(
    I_CASE_NUMBER IN NUMBER,
    I_RELATED_CASE_NUMBER IN NUMBER,
    I_AUTO_TRIGGERED IN CHAR, -- T: AUTO TRIGGERED CASE, F: MANUALLY ENTERED CASE
	I_MEMBER_ID IN VARCHAR2 -- MANUALLY ENTERED CASE IF THIS VALUE IS NOT NULL
)
IS
    V_CNT NUMBER;
    V_MEMBER_NAME VARCHAR2(100);
    V_TRIGGER_F CHAR(1);
BEGIN
    -- VAIDATE I_CASE_NUMBER
    SELECT COUNT(*)
      INTO V_CNT
      FROM ERLR_CASE
     WHERE ERLR_CASE_NUMBER = I_CASE_NUMBER;

    IF 0 < V_CNT THEN
        
        IF I_AUTO_TRIGGERED = 'F' THEN
            SELECT M.NAME
              INTO V_MEMBER_NAME
              FROM BIZFLOW.MEMBER M
             WHERE M.MEMBERID = I_MEMBER_ID;
        END IF;
    
        SELECT COUNT(*)
          INTO V_CNT
          FROM ERLR_RELATED_CASE
         WHERE CASE_NUMBER = I_CASE_NUMBER
           AND RELATED_CASE_NUMBER = I_RELATED_CASE_NUMBER;
        
        IF 0 = V_CNT THEN
            INSERT INTO ERLR_RELATED_CASE(CASE_NUMBER, RELATED_CASE_NUMBER, TRIGGER_F, M_DT, M_MEMBER_ID, M_MEMBER_NAME)
                                  VALUES (I_CASE_NUMBER, I_RELATED_CASE_NUMBER, I_AUTO_TRIGGERED, CAST(SYS_EXTRACT_UTC(SYSTIMESTAMP) AS DATE), I_MEMBER_ID, V_MEMBER_NAME);            
        END IF;
    END IF;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
END;
/

GRANT SELECT, INSERT, UPDATE, DELETE ON HHS_CMS_HR.SP_ERLR_ADD_RELATED_CASE TO HHS_CMS_HR_RW_ROLE;
GRANT SELECT, INSERT, UPDATE, DELETE ON HHS_CMS_HR.SP_ERLR_ADD_RELATED_CASE TO HHS_CMS_HR_DEV_ROLE;
GRANT SELECT, INSERT, UPDATE, DELETE ON HHS_CMS_HR.SP_ERLR_ADD_RELATED_CASE TO BIZFLOW;

create or replace PROCEDURE SP_CLOSE_ERLR
(
	I_PROCID               IN  NUMBER
)
IS
    V_CNT                   INT;
    V_CASE_NUMBER           NUMBER(10);    
BEGIN
    SELECT COUNT(1) INTO V_CNT
      FROM TBL_FORM_DTL
     WHERE PROCID = I_PROCID;

    IF V_CNT = 1 THEN        
        SELECT TO_NUMBER(VALUE)
	  INTO V_CASE_NUMBER
	  FROM BIZFLOW.RLVNTDATA
         WHERE RLVNTDATANAME = 'caseNumber' 
           AND PROCID = I_PROCID;
	
	DELETE ERLR_RELATED_CASE
	 WHERE CASE_NUMBER = V_CASE_NUMBER;

    END IF;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
END;
/

GRANT SELECT, INSERT, UPDATE, DELETE ON HHS_CMS_HR.SP_CLOSE_ERLR TO HHS_CMS_HR_RW_ROLE;
GRANT SELECT, INSERT, UPDATE, DELETE ON HHS_CMS_HR.SP_CLOSE_ERLR TO HHS_CMS_HR_DEV_ROLE;
GRANT SELECT, INSERT, UPDATE, DELETE ON HHS_CMS_HR.SP_CLOSE_ERLR TO BIZFLOW;

create or replace PROCEDURE SP_ERLR_CLEAN_PROC_DATA
(
    P_STARTDATE         DATE := SYSDATE
    ,P_DEBUG_FLAG       VARCHAR2 := 'F' --[ 'T' | 'F' ]
)
IS
    C_ERLR_CASE_NUMBER	    NUMBER(20,0);
    C_ERLR_JOB_REQ_NUMBER	NVARCHAR2(16 CHAR);
    C_PROCID	            NUMBER(20,0);
    C_ERLR_CASE_STATUS_ID	NUMBER(20,0);
    C_ERLR_CASE_CREATE_DT	DATE;
    
    CURSOR CUR_DELETED_ERLR_PROCESSES(ip_StartDate DATE)
    IS
        SELECT ERLR_CASE_NUMBER, ERLR_JOB_REQ_NUMBER, PROCID, ERLR_CASE_STATUS_ID, ERLR_CASE_CREATE_DT
          FROM HHS_CMS_HR.ERLR_CASE
         WHERE ERLR_CASE_CREATE_DT >= SYSDATE - 10000
           AND NOT EXISTS (
                SELECT *
                  FROM BIZFLOW.PROCS P
                 WHERE P.NAME = 'ER/LR Case Initiation'
                   AND HHS_CMS_HR.ERLR_CASE.PROCID = P.PROCID
           )
    ;
    
BEGIN
    
    --DBMS_OUTPUT.PUT_LINE('P_DEBUG_FLAG=' || P_DEBUG_FLAG || ', P_STARTDATE=' || TO_CHAR(P_STARTDATE));    
    OPEN CUR_DELETED_ERLR_PROCESSES(P_STARTDATE);
    
    LOOP    
        FETCH
            CUR_DELETED_ERLR_PROCESSES
        INTO
            C_ERLR_CASE_NUMBER, C_ERLR_JOB_REQ_NUMBER, C_PROCID, C_ERLR_CASE_STATUS_ID, C_ERLR_CASE_CREATE_DT;
            
            IF C_PROCID IS NOT NULL THEN
            BEGIN
                --DBMS_OUTPUT.PUT_LINE('------------------------------------------------------------------------');
                --DBMS_OUTPUT.PUT_LINE('PROCID = ' || TO_CHAR(C_PROCID) || ', ERLR_CASE_NUMBER = ' || TO_CHAR(C_ERLR_CASE_NUMBER));
                --DBMS_OUTPUT.PUT_LINE('------------------------------------------------------------------------');

                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_3RDPARTY_HEAR'); 
                DELETE FROM HHS_CMS_HR.ERLR_3RDPARTY_HEAR WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_APPEAL');
                DELETE FROM HHS_CMS_HR.ERLR_APPEAL WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_CNDT_ISSUE');
                DELETE FROM HHS_CMS_HR.ERLR_CNDT_ISSUE WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;    
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_EMPLOYEE_CASE');
                DELETE FROM HHS_CMS_HR.ERLR_RELATED_CASE WHERE (CASE_NUMBER = C_ERLR_CASE_NUMBER OR RELATED_CASE_NUMBER = C_ERLR_CASE_NUMBER) AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_GEN');
                DELETE FROM HHS_CMS_HR.ERLR_GEN WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_GRIEVANCE');
                DELETE FROM HHS_CMS_HR.ERLR_GRIEVANCE WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_INFO_REQUEST');
                DELETE FROM HHS_CMS_HR.ERLR_INFO_REQUEST WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_INVESTIGATION');
                DELETE FROM HHS_CMS_HR.ERLR_INVESTIGATION WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_LABOR_NEGO');
                DELETE FROM HHS_CMS_HR.ERLR_LABOR_NEGO WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_LABOR_NEGO');
                DELETE FROM HHS_CMS_HR.ERLR_LABOR_NEGO WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_MEDDOC');
                DELETE FROM HHS_CMS_HR.ERLR_MEDDOC WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_PERF_ISSUE');
                DELETE FROM HHS_CMS_HR.ERLR_PERF_ISSUE WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_PROB_ACTION');
                DELETE FROM HHS_CMS_HR.ERLR_PROB_ACTION WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_CASE');
                DELETE FROM HHS_CMS_HR.ERLR_CASE WHERE PROCID = C_PROCID AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_ULP');
                DELETE FROM HHS_CMS_HR.ERLR_ULP WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - ERLR_WGI_DNL');
                DELETE FROM HHS_CMS_HR.ERLR_WGI_DNL WHERE ERLR_CASE_NUMBER = C_ERLR_CASE_NUMBER AND 'F' = P_DEBUG_FLAG;
                
                --------- common tables    
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - TBL_FORM_DTL_AUDIT');
                DELETE FROM HHS_CMS_HR.TBL_FORM_DTL_AUDIT WHERE PROCID = C_PROCID AND 'F' = P_DEBUG_FLAG;
                --DBMS_OUTPUT.PUT_LINE('DELETING RECORDS - TBL_FORM_DTL');
                DELETE FROM HHS_CMS_HR.TBL_FORM_DTL WHERE PROCID = C_PROCID AND 'F' = P_DEBUG_FLAG;
                DELETE FROM HHS_CMS_HR.TBL_FORM_DTL_AUDIT WHERE PROCID = C_PROCID AND 'F' = P_DEBUG_FLAG;
            END;
            END IF;
            
        EXIT WHEN CUR_DELETED_ERLR_PROCESSES%NOTFOUND;
    END LOOP;

    CLOSE CUR_DELETED_ERLR_PROCESSES;
    --DBMS_OUTPUT.PUT_LINE('--------------------------------------');
    
    COMMIT;

EXCEPTION
	WHEN OTHERS THEN
    CLOSE CUR_DELETED_ERLR_PROCESSES;
    ROLLBACK;
    --DBMS_OUTPUT.PUT_LINE('ERROR occurred -------------------');
    --DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
    --DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);    
END;
/

create or replace PROCEDURE SP_UPDATE_ERLR_FORM_DATA 
   (I_WIH_ACTION IN VARCHAR2, -- SAVE, SUBMIT
    I_FIELD_DATA IN CLOB, 
    I_USER       IN VARCHAR2, 
    I_PROCID     IN NUMBER, 
    I_ACTSEQ     IN NUMBER, 
    I_WITEMSEQ   IN NUMBER) 
IS 
  V_XMLDOC               XMLTYPE;
  V_FORM_TYPE            VARCHAR2(20) := 'CMSERLR';
  V_XMLVALUE             XMLTYPE;
  V_CNT                  INT;
  V_PRIMARY_SPECIALIST   VARCHAR2(20);
  CREATE_CASE_ACTIVITY CONSTANT VARCHAR2(50) := 'Create Case';
  COMPLATE_CASE_ACTIVITY CONSTANT VARCHAR2(50) := 'Complete Case';
  DWC_SUPERVISOR         CONSTANT VARCHAR2(50) := 'DWC Supervisor';
BEGIN 
    -- sanity check: ignore and exit if form data xml is null or empty 
    IF I_FIELD_DATA IS NULL OR LENGTH(I_FIELD_DATA) <= 0 OR I_PROCID IS NULL OR I_USER IS NULL OR I_ACTSEQ IS NULL THEN 
      RETURN; 
    END IF;
    
    -- TODO: I_USER should be member of work item checked out
    --
    
    V_XMLDOC := XMLTYPE(I_FIELD_DATA); 

    MERGE INTO TBL_FORM_DTL A
    USING (SELECT * FROM TBL_FORM_DTL WHERE PROCID=I_PROCID) B
       ON (A.PROCID = B.PROCID)
     WHEN MATCHED THEN
          UPDATE 
             SET A.FIELD_DATA = V_XMLDOC, 
                 A.MOD_DT = SYS_EXTRACT_UTC(SYSTIMESTAMP), 
                 A.MOD_USR = I_USER 
     WHEN NOT MATCHED THEN     
          INSERT (A.PROCID, A.ACTSEQ, A.WITEMSEQ, A.FORM_TYPE, A.FIELD_DATA, A.CRT_DT, A.CRT_USR) 
          VALUES (I_PROCID, NVL(I_ACTSEQ, 0), NVL(I_WITEMSEQ, 0), V_FORM_TYPE, V_XMLDOC, SYS_EXTRACT_UTC(SYSTIMESTAMP), I_USER); 

    IF UPPER(I_WIH_ACTION) = 'SAVE' THEN
        -- Set Primary Specialist to Workitem owner at Create Case Activity
        V_XMLVALUE := V_XMLDOC.EXTRACT('/formData/items/item[id=''GEN_PRIMARY_SPECIALIST'']/value/text()');
        IF V_XMLVALUE IS NOT NULL THEN
            V_PRIMARY_SPECIALIST := V_XMLVALUE.GETSTRINGVAL();
            V_PRIMARY_SPECIALIST := SUBSTR(V_PRIMARY_SPECIALIST, 4);
            
            UPDATE BIZFLOW.WITEM W
               SET (PRTCPTYPE, PRTCP, PRTCPNAME) = (SELECT TYPE, MEMBERID, NAME FROM BIZFLOW.MEMBER WHERE MEMBERID = V_PRIMARY_SPECIALIST)
             WHERE W.PROCID = I_PROCID
               AND W.ACTSEQ = I_ACTSEQ
               AND W.WITEMSEQ = I_WITEMSEQ
               AND W.PRTCP <> V_PRIMARY_SPECIALIST
               AND EXISTS (SELECT 1 
                             FROM BIZFLOW.ACT
                            WHERE NAME = CREATE_CASE_ACTIVITY 
                              AND PROCID = W.PROCID 
                              AND ACTSEQ = W.ACTSEQ);
        END IF;    
    END IF;

    -- Update process variable and transition xml into individual tables 
    -- for respective process definition 
    SP_UPDATE_PV_ERLR(I_PROCID, V_XMLDOC); 
    SP_UPDATE_ERLR_TABLE(I_PROCID); 

EXCEPTION 
  WHEN OTHERS THEN 
             SP_ERROR_LOG(); 

END;
/

create or replace PROCEDURE SP_UPDATE_PV_STRATCON
  (
      I_PROCID            IN      NUMBER
    , I_FIELD_DATA      IN      XMLTYPE
  )
IS
  V_RLVNTDATANAME        VARCHAR2(100);
  V_VALUE                NVARCHAR2(2000);
  V_VALUE_LOOKUP         NVARCHAR2(2000);
  V_CURRENTDATE          DATE;
  V_CURRENTDATESTR       NVARCHAR2(30);
  V_VALUE_DATE           DATE;
  V_VALUE_DATESTR        NVARCHAR2(30);
  V_REC_CNT              NUMBER(10);
  V_XMLDOC               XMLTYPE;
  V_XMLVALUE             XMLTYPE;
  V_VALUE1               NVARCHAR2(2000);
  V_VALUE2               NVARCHAR2(2000);
  V_VALUE3               NVARCHAR2(2000);
  BEGIN
    --DBMS_OUTPUT.PUT_LINE('PARAMETERS ----------------');
    --DBMS_OUTPUT.PUT_LINE('    I_PROCID IS NULL?  = ' || (CASE WHEN I_PROCID IS NULL THEN 'YES' ELSE 'NO' END));
    --DBMS_OUTPUT.PUT_LINE('    I_PROCID           = ' || TO_CHAR(I_PROCID));
    --DBMS_OUTPUT.PUT_LINE('    I_FIELD_DATA       = ' || I_FIELD_DATA.GETCLOBVAL());
    --DBMS_OUTPUT.PUT_LINE(' ----------------');
    --V_XMLDOC := XMLTYPE(I_FIELD_DATA);
    V_XMLDOC := I_FIELD_DATA;


    IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN
      --DBMS_OUTPUT.PUT_LINE('Starting PV update ----------');

      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'adminCode', '/DOCUMENT/GENERAL/SG_ADMIN_CD/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'cancelReason', '/DOCUMENT/PROCESS_VARIABLE/cancelReason/text()', null);
      --HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'hrLiaison', '/DOCUMENT/GENERAL/SG_HRL_ID/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'meetingAckResponse', '/DOCUMENT/PROCESS_VARIABLE/meetingAckResponse/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'meetingApvResponse', '/DOCUMENT/PROCESS_VARIABLE/meetingApvResponse/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'meetingEmailRecipients', '/DOCUMENT/PROCESS_VARIABLE/meetingEmailRecipients/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'meetingRequired', '/DOCUMENT/PROCESS_VARIABLE/meetingRequired/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'meetingResched',  '/DOCUMENT/PROCESS_VARIABLE/meetingResched/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'memIdClassSpec', '/DOCUMENT/GENERAL/SG_CS_ID/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'memIdHrLiaison', '/DOCUMENT/GENERAL/SG_HRL_ID/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'memIdSelectOff', '/DOCUMENT/GENERAL/SG_SO_ID/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'memIdStaffSpec', '/DOCUMENT/GENERAL/SG_SS_ID/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'posLocation', '/DOCUMENT/POSITION/POS_LOCATION/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'posTitle', '/DOCUMENT/POSITION/POS_TITLE/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'requestNum', '/DOCUMENT/PROCESS_VARIABLE/requestNum/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'selectOfficialReviewReq', '/DOCUMENT/PROCESS_VARIABLE/selectOfficialReviewReq/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'specialProgram', '/DOCUMENT/PROCESS_VARIABLE/specialProgram/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'alertMessage', '/DOCUMENT/PROCESS_VARIABLE/alertMessage/text()', null);
      HHS_CMS_HR.SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'meetingReschedReason', '/DOCUMENT/PROCESS_VARIABLE/meetingReschedReason/text()', null);

      V_RLVNTDATANAME := 'appointmentType';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_AT_ID/text()');

      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        ---------------------------------
        -- replace with lookup value
        ---------------------------------
        BEGIN
          SELECT TBL_LABEL INTO V_VALUE_LOOKUP
          FROM TBL_LOOKUP
          WHERE TBL_ID = TO_NUMBER(V_VALUE);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_VALUE_LOOKUP := NULL;
          WHEN OTHERS THEN
          V_VALUE_LOOKUP := NULL;
        END;
        V_VALUE := V_VALUE_LOOKUP;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

      V_RLVNTDATANAME := 'candidateName';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/POSITION/POS_CNDT_FIRST_NM/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/POSITION/POS_CNDT_LAST_NM/text()');
      IF V_VALUE IS NOT NULL AND V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_VALUE || ' ' || V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'classSpecialist';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_CS_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        -------------------------------
        -- participant prefix
        -------------------------------
        V_VALUE := '[U]' || V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'classificationType';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_CT_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        ---------------------------------
        -- replace with lookup value
        ---------------------------------
        BEGIN
          SELECT TBL_LABEL INTO V_VALUE_LOOKUP
          FROM TBL_LOOKUP
          WHERE TBL_ID = TO_NUMBER(V_VALUE);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_VALUE_LOOKUP := NULL;
          WHEN OTHERS THEN
          V_VALUE_LOOKUP := NULL;
        END;
        V_VALUE := V_VALUE_LOOKUP;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

      V_RLVNTDATANAME := 'execOfficer';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_XO_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        -------------------------------
        -- participant prefix
        -------------------------------
        V_VALUE := '[U]' || V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

      V_RLVNTDATANAME := 'hrLiaison';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_HRL_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        -------------------------------
        -- participant prefixa
        -------------------------------
        V_VALUE := '[U]' || V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

      V_RLVNTDATANAME := 'lastActivityCompDate';
      BEGIN
        SELECT TO_CHAR(SYSTIMESTAMP AT TIME ZONE 'UTC', 'YYYY/MM/DD HH24:MI:SS') INTO V_VALUE FROM DUAL;
        EXCEPTION
        WHEN OTHERS THEN V_VALUE := NULL;
      END;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'meetingDate';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MEETING/SSH_MEETING_SCHED_DT/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        -------------------------------------
        -- date format and GMT conversion
        -------------------------------------
        V_VALUE := TO_CHAR(SYS_EXTRACT_UTC(TO_DATE(V_VALUE, 'YYYY-MM-DD')), 'YYYY/MM/DD HH24:MI:SS');
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'meetingDateCutOff';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MEETING/SSH_MEETING_SCHED_DT/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        -------------------------------------
        -- date format and GMT conversion
        -------------------------------------
        --V_VALUE := TO_CHAR(SYS_EXTRACT_UTC(TO_DATE(V_VALUE || ' 23:59:00', 'YYYY-MM-DD HH24:MI:SS')), 'YYYY/MM/DD HH24:MI:SS');
        -- For current date, make the cutoff date past so that wait activity is completed immediately.
        -- For future date, subtract one day and make the time before midnight, i.e. 23:59.
        V_VALUE := TO_CHAR((SYS_EXTRACT_UTC(TO_DATE(V_VALUE || ' 23:59:00', 'YYYY-MM-DD HH24:MI:SS')) - 1), 'YYYY/MM/DD HH24:MI:SS');
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'meetingDateString';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/MEETING/SSH_MEETING_SCHED_DT/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        -------------------------------------
        -- date format for display
        -------------------------------------
        V_VALUE := TO_CHAR(TO_DATE(V_VALUE, 'YYYY-MM-DD'), 'MM/DD/YYYY');
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'meetingRecorders';
      --V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/meetingRecorders/text()');
      ---------------------------
      -- TODO: currently mapped to only classSpecialist, but it should be able to handle multiple participants
      ---------------------------
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_CS_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        -------------------------------
        -- participant prefix
        -------------------------------
        V_VALUE := '[U]' || V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      --V_RLVNTDATANAME := 'memIdExecOff';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_XO_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        SELECT REGEXP_SUBSTR (V_VALUE, '[^,]+', 1, 1) INTO V_VALUE1 FROM DUAL;
        SELECT REGEXP_SUBSTR (V_VALUE, '[^,]+', 1, 2) INTO V_VALUE2 FROM DUAL;
        SELECT REGEXP_SUBSTR (V_VALUE, '[^,]+', 1, 3) INTO V_VALUE3 FROM DUAL;

        V_RLVNTDATANAME := 'memIdExecOff';
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE1) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

        IF V_VALUE1 IS NOT NULL THEN
          V_VALUE1 := '[U]' || V_VALUE1;
        END IF;
        V_RLVNTDATANAME := 'execOfficer';
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE1) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

        V_RLVNTDATANAME := 'memIdExecOff2';
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE2) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

        IF V_VALUE2 IS NOT NULL THEN
          V_VALUE2 := '[U]' || V_VALUE2;
        END IF;
        V_RLVNTDATANAME := 'execOfficer2';
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE2) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

        V_RLVNTDATANAME := 'memIdExecOff3';
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE3) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

        IF V_VALUE3 IS NOT NULL THEN
          V_VALUE3 := '[U]' || V_VALUE3;
        END IF;
        V_RLVNTDATANAME := 'execOfficer3';
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE3) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

      ELSE

        UPDATE BIZFLOW.RLVNTDATA SET VALUE = NULL
        WHERE RLVNTDATANAME IN ('memIdExecOff', 'memIdExecOff2', 'memIdExecOff3', 'execOfficer', 'execOfficer2', 'execOfficer3') AND PROCID = I_PROCID;

      END IF;

      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);


      V_RLVNTDATANAME := 'posIs';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/POSITION/POS_SUPERVISORY/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        ---------------------------------
        -- replace with lookup value
        ---------------------------------
        BEGIN
          SELECT TBL_LABEL INTO V_VALUE_LOOKUP
          FROM TBL_LOOKUP
          WHERE TBL_ID = TO_NUMBER(V_VALUE);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_VALUE_LOOKUP := NULL;
          WHEN OTHERS THEN
          V_VALUE_LOOKUP := NULL;
        END;
        V_VALUE := V_VALUE_LOOKUP;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'posPayPlan';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/POSITION/POS_PAY_PLAN_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        ---------------------------------
        -- replace with lookup value
        ---------------------------------
        BEGIN
          SELECT TBL_LABEL INTO V_VALUE_LOOKUP
          FROM TBL_LOOKUP
          --WHERE TBL_ID = TO_NUMBER(V_VALUE);
          WHERE TBL_LTYPE = 'PayPlan' AND TBL_NAME = V_VALUE;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_VALUE_LOOKUP := NULL;
          WHEN OTHERS THEN
          V_VALUE_LOOKUP := NULL;
        END;
        V_VALUE := V_VALUE_LOOKUP;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'posSensitivity';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/POSITION/POS_SEC_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        ---------------------------------
        -- replace with lookup value
        ---------------------------------
        BEGIN
          SELECT TBL_LABEL INTO V_VALUE_LOOKUP
          FROM TBL_LOOKUP
          WHERE TBL_ID = TO_NUMBER(V_VALUE);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_VALUE_LOOKUP := NULL;
          WHEN OTHERS THEN
          V_VALUE_LOOKUP := NULL;
        END;
        V_VALUE := V_VALUE_LOOKUP;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'posSeries';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/POSITION/POS_SERIES/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        ---------------------------------
        -- replace with lookup value
        ---------------------------------
        BEGIN
          SELECT TBL_LABEL INTO V_VALUE_LOOKUP
          FROM TBL_LOOKUP
          --WHERE TBL_ID = TO_NUMBER(V_VALUE);
          WHERE TBL_LTYPE = 'OccupationalSeries' AND TBL_NAME = V_VALUE;
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_VALUE_LOOKUP := NULL;
          WHEN OTHERS THEN
          V_VALUE_LOOKUP := NULL;
        END;
        V_VALUE := V_VALUE_LOOKUP;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'posSupervisor';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/POSITION/POS_SUPERVISORY/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        ---------------------------------
        -- replace with lookup value
        ---------------------------------
        BEGIN
          SELECT TBL_LABEL INTO V_VALUE_LOOKUP
          FROM TBL_LOOKUP
          WHERE TBL_ID = TO_NUMBER(V_VALUE);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_VALUE_LOOKUP := NULL;
          WHEN OTHERS THEN
          V_VALUE_LOOKUP := NULL;
        END;
        V_VALUE := V_VALUE_LOOKUP;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'requestStatus';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/requestStatus/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      -------------------------------------------------------------------------------
      -- Only update if not blank to prevent overwriting unintentionally
      -------------------------------------------------------------------------------
      IF V_VALUE IS NOT NULL THEN
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
      END IF;


      V_RLVNTDATANAME := 'requestStatusDate';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/requestStatusDate/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        -------------------------------------
        -- even though it is date, do not format or perform GMT conversion
        -------------------------------------
        V_VALUE := V_VALUE;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      -------------------------------------------------------------------------------
      -- Only update if not blank to prevent overwriting unintentionally
      -------------------------------------------------------------------------------
      IF V_VALUE IS NOT NULL THEN
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
      END IF;


      V_RLVNTDATANAME := 'requestType';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_RT_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        ---------------------------------
        -- replace with lookup value
        ---------------------------------
        BEGIN
          SELECT TBL_LABEL INTO V_VALUE_LOOKUP
          FROM TBL_LOOKUP
          WHERE TBL_ID = TO_NUMBER(V_VALUE);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_VALUE_LOOKUP := NULL;
          WHEN OTHERS THEN
          V_VALUE_LOOKUP := NULL;
        END;
        V_VALUE := V_VALUE_LOOKUP;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'returnToSOFromClassSpec';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/returnToSOFromClassSpec/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      -------------------------------------------------------------------------------
      -- This pv can be updated from multiple workitem
      -- Only update if not blank to prevent overwriting unintentionally
      -------------------------------------------------------------------------------
      IF V_VALUE IS NOT NULL THEN
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
      END IF;


      V_RLVNTDATANAME := 'returnToSOFromStaffSpec';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/returnToSOFromStaffSpec/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      -------------------------------------------------------------------------------
      -- This pv can be updated from multiple workitem
      -- Only update if not blank to prevent overwriting unintentionally
      -------------------------------------------------------------------------------
      IF V_VALUE IS NOT NULL THEN
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
      END IF;


      V_RLVNTDATANAME := 'secondSubOrg';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_ADMIN_CD/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        ---------------------------------
        -- replace with admin code desc lookup value
        ---------------------------------
        BEGIN
          SELECT AC_ADMIN_CD_DESCR INTO V_VALUE_LOOKUP
          FROM ADMIN_CODES
          WHERE AC_ADMIN_CD = SUBSTR(V_VALUE, 1, 3);
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          V_VALUE_LOOKUP := NULL;
          WHEN OTHERS THEN
          V_VALUE_LOOKUP := NULL;
        END;
        V_VALUE := V_VALUE_LOOKUP;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'selectOfficial';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_SO_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        -------------------------------
        -- participant prefix
        -------------------------------
        V_VALUE := '[U]' || V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'smeEmailAddresses';
      V_VALUE := NULL;
      -- check and append SME_EMAIL_JA
      IF I_FIELD_DATA.EXISTSNODE('/DOCUMENT/SUBJECT_MATTER_EXPERT/SME_FOR_JOB_ANALYSIS/text()') = 1
         AND I_FIELD_DATA.EXTRACT('/DOCUMENT/SUBJECT_MATTER_EXPERT/SME_FOR_JOB_ANALYSIS/text()').GETSTRINGVAL() = 'true'
         AND I_FIELD_DATA.EXISTSNODE('/DOCUMENT/SUBJECT_MATTER_EXPERT/SME_EMAIL_JA/text()') = 1
      THEN
        V_VALUE := V_VALUE || I_FIELD_DATA.EXTRACT('/DOCUMENT/SUBJECT_MATTER_EXPERT/SME_EMAIL_JA/text()').GETSTRINGVAL() || ';';
      END IF;
      -- check and append SME_EMAIL_QUAL 1 and/or 2
      IF I_FIELD_DATA.EXISTSNODE('/DOCUMENT/SUBJECT_MATTER_EXPERT/SME_FOR_QUALIFICATION/text()') = 1
         AND I_FIELD_DATA.EXTRACT('/DOCUMENT/SUBJECT_MATTER_EXPERT/SME_FOR_QUALIFICATION/text()').GETSTRINGVAL() = 'true'
      THEN
        IF I_FIELD_DATA.EXISTSNODE('/DOCUMENT/SUBJECT_MATTER_EXPERT/SME_EMAIL_QUAL_1/text()') = 1
        THEN
          V_VALUE := V_VALUE || I_FIELD_DATA.EXTRACT('/DOCUMENT/SUBJECT_MATTER_EXPERT/SME_EMAIL_QUAL_1/text()').GETSTRINGVAL() || ';';
        END IF;
        IF I_FIELD_DATA.EXISTSNODE('/DOCUMENT/SUBJECT_MATTER_EXPERT/SME_EMAIL_QUAL_2/text()') = 1
        THEN
          V_VALUE := V_VALUE || I_FIELD_DATA.EXTRACT('/DOCUMENT/SUBJECT_MATTER_EXPERT/SME_EMAIL_QUAL_2/text()').GETSTRINGVAL() || ';';
        END IF;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;

      V_RLVNTDATANAME := 'staffSpecialist';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/GENERAL/SG_SS_ID/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        -------------------------------
        -- participant prefix
        -------------------------------
        --V_VALUE := '[U]' || V_XMLVALUE.GETSTRINGVAL();
        -- If the Job Request is for Special Program, SG_SS_ID may point to User Group,
        -- rather than individual user.  Therefore, lookup
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
        BEGIN
          SELECT TYPE INTO V_VALUE_LOOKUP FROM BIZFLOW.MEMBER WHERE MEMBERID = V_VALUE;
          EXCEPTION
          WHEN OTHERS THEN
          V_VALUE_LOOKUP := NULL;
        END;

        IF V_VALUE_LOOKUP IS NOT NULL THEN
          V_VALUE := '[' || V_VALUE_LOOKUP || ']' || V_XMLVALUE.GETSTRINGVAL();
        ELSE
          V_VALUE := NULL;
        END IF;
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'worksheetFeedbackClassSpec';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/worksheetFeedbackClassSpec/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      -------------------------------------------------------------------------------
      -- This pv can be updated from multiple workitem
      -- Only update if not blank to prevent overwriting unintentionally
      -------------------------------------------------------------------------------
      IF V_VALUE IS NOT NULL THEN
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
      END IF;


      V_RLVNTDATANAME := 'worksheetFeedbackSelectOfficial';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/worksheetFeedbackSelectOfficial/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;


      V_RLVNTDATANAME := 'worksheetFeedbackStaffSpec';
      V_XMLVALUE := I_FIELD_DATA.EXTRACT('/DOCUMENT/PROCESS_VARIABLE/worksheetFeedbackStaffSpec/text()');
      IF V_XMLVALUE IS NOT NULL THEN
        V_VALUE := V_XMLVALUE.GETSTRINGVAL();
      ELSE
        V_VALUE := NULL;
      END IF;
      --DBMS_OUTPUT.PUT_LINE('    V_RLVNTDATANAME = ' || V_RLVNTDATANAME);
      --DBMS_OUTPUT.PUT_LINE('    V_VALUE         = ' || V_VALUE);
      -------------------------------------------------------------------------------
      -- This pv can be updated from multiple workitem
      -- Only update if not blank to prevent overwriting unintentionally
      -------------------------------------------------------------------------------
      IF V_VALUE IS NOT NULL THEN
        UPDATE BIZFLOW.RLVNTDATA SET VALUE = UTL_I18N.UNESCAPE_REFERENCE(V_VALUE) WHERE RLVNTDATANAME = V_RLVNTDATANAME AND PROCID = I_PROCID;
      END IF;


      --DBMS_OUTPUT.PUT_LINE('End PV update  -------------------');

    END IF;

    EXCEPTION
    WHEN OTHERS THEN
    SP_ERROR_LOG();
    --DBMS_OUTPUT.PUT_LINE('Error occurred while executing SP_UPDATE_PV_STRATCON -------------------');
  END;
/

CREATE OR REPLACE PROCEDURE SP_UPDATE_PV_INCENTIVES
	(
		  I_PROCID            IN      NUMBER
		, I_FIELD_DATA      IN      XMLTYPE
	)
IS
	V_XMLVALUE             XMLTYPE;
	V_INCENTIVE_TYPE     NVARCHAR2(50);

	V_DISAPPROVAL_CNT    NUMBER;
	V_APPROVAL_VALUE     NVARCHAR2(10);

	BEGIN
		--DBMS_OUTPUT.PUT_LINE('PARAMETERS ----------------');
		--DBMS_OUTPUT.PUT_LINE('    I_PROCID IS NULL?  = ' || (CASE WHEN I_PROCID IS NULL THEN 'YES' ELSE 'NO' END));
		--DBMS_OUTPUT.PUT_LINE('    I_PROCID           = ' || TO_CHAR(I_PROCID));
		--DBMS_OUTPUT.PUT_LINE('    I_FIELD_DATA       = ' || I_FIELD_DATA.GETCLOBVAL());
		--DBMS_OUTPUT.PUT_LINE(' ----------------');

		IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN
			--DBMS_OUTPUT.PUT_LINE('Starting PV update ----------');

			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'requestNumber', '/formData/items/item[id="associatedNEILRequest"]/value/requestNumber/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'requestDate', '/formData/items/item[id="requestDate"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'administrativeCode', '/formData/items/item[id="administrativeCode"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'associatedIncentives', '/formData/items/item[id="associatedIncentives"]/value/requestNumber/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'candidateName', '/formData/items/item[id="candidateName"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'hrSpecialist', '/formData/items/item[id="hrSpecialist"]/value/participantId/text()', '/formData/items/item[id="hrSpecialist"]/value/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'incentiveType', '/formData/items/item[id="incentiveType"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'payPlanSeriesGrade', '/formData/items/item[id="payPlanSeriesGrade"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'positionTitle', '/formData/items/item[id="positionTitle"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'componentUserIds', '/formData/items/item[id="componentUserIds"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'relatedUserIds', '/formData/items/item[id="relatedUserIds"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'selectingOfficial', '/formData/items/item[id="selectingOfficial"]/value/participantId/text()', '/formData/items/item[id="selectingOfficial"]/value/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'pcaType', '/formData/items/item[id="pcaType"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'candidateAccept', '/formData/items/item[id="candiAgreeRenewal"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'requesterRole', '/formData/items/item[id="requesterRole"]/value/text()');

			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'execOfficer', '/formData/items/item[id="executiveOfficers"]/value[1]/participantId/text()', '/formData/items/item[id="executiveOfficers"]/value[1]/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'execOfficer2', '/formData/items/item[id="executiveOfficers"]/value[2]/participantId/text()', '/formData/items/item[id="executiveOfficers"]/value[2]/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'execOfficer3', '/formData/items/item[id="executiveOfficers"]/value[3]/participantId/text()', '/formData/items/item[id="executiveOfficers"]/value[3]/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'hrLiaison', '/formData/items/item[id="hrLiaisons"]/value[1]/participantId/text()', '/formData/items/item[id="hrLiaisons"]/value[1]/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'hrLiaison2', '/formData/items/item[id="hrLiaisons"]/value[2]/participantId/text()', '/formData/items/item[id="hrLiaisons"]/value[2]/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'hrLiaison3', '/formData/items/item[id="hrLiaisons"]/value[3]/participantId/text()', '/formData/items/item[id="hrLiaisons"]/value[3]/name/text()');

			V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="incentiveType"]/value/text()');
			IF V_XMLVALUE IS NOT NULL THEN
				V_INCENTIVE_TYPE := V_XMLVALUE.GETSTRINGVAL();
			ELSE
				V_INCENTIVE_TYPE := NULL;
			END IF;

			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'oaApprovalReq', '/formData/items/item[id="requireAdminApproval"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'ohcApprovalReq', '/formData/items/item[id="requireOHCApproval"]/value/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'dgoDirector', '/formData/items/item[id="dghoDirector"]/value/participantId/text()', '/formData/items/item[id="dghoDirector"]/value/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'chiefMedicalOfficer', '/formData/items/item[id="chiefPhysician"]/value/participantId/text()', '/formData/items/item[id="chiefPhysician"]/value/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'ofmDirector', '/formData/items/item[id="ofmDirector"]/value/participantId/text()', '/formData/items/item[id="ofmDirector"]/value/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'tabgDirector', '/formData/items/item[id="tabgDirector"]/value/participantId/text()', '/formData/items/item[id="tabgDirector"]/value/name/text()');
			SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'ofcAdmin', '/formData/items/item[id="offAdmin"]/value/participantId/text()', '/formData/items/item[id="offAdmin"]/value/name/text()');

			IF 'PCA' = V_INCENTIVE_TYPE THEN
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'ohcDirector', '/formData/items/item[id="ohcDirector"]/value/participantId/text()', '/formData/items/item[id="ohcDirector"]/value/name/text()');
			ELSIF 'SAM' = V_INCENTIVE_TYPE THEN
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'samSupport', '/formData/items/item[id="supportSAM"]/value/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'ohcDirector', '/formData/items/item[id="reviewRcmdApprovalOHCDirector"]/value/participantId/text()', '/formData/items/item[id="reviewRcmdApprovalOHCDirector"]/value/name/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'tabgdApprove', '/formData/items/item[id="approvalDGHOValue"]/value/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'tabgApprove', '/formData/items/item[id="approvalTABGValue"]/value/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'ohcApprove', '/formData/items/item[id="approvalOHCValue"]/value/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'cocDirector', '/formData/items/item[id="cocDirector"]/value/participantId/text()', '/formData/items/item[id="cocDirector"]/value/name/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'cocDirectorName', '/formData/items/item[id="cocDirector"]/value/name/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'selectingOfficialName', '/formData/items/item[id="selectingOfficial"]/value/name/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'hrSpecialistName', '/formData/items/item[id="hrSpecialist"]/value/name/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'ohcDirectorName', '/formData/items/item[id="reviewRcmdApprovalOHCDirector"]/value/name/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'rcmdGrade', '/formData/items/item[id="reviewRcmdGrade"]/value/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'rcmdStep', '/formData/items/item[id="reviewRcmdStep"]/value/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'cancellationReason', '/formData/items/item[id="cancellationReason"]/value/text()');

				V_DISAPPROVAL_CNT := 0;
				IF V_DISAPPROVAL_CNT = 0 THEN
					V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="approvalSOValue"]/value/text()');
					IF V_XMLVALUE IS NOT NULL THEN
						V_APPROVAL_VALUE := V_XMLVALUE.GETSTRINGVAL();
						IF 'Disapprove' = V_APPROVAL_VALUE THEN
							SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '/formData/items/item[id="approvalSO"]/value/text()');
							V_DISAPPROVAL_CNT := 1;
						END IF;
					END IF;
				END IF;
				IF V_DISAPPROVAL_CNT = 0 THEN
					V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="approvalCOCValue"]/value/text()');
					IF V_XMLVALUE IS NOT NULL THEN
						V_APPROVAL_VALUE := V_XMLVALUE.GETSTRINGVAL();
						IF 'Disapprove' = V_APPROVAL_VALUE THEN
							SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '/formData/items/item[id="approvalCOC"]/value/text()');
							V_DISAPPROVAL_CNT := 1;
						END IF;
					END IF;
				END IF;
				IF V_DISAPPROVAL_CNT = 0 THEN
					V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="approvalDGHOValue"]/value/text()');
					IF V_XMLVALUE IS NOT NULL THEN
						V_APPROVAL_VALUE := V_XMLVALUE.GETSTRINGVAL();
						IF 'Disapprove' = V_APPROVAL_VALUE THEN
							SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '/formData/items/item[id="approvalDGHO"]/value/text()');
							V_DISAPPROVAL_CNT := 1;
						END IF;
					END IF;
				END IF;
				IF V_DISAPPROVAL_CNT = 0 THEN
					V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="approvalTABGValue"]/value/text()');
					IF V_XMLVALUE IS NOT NULL THEN
						V_APPROVAL_VALUE := V_XMLVALUE.GETSTRINGVAL();
						IF 'Disapprove' = V_APPROVAL_VALUE THEN
							SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '/formData/items/item[id="approvalTABG"]/value/text()');
							V_DISAPPROVAL_CNT := 1;
						END IF;
					END IF;
				END IF;
				IF V_DISAPPROVAL_CNT = 0 THEN
					V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="approvalOHCValue"]/value/text()');
					IF V_XMLVALUE IS NOT NULL THEN
						V_APPROVAL_VALUE := V_XMLVALUE.GETSTRINGVAL();
						IF 'Disapprove' = V_APPROVAL_VALUE THEN
							SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '/formData/items/item[id="approvalOHC"]/value/text()');
							V_DISAPPROVAL_CNT := 1;
						END IF;
					END IF;
				END IF;
				IF V_DISAPPROVAL_CNT = 0 THEN
					SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '');
				END IF;
			ELSIF 'LE' = V_INCENTIVE_TYPE THEN
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'leSupport', '/formData/items/item[id="supportLE"]/value/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'tabgdApprove', '/formData/items/item[id="leApprovalDGHOValue"]/value/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'tabgApprove', '/formData/items/item[id="leApprovalTABGValue"]/value/text()');
                SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'cocDirector', '/formData/items/item[id="lecocDirector"]/value/participantId/text()', '/formData/items/item[id="lecocDirector"]/value/name/text()');
				
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'cocDirectorName', '/formData/items/item[id="lecocDirector"]/value/name/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'selectingOfficialName', '/formData/items/item[id="selectingOfficial"]/value/name/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'hrSpecialistName', '/formData/items/item[id="hrSpecialist"]/value/name/text()');

				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'annualLeaveAccrualRate', '/formData/items/item[id="rcmdAnnualLeaveAccrualRate"]/value/text()');
				SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'cancellationReason', '/formData/items/item[id="cancellationReason"]/value/text()');

				V_DISAPPROVAL_CNT := 0;
				IF V_DISAPPROVAL_CNT = 0 THEN
					V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="leApprovalSOValue"]/value/text()');
					IF V_XMLVALUE IS NOT NULL THEN
						V_APPROVAL_VALUE := V_XMLVALUE.GETSTRINGVAL();
						IF 'Disapprove' = V_APPROVAL_VALUE THEN
							SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '/formData/items/item[id="leApprovalSO"]/value/text()');
							V_DISAPPROVAL_CNT := 1;
						END IF;
					END IF;
				END IF;
				IF V_DISAPPROVAL_CNT = 0 THEN
					V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="leApprovalCOCValue"]/value/text()');
					IF V_XMLVALUE IS NOT NULL THEN
						V_APPROVAL_VALUE := V_XMLVALUE.GETSTRINGVAL();
						IF 'Disapprove' = V_APPROVAL_VALUE THEN
							SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '/formData/items/item[id="leApprovalCOC"]/value/text()');
							V_DISAPPROVAL_CNT := 1;
						END IF;
					END IF;
				END IF;
				IF V_DISAPPROVAL_CNT = 0 THEN
					V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="leApprovalDGHOValue"]/value/text()');
					IF V_XMLVALUE IS NOT NULL THEN
						V_APPROVAL_VALUE := V_XMLVALUE.GETSTRINGVAL();
						IF 'Disapprove' = V_APPROVAL_VALUE THEN
							SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '/formData/items/item[id="leApprovalDGHO"]/value/text()');
							V_DISAPPROVAL_CNT := 1;
						END IF;
					END IF;
				END IF;
				IF V_DISAPPROVAL_CNT = 0 THEN
					V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="leApprovalTABGValue"]/value/text()');
					IF V_XMLVALUE IS NOT NULL THEN
						V_APPROVAL_VALUE := V_XMLVALUE.GETSTRINGVAL();
						IF 'Disapprove' = V_APPROVAL_VALUE THEN
							SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '/formData/items/item[id="leApprovalTABG"]/value/text()');
							V_DISAPPROVAL_CNT := 1;
						END IF;
					END IF;
				END IF;
				IF V_DISAPPROVAL_CNT = 0 THEN
					SP_UPDATE_PV_BY_XPATH(I_PROCID, I_FIELD_DATA, 'disapproverName', '');
				END IF;
			END IF;

		--DBMS_OUTPUT.PUT_LINE('End PV update  -------------------');

		END IF;

		EXCEPTION
		WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('Error occurred while executing SP_UPDATE_PV_INCENTIVES -------------------');
	END;

/

create or replace PROCEDURE SP_INIT_ERLR
(
	I_PROCID               IN  NUMBER
)
IS
    V_CNT                   INT;    
    V_FROM_PROCID           NUMBER(10);
    V_XMLDOC                XMLTYPE;    
    V_ORG_CASE_NUMBER       NUMBER(10);
    V_CASE_NUMBER           NUMBER(10);    
    V_GEN_EMP_HHSID         VARCHAR2(64);
    V_NEW_CASE_TYPE_ID	    NUMBER(38);
    V_NEW_CASE_TYPE_NAME    VARCHAR2(100);
BEGIN
    SELECT COUNT(1) INTO V_CNT
      FROM TBL_FORM_DTL
     WHERE PROCID = I_PROCID;

    IF V_CNT = 0 THEN
        V_CASE_NUMBER :=  ERLR_CASE_NUMBER_SEQ.NEXTVAL;
        UPDATE BIZFLOW.RLVNTDATA 
           SET VALUE = V_CASE_NUMBER
         WHERE RLVNTDATANAME = 'caseNumber' 
           AND PROCID = I_PROCID;

        -- CHECK: TRIGGERED FROM OTHER CASE
        BEGIN
            SELECT TO_NUMBER(VALUE)
              INTO V_FROM_PROCID
              FROM BIZFLOW.RLVNTDATA 
             WHERE RLVNTDATANAME = 'fromProcID' 
               AND PROCID = I_PROCID;
        EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            V_FROM_PROCID := NULL;
        END;

        IF V_FROM_PROCID IS NOT NULL THEN
            SELECT FIELD_DATA
              INTO V_XMLDOC
              FROM TBL_FORM_DTL
             WHERE PROCID = V_FROM_PROCID;

            SELECT TO_NUMBER(VALUE)
              INTO V_NEW_CASE_TYPE_ID
              FROM BIZFLOW.RLVNTDATA 
             WHERE RLVNTDATANAME = 'caseTypeID' 
               AND PROCID = I_PROCID;

            SELECT TO_NUMBER(VALUE)
              INTO V_ORG_CASE_NUMBER
              FROM BIZFLOW.RLVNTDATA 
             WHERE RLVNTDATANAME = 'caseNumber' 
               AND PROCID = V_FROM_PROCID;

            BEGIN
              SELECT TBL_LABEL
                INTO V_NEW_CASE_TYPE_NAME
                FROM TBL_LOOKUP
               WHERE TBL_ID = V_NEW_CASE_TYPE_ID;
            EXCEPTION
              WHEN NO_DATA_FOUND THEN
              V_NEW_CASE_TYPE_NAME := TO_CHAR(V_NEW_CASE_TYPE_ID);
              WHEN OTHERS THEN
              V_NEW_CASE_TYPE_NAME := TO_CHAR(V_NEW_CASE_TYPE_ID);
            END;

            UPDATE BIZFLOW.RLVNTDATA
               SET VALUE = (SELECT VALUE FROM BIZFLOW.RLVNTDATA WHERE RLVNTDATANAME='employeeName' AND PROCID = V_FROM_PROCID)
             WHERE PROCID = I_PROCID
               AND RLVNTDATANAME='employeeName';

            UPDATE BIZFLOW.RLVNTDATA
               SET VALUE = (SELECT VALUE FROM BIZFLOW.RLVNTDATA WHERE RLVNTDATANAME='contactName' AND PROCID = V_FROM_PROCID)
             WHERE PROCID = I_PROCID
               AND RLVNTDATANAME='contactName';

            UPDATE BIZFLOW.RLVNTDATA
               SET VALUE = (SELECT VALUE FROM BIZFLOW.RLVNTDATA WHERE RLVNTDATANAME='initialContactDate' AND PROCID = V_FROM_PROCID)
             WHERE PROCID = I_PROCID
               AND RLVNTDATANAME='initialContactDate';

            UPDATE BIZFLOW.RLVNTDATA
               SET VALUE = (SELECT VALUE FROM BIZFLOW.RLVNTDATA WHERE RLVNTDATANAME='organization' AND PROCID = V_FROM_PROCID)
             WHERE PROCID = I_PROCID
               AND RLVNTDATANAME='organization';

            UPDATE BIZFLOW.RLVNTDATA
               SET VALUE = (SELECT VALUE FROM BIZFLOW.RLVNTDATA WHERE RLVNTDATANAME='primaryDWCSpecialist' AND PROCID = V_FROM_PROCID)
             WHERE PROCID = I_PROCID
               AND RLVNTDATANAME='primaryDWCSpecialist';

            UPDATE BIZFLOW.RLVNTDATA
               SET VALUE = (SELECT VALUE FROM BIZFLOW.RLVNTDATA WHERE RLVNTDATANAME='secondaryDWCSpecialist' AND PROCID = V_FROM_PROCID)
             WHERE PROCID = I_PROCID
               AND RLVNTDATANAME='secondaryDWCSpecialist';

            UPDATE BIZFLOW.RLVNTDATA
               SET VALUE = V_NEW_CASE_TYPE_NAME
             WHERE PROCID = I_PROCID
               AND RLVNTDATANAME='caseType';

            SELECT XMLQUERY('/formData/items/item[id="GEN_EMPLOYEE_ID"]/value/text()' PASSING V_XMLDOC RETURNING CONTENT).GETSTRINGVAL() INTO V_GEN_EMP_HHSID FROM DUAL;
            SELECT DELETEXML(V_XMLDOC,'/formData/items/item/id[not(contains(text(),"GEN_"))]/..') INTO V_XMLDOC FROM DUAL;
            SELECT DELETEXML(V_XMLDOC,'/formData/items/item[id="GEN_CASE_CATEGORY"]') INTO V_XMLDOC FROM DUAL;
            SELECT DELETEXML(V_XMLDOC,'/formData/items/item[id="GEN_CASE_DESC"]') INTO V_XMLDOC FROM DUAL;
            SELECT DELETEXML(V_XMLDOC,'/formData/items/item[id="GEN_CASE_STATUS"]') INTO V_XMLDOC FROM DUAL;
            SELECT DELETEXML(V_XMLDOC,'/formData/items/item[id="GEN_CUST_INIT_CONTACT_DT"]') INTO V_XMLDOC FROM DUAL;

            IF V_NEW_CASE_TYPE_ID IS NOT NULL AND V_NEW_CASE_TYPE_NAME IS NOT NULL THEN
                SELECT UPDATEXML(V_XMLDOC,'/formData/items/item[id="GEN_CASE_TYPE"]/value/text()', V_NEW_CASE_TYPE_ID) INTO V_XMLDOC FROM DUAL;
                SELECT UPDATEXML(V_XMLDOC,'/formData/items/item[id="GEN_CASE_TYPE"]/text/text()',  V_NEW_CASE_TYPE_NAME) INTO V_XMLDOC FROM DUAL;                
            END IF;
        END IF;        

        IF V_XMLDOC IS NULL THEN
            V_XMLDOC := XMLTYPE('<formData xmlns=""><items><item><id>CASE_NUMBER</id><etype>variable</etype><value>'|| V_CASE_NUMBER ||'</value></item></items><history><item /></history></formData>');
        ELSE
	    INSERT INTO ERLR_CASE(ERLR_CASE_NUMBER, PROCID) VALUES(V_CASE_NUMBER, I_PROCID);
            SP_ERLR_ADD_RELATED_CASE(V_CASE_NUMBER, V_ORG_CASE_NUMBER, 'T', NULL);            
            SELECT APPENDCHILDXML(V_XMLDOC, '/formData/items', XMLTYPE('<item><id>CASE_NUMBER</id><etype>variable</etype><value>'|| V_CASE_NUMBER ||'</value></item>')) INTO V_XMLDOC FROM DUAL;
            IF V_GEN_EMP_HHSID IS NOT NULL AND 1<LENGTH(V_GEN_EMP_HHSID) THEN
                SELECT APPENDCHILDXML(V_XMLDOC, '/formData/items', XMLTYPE('<item><id>_disableDeleteEmployeeInfo</id><etype>variable</etype><value>Yes</value></item>')) INTO V_XMLDOC FROM DUAL;
            END IF;
        END IF;

        INSERT INTO TBL_FORM_DTL (PROCID, ACTSEQ, WITEMSEQ, FORM_TYPE, FIELD_DATA, CRT_DT, CRT_USR)
                          VALUES (I_PROCID, 0, 0, 'CMSERLR', V_XMLDOC, SYSDATE, 'System');
	
	SP_UPDATE_ERLR_TABLE(I_PROCID);
    END IF;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
END;
/

COMMIT;
/
