SET DEFINE OFF;




--------------------------------------------------------
--  DDL for Function FN_GET_LOCATION_DSCR
--------------------------------------------------------

/**
 * Gets LOCATION descriptions.
 *
 * @param I_LOCATION_IDS - Selected item IDs, semicolon separated.
 *
 * @return NVARCHAR2 - Description of the selected items, comma separated.
 */
CREATE OR REPLACE FUNCTION FN_GET_LOCATION_DSCR
(
	I_LOCATION_IDS              IN      NVARCHAR2
)
RETURN NVARCHAR2
IS
	V_INPUT_VAL                 NVARCHAR2(3000);
	V_RETURN_VAL                NVARCHAR2(4000);
	V_SQL                       VARCHAR2(4000);
	V_IDX                       NUMBER(10);
	V_LOCATION_CNT              NUMBER(10);
	TYPE LOCATION_TYPE IS REF CURSOR;
	CUR_LOCATION                LOCATION_TYPE;
	REC_LOCATION                LOCATION%ROWTYPE;
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_LOCATION_DSCR -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_LOCATION_IDS = ' || I_LOCATION_IDS );

	-- input validation
	IF I_LOCATION_IDS IS NULL OR LENGTH(TRIM(I_LOCATION_IDS)) <= 0
	THEN
		RETURN NULL;
	ELSE
		-- prepare input value to be used in IN clause
		V_INPUT_VAL := TRIM(I_LOCATION_IDS);
		V_INPUT_VAL := REPLACE(V_INPUT_VAL, ',', ''',''');
		V_INPUT_VAL := CONCAT('''', V_INPUT_VAL);
		V_INPUT_VAL := CONCAT(V_INPUT_VAL, '''');
	END IF;

	V_RETURN_VAL := '';
	V_SQL := 'SELECT * FROM LOCATION WHERE LOC_ID IN (' || V_INPUT_VAL || ') ';
	--DBMS_OUTPUT.PUT_LINE('    V_SQL = ' || V_SQL );

	-- Loop through to look up description of each
	-- and concatenate descriptions delimitted by semicolon.
	--DBMS_OUTPUT.PUT_LINE('Before open cursor for LOCATION');
	OPEN CUR_LOCATION FOR V_SQL;
	--DBMS_OUTPUT.PUT_LINE('After open cursor for LOCATION');

	V_LOCATION_CNT := 0;
	LOOP
		FETCH CUR_LOCATION INTO REC_LOCATION;
		EXIT WHEN CUR_LOCATION%NOTFOUND;
		V_LOCATION_CNT := V_LOCATION_CNT + 1;
		V_RETURN_VAL := V_RETURN_VAL || REC_LOCATION.LOC_CITY || ', ' || REC_LOCATION.LOC_STATE || '; ';
		--DBMS_OUTPUT.PUT_LINE('Fetched record, loop count = ' || TO_CHAR(V_LOCATION_CNT) || ' V_RETURN_VAL = ' || V_RETURN_VAL);
	END LOOP;
	CLOSE CUR_LOCATION;

	-- clear trailing comma if exists
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
	THEN
		V_IDX := INSTR(V_RETURN_VAL, '; ', -1);
		IF V_IDX > 0 AND V_IDX = (LENGTH(V_RETURN_VAL) - 1)
		THEN
			V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 0, (LENGTH(V_RETURN_VAL) - 2));
		END IF;
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_LOCATION_DSCR -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_LOCATION_DSCR -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_MEMBER_DSCR
--------------------------------------------------------

/**
 * Gets member descriptions.
 *
 * @param I_MEMBERIDS - Selected Member IDs, comma separated.
 *
 * @return NVARCHAR2 - Names of the selected members, comma separated.
 */
CREATE OR REPLACE FUNCTION FN_GET_MEMBER_DSCR
(
	I_MEMBERIDS                 IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_INPUT_VAL                 NVARCHAR2(1000);
	V_SQL                       VARCHAR2(4000);
	V_RETURN_VAL                NVARCHAR2(4000);

	V_IDX                       NUMBER(10);
	V_LOOP_CNT                  NUMBER(10);
	TYPE MEMBER_TYPE IS REF CURSOR;
	CUR_MEMBER                  MEMBER_TYPE;
	REC_MEMBER                  BIZFLOW.MEMBER%ROWTYPE;
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_MEMBER_DSCR -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_MEMBERIDS = ' || I_MEMBERIDS );

	-- input validation
	IF I_MEMBERIDS IS NULL OR LENGTH(TRIM(I_MEMBERIDS)) <= 0
	THEN
		RETURN NULL;
	END IF;

	V_INPUT_VAL := REPLACE(I_MEMBERIDS, ',', ''',''');
	V_INPUT_VAL := CONCAT('''', V_INPUT_VAL);
	V_INPUT_VAL := CONCAT(V_INPUT_VAL, '''');
	--DBMS_OUTPUT.PUT_LINE('    V_INPUT_VAL = ' || V_INPUT_VAL );

	V_SQL := 'SELECT * FROM BIZFLOW.MEMBER WHERE MEMBERID IN (' || V_INPUT_VAL || ') ';
	--DBMS_OUTPUT.PUT_LINE('    V_SQL = ' || V_SQL );

	-- Loop through to look up description of each
	-- and concatenate descriptions delimitted by comma.
	--DBMS_OUTPUT.PUT_LINE('Before open cursor for BIZFLOW.MEMBER');
	OPEN CUR_MEMBER FOR V_SQL;
	--DBMS_OUTPUT.PUT_LINE('After open cursor for BIZFLOW.MEMBER');

	V_LOOP_CNT := 0;
	LOOP
		FETCH CUR_MEMBER INTO REC_MEMBER;
		EXIT WHEN CUR_MEMBER%NOTFOUND;
		V_LOOP_CNT := V_LOOP_CNT + 1;
		V_RETURN_VAL := V_RETURN_VAL || REC_MEMBER.NAME || ', ';
		--DBMS_OUTPUT.PUT_LINE('Fetched record, loop count = ' || TO_CHAR(V_LOOP_CNT) || ' V_RETURN_VAL = ' || V_RETURN_VAL);
	END LOOP;
	CLOSE CUR_MEMBER;

	-- clear trailing comma if exists
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
	THEN
		V_IDX := INSTR(V_RETURN_VAL, ', ', -1);
		IF V_IDX > 0 AND V_IDX = (LENGTH(V_RETURN_VAL) - 1)
		THEN
			V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 0, (LENGTH(V_RETURN_VAL) - 2));
		END IF;
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_MEMBER_DSCR -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_MEMBER_DSCR -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_GRADE_ADVRT
--------------------------------------------------------

/**
 * Gets Grade Advertized value.
 *
 * @param POS_GA_1 through 15 - Grade Advertized field values.
 *
 * @return NVARCHAR2 - Concatenated Grade Advertized values delimitted by semicolon.
 */
CREATE OR REPLACE FUNCTION FN_GET_GRADE_ADVRT
(
	I_POS_GA_1                 IN  VARCHAR2
	, I_POS_GA_2               IN  VARCHAR2
	, I_POS_GA_3               IN  VARCHAR2
	, I_POS_GA_4               IN  VARCHAR2
	, I_POS_GA_5               IN  VARCHAR2
	, I_POS_GA_6               IN  VARCHAR2
	, I_POS_GA_7               IN  VARCHAR2
	, I_POS_GA_8               IN  VARCHAR2
	, I_POS_GA_9               IN  VARCHAR2
	, I_POS_GA_10              IN  VARCHAR2
	, I_POS_GA_11              IN  VARCHAR2
	, I_POS_GA_12              IN  VARCHAR2
	, I_POS_GA_13              IN  VARCHAR2
	, I_POS_GA_14              IN  VARCHAR2
	, I_POS_GA_15              IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(100);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_GRADE_ADVRT -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_1  = ' || I_POS_GA_1 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_2  = ' || I_POS_GA_2 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_3  = ' || I_POS_GA_3 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_4  = ' || I_POS_GA_4 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_5  = ' || I_POS_GA_5 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_6  = ' || I_POS_GA_6 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_7  = ' || I_POS_GA_7 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_8  = ' || I_POS_GA_8 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_9  = ' || I_POS_GA_9 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_10 = ' || I_POS_GA_10 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_11 = ' || I_POS_GA_11 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_12 = ' || I_POS_GA_12 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_13 = ' || I_POS_GA_13 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_14 = ' || I_POS_GA_14 );
	--DBMS_OUTPUT.PUT_LINE('    I_POS_GA_15 = ' || I_POS_GA_15 );

	V_RETURN_VAL :=
		CASE WHEN I_POS_GA_1  = '1'    THEN '01; ' ELSE '' END
		|| CASE WHEN I_POS_GA_2  = '1' THEN '02; ' ELSE '' END
		|| CASE WHEN I_POS_GA_3  = '1' THEN '03; ' ELSE '' END
		|| CASE WHEN I_POS_GA_4  = '1' THEN '04; ' ELSE '' END
		|| CASE WHEN I_POS_GA_5  = '1' THEN '05; ' ELSE '' END
		|| CASE WHEN I_POS_GA_6  = '1' THEN '06; ' ELSE '' END
		|| CASE WHEN I_POS_GA_7  = '1' THEN '07; ' ELSE '' END
		|| CASE WHEN I_POS_GA_8  = '1' THEN '08; ' ELSE '' END
		|| CASE WHEN I_POS_GA_9  = '1' THEN '09; ' ELSE '' END
		|| CASE WHEN I_POS_GA_10 = '1' THEN '10; ' ELSE '' END
		|| CASE WHEN I_POS_GA_11 = '1' THEN '11; ' ELSE '' END
		|| CASE WHEN I_POS_GA_12 = '1' THEN '12; ' ELSE '' END
		|| CASE WHEN I_POS_GA_13 = '1' THEN '13; ' ELSE '' END
		|| CASE WHEN I_POS_GA_14 = '1' THEN '14; ' ELSE '' END
		|| CASE WHEN I_POS_GA_15 = '1' THEN '15; ' ELSE '' END
	;
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
		AND SUBSTR(V_RETURN_VAL, (LENGTH(V_RETURN_VAL) - 1)) = '; '
	THEN
		V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 1, (LENGTH(V_RETURN_VAL) - 2));
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_GRADE_ADVRT -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_GRADE_ADVRT -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_ANNOUNCE_NOT_REQ
--------------------------------------------------------

/**
 * Gets Areas of Consideration - Announcement Not Required section data.
 *
 * @param I_AOC_30PCT_DISABLED_VETS - 30% or More Disabled Veterans
 * @param I_AOC_EXPERT_CONS - Expert/Consultant
 * @param I_AOC_IPA - Intergovernmental Personnel Act (IPA)
 * @param I_AOC_OPER_WARFIGHTER - Operation Warfighter Program
 * @param I_AOC_DISABILITIES - Schedule A (for persons with disabilities)
 * @param I_AOC_STUDENT_VOL - Student Volunteer Program
 * @param I_AOC_VETS_RECRUIT_APPT - Veterans Recruitment Appointment
 * @param I_AOC_VOC_REHAB_EMPL - Voc. Rehab & Employment Program
 * @param I_AOC_WORKFORCE_RECRUIT - Workforce Recruitment Program
 *
 * @return NVARCHAR2 - Concatenated Announcement Not Required section values delimitted by semicolon.
 */
CREATE OR REPLACE FUNCTION FN_GET_ANNOUNCE_NOT_REQ
(
	I_AOC_30PCT_DISABLED_VETS      IN  VARCHAR2
	, I_AOC_EXPERT_CONS            IN  VARCHAR2
	, I_AOC_IPA                    IN  VARCHAR2
	, I_AOC_OPER_WARFIGHTER        IN  VARCHAR2
	, I_AOC_DISABILITIES           IN  VARCHAR2
	, I_AOC_STUDENT_VOL            IN  VARCHAR2
	, I_AOC_VETS_RECRUIT_APPT      IN  VARCHAR2
	, I_AOC_VOC_REHAB_EMPL         IN  VARCHAR2
	, I_AOC_WORKFORCE_RECRUIT      IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(500);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_ANNOUNCE_NOT_REQ -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_30PCT_DISABLED_VETS  = ' || I_AOC_30PCT_DISABLED_VETS );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_EXPERT_CONS          = ' || I_AOC_EXPERT_CONS );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_IPA                  = ' || I_AOC_IPA );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_OPER_WARFIGHTER      = ' || I_AOC_OPER_WARFIGHTER );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_DISABILITIES         = ' || I_AOC_DISABILITIES );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_STUDENT_VOL          = ' || I_AOC_STUDENT_VOL );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_VETS_RECRUIT_APPT    = ' || I_AOC_VETS_RECRUIT_APPT );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_VOC_REHAB_EMPL       = ' || I_AOC_VOC_REHAB_EMPL );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_WORKFORCE_RECRUIT    = ' || I_AOC_WORKFORCE_RECRUIT );

	V_RETURN_VAL :=
		CASE WHEN I_AOC_30PCT_DISABLED_VETS = '1'     THEN '30% or More Disabled Veterans; ' ELSE '' END
		|| CASE WHEN I_AOC_EXPERT_CONS = '1'          THEN 'Expert/Consultant; ' ELSE '' END
		|| CASE WHEN I_AOC_IPA = '1'                  THEN 'Intergovernmental Personnel Act (IPA); ' ELSE '' END
		|| CASE WHEN I_AOC_OPER_WARFIGHTER = '1'      THEN 'Operation Warfighter Program; ' ELSE '' END
		|| CASE WHEN I_AOC_DISABILITIES = '1'         THEN 'Schedule A (for persons with disabilities); ' ELSE '' END
		|| CASE WHEN I_AOC_STUDENT_VOL = '1'          THEN 'Student Volunteer Program; ' ELSE '' END
		|| CASE WHEN I_AOC_VETS_RECRUIT_APPT = '1'    THEN 'Veterans Recruitment Appointment; ' ELSE '' END
		|| CASE WHEN I_AOC_VOC_REHAB_EMPL = '1'       THEN 'Voc. Rehab & Employment Program; ' ELSE '' END
		|| CASE WHEN I_AOC_WORKFORCE_RECRUIT = '1'    THEN 'Workforce Recruitment Program; ' ELSE '' END
	;
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
		AND SUBSTR(V_RETURN_VAL, (LENGTH(V_RETURN_VAL) - 1)) = '; '
	THEN
		V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 1, (LENGTH(V_RETURN_VAL) - 2));
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_ANNOUNCE_NOT_REQ -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_ANNOUNCE_NOT_REQ -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_ANNOUNCE_REQ
--------------------------------------------------------

/**
 * Gets Areas of Consideration - Announcement Required section data.
 *
 * @param I_AOC_MIL_SPOUSES - Certain Military Spouses
 * @param I_AOC_DIRECT_HIRE - Direct Hire
 * @param I_AOC_RE_EMPLOYMENT - Reemployed Annuitant
 * @param I_AOC_PATHWAYS - Pathways Program (Intern, PMF, RG)
 * @param I_AOC_PEACE_CORPS_VOL - Peace Corps/Volunteers
 * @param I_AOC_REINSTATEMENT - Reinstatement
 * @param I_AOC_SHARED_CERT - Shared Certificate
 *
 * @return NVARCHAR2 - Concatenated Announcement Required section values delimitted by semicolon.
 */
CREATE OR REPLACE FUNCTION FN_GET_ANNOUNCE_REQ
(
	I_AOC_MIL_SPOUSES          IN  VARCHAR2
	, I_AOC_DIRECT_HIRE        IN  VARCHAR2
	, I_AOC_RE_EMPLOYMENT      IN  VARCHAR2
	, I_AOC_PATHWAYS           IN  VARCHAR2
	, I_AOC_PEACE_CORPS_VOL    IN  VARCHAR2
	, I_AOC_REINSTATEMENT      IN  VARCHAR2
	, I_AOC_SHARED_CERT        IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(500);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_ANNOUNCE_REQ -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MIL_SPOUSES      = ' || I_AOC_MIL_SPOUSES );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_DIRECT_HIRE      = ' || I_AOC_DIRECT_HIRE );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_RE_EMPLOYMENT    = ' || I_AOC_RE_EMPLOYMENT );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_PATHWAYS         = ' || I_AOC_PATHWAYS );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_PEACE_CORPS_VOL  = ' || I_AOC_PEACE_CORPS_VOL );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_REINSTATEMENT    = ' || I_AOC_REINSTATEMENT );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_SHARED_CERT      = ' || I_AOC_SHARED_CERT );

	V_RETURN_VAL :=
		CASE WHEN I_AOC_MIL_SPOUSES = '1'           THEN 'Certain Military Spouses; ' ELSE '' END
		|| CASE WHEN I_AOC_DIRECT_HIRE = '1'        THEN 'Direct Hire; ' ELSE '' END
		|| CASE WHEN I_AOC_RE_EMPLOYMENT = '1'      THEN 'Reemployed Annuitant; ' ELSE '' END
		|| CASE WHEN I_AOC_PATHWAYS = '1'           THEN 'Pathways Program (Intern, PMF, RG); ' ELSE '' END
		|| CASE WHEN I_AOC_PEACE_CORPS_VOL = '1'    THEN 'Peace Corps/Volunteers; ' ELSE '' END
		|| CASE WHEN I_AOC_REINSTATEMENT = '1'      THEN 'Reinstatement; ' ELSE '' END
		|| CASE WHEN I_AOC_SHARED_CERT = '1'        THEN 'Shared Certificate; ' ELSE '' END
	;
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
		AND SUBSTR(V_RETURN_VAL, (LENGTH(V_RETURN_VAL) - 1)) = '; '
	THEN
		V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 1, (LENGTH(V_RETURN_VAL) - 2));
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_ANNOUNCE_REQ -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_ANNOUNCE_REQ -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_ANNOUNCE_TYPE
--------------------------------------------------------

/**
 * Gets Areas of Consideration - Announcement Type section data.
 *
 * @param I_AOC_DELEGATE_EXAM - Delegated Examining (DE) - All U.S. citizens
 * @param I_AOC_DH_US_CITIZENS - Direct Hire - All U.S. citizens
 * @param I_AOC_MP_GOV_WIDE - MP Government-wide
 * @param I_AOC_MP_HHS_ONLY - MP HHS-wide ONLY
 * @param I_AOC_MP_CMS_ONLY - MP CMS-wide ONLY
 * @param I_AOC_MP_COMP_CONS_ONLY - MP Component/Consortium-wide ONLY
 * @param I_AOC_MP_I_CTAP_VEGA - ICTAP and VEOA Only
 *
 * @return NVARCHAR2 - Concatenated Announcement Type section values delimitted by semicolon.
 */
CREATE OR REPLACE FUNCTION FN_GET_ANNOUNCE_TYPE
(
	I_AOC_DELEGATE_EXAM            IN  VARCHAR2
	, I_AOC_DH_US_CITIZENS         IN  VARCHAR2
	, I_AOC_MP_GOV_WIDE            IN  VARCHAR2
	, I_AOC_MP_HHS_ONLY            IN  VARCHAR2
	, I_AOC_MP_CMS_ONLY            IN  VARCHAR2
	, I_AOC_MP_COMP_CONS_ONLY      IN  VARCHAR2
	, I_AOC_MP_I_CTAP_VEGA         IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(500);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_ANNOUNCE_TYPE -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_DELEGATE_EXAM      = ' || I_AOC_DELEGATE_EXAM );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_DH_US_CITIZENS     = ' || I_AOC_DH_US_CITIZENS );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MP_GOV_WIDE        = ' || I_AOC_MP_GOV_WIDE );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MP_HHS_ONLY        = ' || I_AOC_MP_HHS_ONLY );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MP_CMS_ONLY        = ' || I_AOC_MP_CMS_ONLY );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MP_COMP_CONS_ONLY  = ' || I_AOC_MP_COMP_CONS_ONLY );
	--DBMS_OUTPUT.PUT_LINE('    I_AOC_MP_I_CTAP_VEGA     = ' || I_AOC_MP_I_CTAP_VEGA );

	V_RETURN_VAL :=
		CASE WHEN I_AOC_DELEGATE_EXAM = '1'        THEN 'Delegated Examining (DE) - All U.S. citizens; ' ELSE '' END
		|| CASE WHEN I_AOC_DH_US_CITIZENS = '1'    THEN 'Direct Hire - All U.S. citizens; ' ELSE '' END
		|| CASE WHEN I_AOC_MP_GOV_WIDE = '1'       THEN 'MP Government-wide; ' ELSE '' END
		|| CASE WHEN I_AOC_MP_HHS_ONLY = '1'       THEN 'MP HHS-wide ONLY; ' ELSE '' END
		|| CASE WHEN I_AOC_MP_CMS_ONLY = '1'       THEN 'MP CMS-wide ONLY; ' ELSE '' END
		|| CASE WHEN I_AOC_MP_COMP_CONS_ONLY = '1' THEN 'MP Component/Consortium-wide ONLY; ' ELSE '' END
		|| CASE WHEN I_AOC_MP_I_CTAP_VEGA = '1'    THEN 'ICTAP and VEOA Only; ' ELSE '' END
	;
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
		AND SUBSTR(V_RETURN_VAL, (LENGTH(V_RETURN_VAL) - 1)) = '; '
	THEN
		V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 1, (LENGTH(V_RETURN_VAL) - 2));
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_ANNOUNCE_TYPE -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_ANNOUNCE_TYPE -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_ASSESS_TYPE
--------------------------------------------------------

/**
 * Gets Job Analysis - Assessement Type section data.
 *
 * @param I_JA_TYPE_YES_NO - Yes/No (True/False)
 * @param I_JA_TYPE_REQ_DEFAULT - Default scale
 * @param I_JA_TYPE_KNOWL_SCALE - Knowledge scale
 *
 * @return NVARCHAR2 - Concatenated Assessement Type section values delimitted by semicolon.
 */
CREATE OR REPLACE FUNCTION FN_GET_ASSESS_TYPE
(
	I_JA_TYPE_YES_NO           IN  VARCHAR2
	, I_JA_TYPE_REQ_DEFAULT    IN  VARCHAR2
	, I_JA_TYPE_KNOWL_SCALE    IN  VARCHAR2
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL                NVARCHAR2(100);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_ASSESS_TYPE -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_JA_TYPE_YES_NO         = ' || I_JA_TYPE_YES_NO );
	--DBMS_OUTPUT.PUT_LINE('    I_JA_TYPE_REQ_DEFAULT    = ' || I_JA_TYPE_REQ_DEFAULT );
	--DBMS_OUTPUT.PUT_LINE('    I_JA_TYPE_KNOWL_SCALE    = ' || I_JA_TYPE_KNOWL_SCALE );

	V_RETURN_VAL :=
		CASE WHEN I_JA_TYPE_YES_NO = '1'          THEN 'Yes/No (True/False); ' ELSE '' END
		|| CASE WHEN I_JA_TYPE_REQ_DEFAULT = '1'  THEN 'Default scale; ' ELSE '' END
		|| CASE WHEN I_JA_TYPE_KNOWL_SCALE = '1'  THEN 'Knowledge scale; ' ELSE '' END
	;
	IF V_RETURN_VAL IS NOT NULL AND LENGTH(V_RETURN_VAL) > 0
		AND SUBSTR(V_RETURN_VAL, (LENGTH(V_RETURN_VAL) - 1)) = '; '
	THEN
		V_RETURN_VAL := SUBSTR(V_RETURN_VAL, 1, (LENGTH(V_RETURN_VAL) - 2));
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_ASSESS_TYPE -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_ASSESS_TYPE -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/




--------------------------------------------------------
--  DDL for Function FN_GET_SUBORG_CD
--------------------------------------------------------

/**
 * Gets Admin Code to map to Sub-Organization.
 *
 * Sub Organization 1 - Use the first charactor of Admin Code.
 * Sub Organization 2 - Use the leading 3 charactors of Admin Code.
 *                      If the leading 3 characters is 'FCM' and the full Admin Code is not 'FCM2',
 *                      use the leading 4 characters.
 * Sub Organization 3 - Use one more charactor of Admin Code than Sub Organization 2 if its length does not exceed the full Admin Code length.
 * Sub Organization 4 - Use one more charactor of Admin Code than Sub Organization 3 if its length does not exceed the full Admin Code length.
 * Sub Organization 5 - Use one more charactor of Admin Code than Sub Organization 4 if its length does not exceed the full Admin Code length.
 *
 * @param I_ADMIN_CD - The full Admin Code value to evaluate.
 * @param I_SUB_ORG_LVL - Sub-Organization Level
 *
 * @return VARCHAR2 - The Admin Code to map to Sub-Organization.
 *                  If there is no matching Sub-Organization for the given level, return NULL.
 */
CREATE OR REPLACE FUNCTION FN_GET_SUBORG_CD
(
	I_ADMIN_CD              IN  VARCHAR2
	, I_SUB_ORG_LVL         IN  NUMBER
)
RETURN VARCHAR2
IS
	V_RETURN_VAL                VARCHAR2(10);
	V_FULL_LENGTH               NUMBER(1);
	V_OFFSET                    NUMBER(1);
	V_IS_SHIFTED                CHAR(1);
BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_SUBORG_CD -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_ADMIN_CD         = ' || I_ADMIN_CD );
	--DBMS_OUTPUT.PUT_LINE('    I_SUB_ORG_LVL      = ' || I_SUB_ORG_LVL );
	V_FULL_LENGTH := LENGTH(I_ADMIN_CD);
	V_OFFSET := 3;
	V_IS_SHIFTED := CASE WHEN SUBSTR(I_ADMIN_CD, 1, 3) = 'FCM' AND I_ADMIN_CD != 'FCM2' THEN 'Y' ELSE 'N' END;
	IF I_SUB_ORG_LVL = 1 THEN
		IF V_FULL_LENGTH >= 1 THEN
			V_OFFSET := 1;
		ELSE
			V_OFFSET := 0;
		END IF;
	ELSE
		IF V_IS_SHIFTED = 'N' THEN
			--IF I_SUB_ORG_LVL = 2 AND V_FULL_LENGTH >= 3 THEN
			IF I_SUB_ORG_LVL = 2 THEN
				V_OFFSET := 3;
			ELSIF I_SUB_ORG_LVL = 3 AND V_FULL_LENGTH >= 4 THEN
				V_OFFSET := 4;
			ELSIF I_SUB_ORG_LVL = 4 AND V_FULL_LENGTH >= 5 THEN
				V_OFFSET := 5;
			ELSIF I_SUB_ORG_LVL = 5 AND V_FULL_LENGTH >= 6 THEN
				V_OFFSET := 6;
			ELSE
				V_OFFSET := 0;
			END IF;
		ELSE
			--IF I_SUB_ORG_LVL = 2 AND V_FULL_LENGTH >= 4 THEN
			IF I_SUB_ORG_LVL = 2 THEN
				V_OFFSET := 4;
			ELSIF I_SUB_ORG_LVL = 3 AND V_FULL_LENGTH >= 5 THEN
				V_OFFSET := 5;
			ELSIF I_SUB_ORG_LVL = 4 AND V_FULL_LENGTH >= 6 THEN
				V_OFFSET := 6;
			ELSIF I_SUB_ORG_LVL = 5 AND V_FULL_LENGTH >= 7 THEN
				V_OFFSET := 7;
			ELSE
				V_OFFSET := 0;
			END IF;
		END IF;
	END IF;

	V_RETURN_VAL := SUBSTR(I_ADMIN_CD, 1, V_OFFSET);

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_SUBORG_CD -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_SUBORG_CD -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/

--------------------------------------------------------
--  DDL for Function FN_GET_NAMES
--------------------------------------------------------

/**
 * Get names from three member IDs
 *
 *
 * @param I_IDS - Three member IDs with comma delimiter 
 *
 * @return NVARCHAR2 - Names for the input IDs with semi-colon delimiter
 */
create or replace FUNCTION FN_GET_NAMES
(
	I_IDS              IN  NVARCHAR2	
)
RETURN NVARCHAR2
IS
	V_RETURN_VAL	NVARCHAR2(600);
	V_VALUE1	NVARCHAR2(10);
	V_VALUE2	NVARCHAR2(10);
	V_VALUE3	NVARCHAR2(10);
	V_NAME1		NVARCHAR2(200);
	V_NAME2		NVARCHAR2(200);
	V_NAME3		NVARCHAR2(200);

BEGIN
	--DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_NAMES -------');
	--DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
	--DBMS_OUTPUT.PUT_LINE('    I_IDS         = ' || I_IDS );
	IF I_IDS IS NOT NULL THEN
		SELECT REGEXP_SUBSTR (I_IDS, '[^,]+', 1, 1) INTO V_VALUE1 FROM DUAL;
		SELECT REGEXP_SUBSTR (I_IDS, '[^,]+', 1, 2) INTO V_VALUE2 FROM DUAL;
		SELECT REGEXP_SUBSTR (I_IDS, '[^,]+', 1, 3) INTO V_VALUE3 FROM DUAL;
	END IF;

	IF V_VALUE1 IS NOT NULL THEN
		SELECT M.NAME INTO V_NAME1 FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = V_VALUE1 AND ROWNUM = 1;
		V_RETURN_VAL := V_NAME1;
	END IF;

	IF V_VALUE2 IS NOT NULL THEN
		SELECT M.NAME INTO V_NAME2 FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = V_VALUE2 AND ROWNUM = 1;
		V_RETURN_VAL := V_RETURN_VAL || ';' || V_NAME2;
	END IF;

	IF V_VALUE3 IS NOT NULL THEN
		SELECT M.NAME INTO V_NAME3 FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = V_VALUE3 AND ROWNUM = 1;
		V_RETURN_VAL := V_RETURN_VAL || ';' || V_NAME3;
	END IF;

	--DBMS_OUTPUT.PUT_LINE('    V_RETURN_VAL = ' || V_RETURN_VAL);
	--DBMS_OUTPUT.PUT_LINE('------- END: FN_GET_NAMES -------');
	RETURN V_RETURN_VAL;

EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_SUBORG_CD -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/



SET DEFINE OFF;

--------------------------------------------------------
--  DDL for VW_STRATCON
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_STRATCON
AS
SELECT
	R.REQ_ID
	, R.REQ_JOB_REQ_NUMBER
	, R.REQ_JOB_REQ_CREATE_DT
	, R.REQ_STATUS_ID
	, R.REQ_CANCEL_DT
	, R.REQ_CANCEL_REASON

	, SG.SG_PROCID
	, SG.SG_AC_ID
	--, LU_AC.AC_ADMIN_CD AS SG_AC_CD
	--, LU_AC.AC_ADMIN_CD_DESCR AS SG_AC_DSCR
	, SG.SG_ADMIN_CD AS SG_ADMIN_CD
	--, LU_AC.AC_ADMIN_CD_DESCR AS SG_ADMIN_CD_DSCR
	--, LU_SO_1.AC_ADMIN_CD AS SUB_ORG_1_CD
	--, LU_SO_1.AC_ADMIN_CD_DESCR AS SUB_ORG_1_DSCR
	--, LU_SO_2.AC_ADMIN_CD AS SUB_ORG_2_CD
	--, LU_SO_2.AC_ADMIN_CD_DESCR AS SUB_ORG_2_DSCR
	--, LU_SO_3.AC_ADMIN_CD AS SUB_ORG_3_CD
	--, LU_SO_3.AC_ADMIN_CD_DESCR AS SUB_ORG_3_DSCR
	--, LU_SO_4.AC_ADMIN_CD AS SUB_ORG_4_CD
	--, LU_SO_4.AC_ADMIN_CD_DESCR AS SUB_ORG_4_DSCR
	--, LU_SO_5.AC_ADMIN_CD AS SUB_ORG_5_CD
	--, LU_SO_5.AC_ADMIN_CD_DESCR AS SUB_ORG_5_DSCR
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = SG.SG_ADMIN_CD AND ROWNUM = 1) AS SG_ADMIN_CD_DSCR
	, FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 1) AS SUB_ORG_1_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 1) AND ROWNUM = 1) AS SUB_ORG_1_DSCR
	, FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 2) AS SUB_ORG_2_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 2) AND ROWNUM = 1) AS SUB_ORG_2_DSCR
	, FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 3) AS SUB_ORG_3_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 3) AND ROWNUM = 1) AS SUB_ORG_3_DSCR
	, FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 4) AS SUB_ORG_4_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 4) AND ROWNUM = 1) AS SUB_ORG_4_DSCR
	, FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 5) AS SUB_ORG_5_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 5) AND ROWNUM = 1) AS SUB_ORG_5_DSCR
	, SG.SG_RT_ID
	--, LU_RT.TBL_LABEL AS SG_RT_DSCR
	, (SELECT LU_RT.TBL_LABEL FROM TBL_LOOKUP LU_RT WHERE LU_RT.TBL_ID = SG.SG_RT_ID AND ROWNUM = 1) AS SG_RT_DSCR
	, SG.SG_CT_ID
	--, LU_CT.TBL_LABEL AS SG_CT_DSCR
	, (SELECT LU_CT.TBL_LABEL FROM TBL_LOOKUP LU_CT WHERE LU_CT.TBL_ID = SG.SG_CT_ID AND ROWNUM = 1) AS SG_CT_DSCR
	, SG.SG_AT_ID
	--, LU_AT.TBL_LABEL AS SG_AT_DSCR
	, (SELECT LU_AT.TBL_LABEL FROM TBL_LOOKUP LU_AT WHERE LU_AT.TBL_ID = SG.SG_AT_ID AND ROWNUM = 1) AS SG_AT_DSCR
	, SG.SG_VT_ID
	--, LU_VT.TBL_LABEL AS SG_VT_DSCR
	, (SELECT LU_VT.TBL_LABEL FROM TBL_LOOKUP LU_VT WHERE LU_VT.TBL_ID = SG.SG_VT_ID AND ROWNUM = 1) AS SG_VT_DSCR
	, SG.SG_SAT_ID
	--, LU_SAT.TBL_LABEL AS SG_SAT_DSCR
	, (SELECT LU_SAT.TBL_LABEL FROM TBL_LOOKUP LU_SAT WHERE LU_SAT.TBL_ID = SG.SG_SAT_ID AND ROWNUM = 1) AS SG_SAT_DSCR
	, SG.SG_SO_ID
	--, LU_MEMSO.NAME AS SG_SO_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = SG.SG_SO_ID AND ROWNUM = 1)  AS SG_SO_NAME
	, SG.SG_SO_TITLE
	, SG.SG_SO_ORG
	, SG.SG_XO_ID
	--, LU_MEMXO.NAME AS SG_XO_NAME
	, FN_GET_NAMES(SG.SG_XO_ID)	AS SG_XO_NAME
	, SG.SG_XO_TITLE
	, SG.SG_XO_ORG
	, SG.SG_HRL_ID
	--, LU_MEMHL.NAME AS SG_HL_NAME
	, FN_GET_NAMES(SG.SG_HRL_ID) AS SG_HL_NAME
	, SG.SG_HRL_TITLE
	, SG.SG_HRL_ORG
	, SG.SG_SS_ID
	--, LU_MEMSS.NAME AS SG_SS_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = SG.SG_SS_ID AND ROWNUM = 1)  AS SG_SS_NAME
	, SG.SG_CS_ID
	--, LU_MEMCS.NAME AS SG_CS_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = SG.SG_CS_ID AND ROWNUM = 1)  AS SG_CS_NAME
	, CASE WHEN SG.SG_SO_AGREE = '1' THEN 'Yes' ELSE 'No' END AS SG_SO_AGREE
	, SG.SG_OTHER_CERT
	, FN_GET_MEMBER_DSCR(SG.SG_OTHER_CERT) AS SG_OTHER_CERT_DSCR

	, POS.POS_CNDT_LAST_NM
	, POS.POS_CNDT_FIRST_NM
	, POS.POS_CNDT_MIDDLE_NM
	, CASE WHEN POS.POS_BGT_APR_OFM = '1' THEN 'Yes' WHEN POS.POS_BGT_APR_OFM = '0' THEN 'No' ELSE 'N/A' END AS POS_BGT_APR_OFM
	, POS.POS_SPNSR_ORG_NM
	, POS.POS_SPNSR_ORG_FUND_PC
	, POS.POS_TITLE
	, POS.POS_PAY_PLAN_ID
	--, LU_PYPL.TBL_NAME AS POS_PAY_PLAN_DSCR
	, (SELECT LU_PYPL.TBL_NAME FROM TBL_LOOKUP LU_PYPL WHERE LU_PYPL.TBL_ID = POS.POS_PAY_PLAN_ID AND ROWNUM = 1) AS POS_PAY_PLAN_DSCR
	, POS.POS_SERIES
    , POS.POS_STD_PD_TYPE
	, POS.POS_DESC_NUMBER_1
	, POS.POS_CLASSIFICATION_DT_1
	, POS.POS_GRADE_1
	, POS.POS_DESC_NUMBER_2
	, POS.POS_CLASSIFICATION_DT_2
	, POS.POS_GRADE_2
	, POS.POS_DESC_NUMBER_3
	, POS.POS_CLASSIFICATION_DT_3
	, POS.POS_GRADE_3
	, POS.POS_DESC_NUMBER_4
	, POS.POS_CLASSIFICATION_DT_4
	, POS.POS_GRADE_4
	, POS.POS_DESC_NUMBER_5
	, POS.POS_CLASSIFICATION_DT_5
	, POS.POS_GRADE_5
	, POS.POS_MED_OFFICERS_ID
	--, LU_MO.TBL_LABEL AS POS_MED_OFFICERS_DSCR
	, (SELECT LU_MO.TBL_LABEL FROM TBL_LOOKUP LU_MO WHERE LU_MO.TBL_ID = POS.POS_MED_OFFICERS_ID AND ROWNUM = 1) AS POS_MED_OFFICERS_DSCR
	, POS.POS_PERFORMANCE_LEVEL
	, POS.POS_SUPERVISORY
	--, LU_SUP.TBL_LABEL AS POS_SUPERVISORY_DSCR
	, (SELECT LU_SUP.TBL_LABEL FROM TBL_LOOKUP LU_SUP WHERE LU_SUP.TBL_ID = TO_NUMBER(POS.POS_SUPERVISORY) AND ROWNUM = 1) AS POS_SUPERVISORY_DSCR
	, POS.POS_SKILL
	, POS.POS_LOCATION
	--, LU_LOC.LOC_CITY || ', ' || LU_LOC.LOC_STATE AS POS_LOCATION_DSCR
	, FN_GET_LOCATION_DSCR(POS.POS_LOCATION) AS POS_LOCATION_DSCR
	, POS.POS_VACANCIES
	, POS.POS_REPORT_SUPERVISOR
	--, LU_MEMRS.NAME AS POS_REPORT_SUPERVISOR_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = POS.POS_REPORT_SUPERVISOR AND ROWNUM = 1)  AS POS_REPORT_SUPERVISOR_NAME
	, POS.POS_CAN
	, CASE WHEN POS.POS_VICE = '1' THEN 'Yes' ELSE 'No' END AS POS_VICE
	, POS.POS_VICE_NAME
	, POS.POS_DAYS_ADVERTISED
	, POS.POS_AT_ID
	--, LU_ADT.TBL_LABEL AS POS_AT_DSCR
	, (SELECT LU_ADT.TBL_LABEL FROM TBL_LOOKUP LU_ADT WHERE LU_ADT.TBL_ID = POS.POS_AT_ID AND ROWNUM = 1) AS POS_AT_DSCR
	, POS.POS_NTE
	, POS.POS_WORK_SCHED_ID
	--, LU_WSCHD.TBL_LABEL AS POS_WORK_SCHED_DSCR
	, (SELECT LU_WSCHD.TBL_LABEL FROM TBL_LOOKUP LU_WSCHD WHERE LU_WSCHD.TBL_ID = POS.POS_WORK_SCHED_ID AND ROWNUM = 1) AS POS_WORK_SCHED_DSCR
	, POS.POS_HOURS_PER_WEEK
	, CASE WHEN POS.POS_DUAL_EMPLMT = '1' THEN 'Yes' WHEN POS.POS_DUAL_EMPLMT = '0' THEN 'No' ELSE NULL END AS POS_DUAL_EMPLMT
	, POS.POS_SEC_ID
	--, LU_SEC.TBL_LABEL AS POS_SEC_DSCR
	, (SELECT LU_SEC.TBL_LABEL FROM TBL_LOOKUP LU_SEC WHERE LU_SEC.TBL_ID = POS.POS_SEC_ID AND ROWNUM = 1) AS POS_SEC_DSCR
	, CASE WHEN POS.POS_CE_FINANCIAL_DISC = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_FINANCIAL_DISC
	, POS.POS_CE_FINANCIAL_TYPE_ID
	--, LU_FNTP.TBL_LABEL AS POS_CE_FINANCIAL_TYPE_DSCR
	, (SELECT LU_FNTP.TBL_LABEL FROM TBL_LOOKUP LU_FNTP WHERE LU_FNTP.TBL_ID = POS.POS_CE_FINANCIAL_TYPE_ID AND ROWNUM = 1) AS POS_CE_FINANCIAL_TYPE_DSCR
	, CASE WHEN POS.POS_CE_PE_PHYSICAL = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_PE_PHYSICAL
	, CASE WHEN POS.POS_CE_DRUG_TEST = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_DRUG_TEST
	, CASE WHEN POS.POS_CE_IMMUN = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_IMMUN
	, CASE WHEN POS.POS_CE_TRAVEL = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_TRAVEL
	, POS.POS_CE_TRAVEL_PER
	, CASE WHEN POS.POS_CE_LIC = '1' THEN 'Yes' ELSE 'No' END AS POS_CE_LIC
	, POS.POS_CE_LIC_INFO
	, POS.POS_REMARKS
	, POS.POS_PROC_REQ_TYPE
	, POS.POS_RECRUIT_OFFICE_ID
	--, POS.POS_REQ_CREATE_NOTIFY_DT
	, POS.POS_SO_ID
	, POS.POS_ASSOC_DESCR_NUMBERS
	, POS.POS_PROMOTE_POTENTIAL
	, POS.POS_VICE_EMPL_ID
	, POS.POS_SR_ID
	, POS.POS_GR_ID
	, POS.POS_AC_ID
	, CASE WHEN POS.POS_GA_1  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_1
	, CASE WHEN POS.POS_GA_2  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_2
	, CASE WHEN POS.POS_GA_3  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_3
	, CASE WHEN POS.POS_GA_4  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_4
	, CASE WHEN POS.POS_GA_5  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_5
	, CASE WHEN POS.POS_GA_6  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_6
	, CASE WHEN POS.POS_GA_7  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_7
	, CASE WHEN POS.POS_GA_8  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_8
	, CASE WHEN POS.POS_GA_9  = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_9
	, CASE WHEN POS.POS_GA_10 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_10
	, CASE WHEN POS.POS_GA_11 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_11
	, CASE WHEN POS.POS_GA_12 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_12
	, CASE WHEN POS.POS_GA_13 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_13
	, CASE WHEN POS.POS_GA_14 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_14
	, CASE WHEN POS.POS_GA_15 = '1' THEN 'Yes' ELSE 'No' END AS POS_GA_15

	, FN_GET_GRADE_ADVRT(POS.POS_GA_1, POS.POS_GA_2, POS.POS_GA_3, POS.POS_GA_4, POS.POS_GA_5
		 , POS.POS_GA_6, POS.POS_GA_7, POS.POS_GA_8, POS.POS_GA_9, POS.POS_GA_10
		 , POS.POS_GA_11, POS.POS_GA_12, POS.POS_GA_13, POS.POS_GA_14, POS.POS_GA_15)
	AS POS_GA

	, CASE WHEN AOC.AOC_30PCT_DISABLED_VETS = '1' THEN 'Yes' ELSE 'No' END AS AOC_30PCT_DISABLED_VETS
	, CASE WHEN AOC.AOC_EXPERT_CONS = '1'         THEN 'Yes' ELSE 'No' END AS AOC_EXPERT_CONS
	, CASE WHEN AOC.AOC_IPA = '1'                 THEN 'Yes' ELSE 'No' END AS AOC_IPA
	, CASE WHEN AOC.AOC_OPER_WARFIGHTER = '1'     THEN 'Yes' ELSE 'No' END AS AOC_OPER_WARFIGHTER
	, CASE WHEN AOC.AOC_DISABILITIES = '1'        THEN 'Yes' ELSE 'No' END AS AOC_DISABILITIES
	, CASE WHEN AOC.AOC_STUDENT_VOL = '1'         THEN 'Yes' ELSE 'No' END AS AOC_STUDENT_VOL
	, CASE WHEN AOC.AOC_VETS_RECRUIT_APPT = '1'   THEN 'Yes' ELSE 'No' END AS AOC_VETS_RECRUIT_APPT
	, CASE WHEN AOC.AOC_VOC_REHAB_EMPL = '1'      THEN 'Yes' ELSE 'No' END AS AOC_VOC_REHAB_EMPL
	, CASE WHEN AOC.AOC_WORKFORCE_RECRUIT = '1'   THEN 'Yes' ELSE 'No' END AS AOC_WORKFORCE_RECRUIT
	, AOC.AOC_NON_COMP_APPL
	, CASE WHEN AOC.AOC_MIL_SPOUSES = '1'         THEN 'Yes' ELSE 'No' END AS AOC_MIL_SPOUSES
	, CASE WHEN AOC.AOC_DIRECT_HIRE = '1'         THEN 'Yes' ELSE 'No' END AS AOC_DIRECT_HIRE
	, CASE WHEN AOC.AOC_RE_EMPLOYMENT = '1'       THEN 'Yes' ELSE 'No' END AS AOC_RE_EMPLOYMENT
	, CASE WHEN AOC.AOC_PATHWAYS = '1'            THEN 'Yes' ELSE 'No' END AS AOC_PATHWAYS
	, CASE WHEN AOC.AOC_PEACE_CORPS_VOL = '1'     THEN 'Yes' ELSE 'No' END AS AOC_PEACE_CORPS_VOL
	, CASE WHEN AOC.AOC_REINSTATEMENT = '1'       THEN 'Yes' ELSE 'No' END AS AOC_REINSTATEMENT
	, CASE WHEN AOC.AOC_SHARED_CERT = '1'         THEN 'Yes' ELSE 'No' END AS AOC_SHARED_CERT
	, CASE WHEN AOC.AOC_DELEGATE_EXAM = '1'       THEN 'Yes' ELSE 'No' END AS AOC_DELEGATE_EXAM
	, CASE WHEN AOC.AOC_DH_US_CITIZENS = '1'      THEN 'Yes' ELSE 'No' END AS AOC_DH_US_CITIZENS
	, CASE WHEN AOC.AOC_MP_GOV_WIDE = '1'         THEN 'Yes' ELSE 'No' END AS AOC_MP_GOV_WIDE
	, CASE WHEN AOC.AOC_MP_HHS_ONLY = '1'         THEN 'Yes' ELSE 'No' END AS AOC_MP_HHS_ONLY
	, CASE WHEN AOC.AOC_MP_CMS_ONLY = '1'         THEN 'Yes' ELSE 'No' END AS AOC_MP_CMS_ONLY
	, CASE WHEN AOC.AOC_MP_COMP_CONS_ONLY = '1'   THEN 'Yes' ELSE 'No' END AS AOC_MP_COMP_CONS_ONLY
	, CASE WHEN AOC.AOC_MP_I_CTAP_VEGA = '1'      THEN 'Yes' ELSE 'No' END AS AOC_MP_I_CTAP_VEGA
	, AOC.AOC_NON_BARGAIN_DOC_RATIONALE

	, FN_GET_ANNOUNCE_NOT_REQ(AOC.AOC_30PCT_DISABLED_VETS
		, AOC.AOC_EXPERT_CONS
		, AOC.AOC_IPA
		, AOC.AOC_OPER_WARFIGHTER
		, AOC.AOC_DISABILITIES
		, AOC.AOC_STUDENT_VOL
		, AOC.AOC_VETS_RECRUIT_APPT
		, AOC.AOC_VOC_REHAB_EMPL
		, AOC.AOC_WORKFORCE_RECRUIT)
	AS AOC_ANNOUNCE_NOT_REQ
	, FN_GET_ANNOUNCE_REQ(AOC.AOC_MIL_SPOUSES
		, AOC.AOC_DIRECT_HIRE
		, AOC.AOC_RE_EMPLOYMENT
		, AOC.AOC_PATHWAYS
		, AOC.AOC_PEACE_CORPS_VOL
		, AOC.AOC_REINSTATEMENT
		, AOC.AOC_SHARED_CERT)
	AS AOC_ANNOUNCE_REQ
	, FN_GET_ANNOUNCE_TYPE(AOC.AOC_DELEGATE_EXAM
		, AOC.AOC_DH_US_CITIZENS
		, AOC.AOC_MP_GOV_WIDE
		, AOC.AOC_MP_HHS_ONLY
		, AOC.AOC_MP_CMS_ONLY
		, AOC.AOC_MP_COMP_CONS_ONLY
		, AOC.AOC_MP_I_CTAP_VEGA)
	AS AOC_ANNOUNCE_TYPE

	, CASE WHEN SME.SME_FOR_JOB_ANALYSIS = '1'  THEN 'Yes' ELSE 'No' END AS SME_FOR_JOB_ANALYSIS
	, SME.SME_NAME_JA
	, SME.SME_EMAIL_JA
	, CASE WHEN SME.SME_FOR_QUALIFICATION = '1' THEN 'Yes' ELSE 'No' END AS SME_FOR_QUALIFICATION
	, SME.SME_NAME_QUAL_1
	, SME.SME_EMAIL_QUAL_1
	, SME.SME_NAME_QUAL_2
	, SME.SME_EMAIL_QUAL_2

	, CASE WHEN JA.JA_SEL_FACTOR_REQ = '1'   THEN 'Yes' ELSE 'No' END AS JA_SEL_FACTOR_REQ
	, JA.JA_SEL_FACTOR_JUST
	, CASE WHEN JA.JA_QUAL_RANK_REQ = '1'    THEN 'Yes' ELSE 'No' END AS JA_QUAL_RANK_REQ
	, JA.JA_QUAL_RANK_JUST
	, CASE WHEN JA.JA_RESPONSES_REQ = '1'    THEN 'Yes' ELSE 'No' END AS JA_RESPONSES_REQ
	, CASE WHEN JA.JA_TYPE_YES_NO = '1'      THEN 'Yes' ELSE 'No' END AS JA_TYPE_YES_NO
	, CASE WHEN JA.JA_TYPE_REQ_DEFAULT = '1' THEN 'Yes' ELSE 'No' END AS JA_TYPE_REQ_DEFAULT
	, CASE WHEN JA.JA_TYPE_KNOWL_SCALE = '1' THEN 'Yes' ELSE 'No' END AS JA_TYPE_KNOWL_SCALE

	, FN_GET_ASSESS_TYPE(JA.JA_TYPE_YES_NO
		, JA.JA_TYPE_REQ_DEFAULT
		, JA.JA_TYPE_KNOWL_SCALE)
	AS JA_ASSESS_TYPE

	, RI.RI_OA_APRV_ITEM
	, CASE
		WHEN RI.RI_OA_APRV_ITEM = 'C' THEN 'Recruitment'
		WHEN RI.RI_OA_APRV_ITEM = 'L' THEN 'Relocation'
		ELSE 'N/A'
	END AS RI_OA_APRV_ITEM_DSCR
	, CASE WHEN RI.RI_MOVING_EXP_AUTH = '1' THEN 'Yes' ELSE 'No' END AS RI_MOVING_EXP_AUTH

	, CASE WHEN TR.TR_PAID_AD = '1' THEN 'Yes' ELSE 'No' END AS TR_PAID_AD
	, TR.TR_PAID_AD_SPEC
	, FN_GET_LOOKUP_DSCR(TR.TR_PAID_AD_SPEC) AS TR_PAID_AD_SPEC_DSCR
	, TR.TR_PAID_AD_SPEC_OTHR
	, CASE WHEN TR.TR_SCHL_PSTG = '1' THEN 'Yes' ELSE 'No' END AS TR_SCHL_PSTG
	, TR.TR_SCHL_PSTG_SPEC
	, FN_GET_LOOKUP_DSCR(TR.TR_SCHL_PSTG_SPEC) AS TR_SCHL_PSTG_SPEC_DSCR
	, TR.TR_SCHL_PSTG_SPEC_OTHR
	, CASE WHEN TR.TR_SOCIAL_MEDIA = '1' THEN 'Yes' ELSE 'No' END AS TR_SOCIAL_MEDIA
	, TR.TR_SOCIAL_MEDIA_SPEC
	, FN_GET_LOOKUP_DSCR(TR.TR_SOCIAL_MEDIA_SPEC) AS TR_SOCIAL_MEDIA_SPEC_DSCR
	, TR.TR_SOCIAL_MEDIA_SPEC_OTHR
	, CASE WHEN TR.TR_OTHER = '1' THEN 'Yes' ELSE 'No' END AS TR_OTHER
	, TR.TR_OTHER_SPEC

	, SCA.SCA_SO_SIG
	, SCA.SCA_SO_SIG_DT
	, SCA.SCA_CLASS_SPEC_SIG
	, SCA.SCA_CLASS_SPEC_SIG_DT
	, SCA.SCA_STAFF_SIG
	, SCA.SCA_STAFF_SIG_DT

FROM
	REQUEST R
	LEFT OUTER JOIN STRATCON_GEN SG ON SG.SG_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN POSITION POS ON POS.POS_REQ_ID = R.REQ_ID
	--LEFT OUTER JOIN STRATCON_SCHED_HIST SSH ON SSH.SSH_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN AREAS_OF_CONS AOC ON AOC.AOC_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN SME_INFO SME ON SME.SME_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN JOB_ANALYSIS JA ON JA.JA_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN RECRUIT_INCENTIVES RI ON RI.RI_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN TARGET_RECRUIT TR ON TR.TR_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN APPROVALS SCA ON SCA.SCA_REQ_ID = R.REQ_ID

	--LEFT OUTER JOIN ADMIN_CODES LU_AC ON LU_AC.AC_ID = SG.SG_AC_ID
	--LEFT OUTER JOIN ADMIN_CODES LU_AC ON LU_AC.AC_ADMIN_CD = SG.SG_ADMIN_CD
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_1 ON LU_SO_1.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 1)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_2 ON LU_SO_2.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 2)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_3 ON LU_SO_3.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 3)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_4 ON LU_SO_4.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 4)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_5 ON LU_SO_5.AC_ADMIN_CD = FN_GET_SUBORG_CD(SG.SG_ADMIN_CD, 5)
    
	--LEFT OUTER JOIN TBL_LOOKUP LU_RT ON LU_RT.TBL_ID = SG.SG_RT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_CT ON LU_CT.TBL_ID = SG.SG_CT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_AT ON LU_AT.TBL_ID = SG.SG_AT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_VT ON LU_VT.TBL_ID = SG.SG_VT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SAT ON LU_SAT.TBL_ID = SG.SG_SAT_ID
    
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMSO ON LU_MEMSO.MEMBERID = SG.SG_SO_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMXO ON LU_MEMXO.MEMBERID = SG.SG_XO_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMHL ON LU_MEMHL.MEMBERID = SG.SG_HRL_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMSS ON LU_MEMSS.MEMBERID = SG.SG_SS_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMCS ON LU_MEMCS.MEMBERID = SG.SG_CS_ID

	--LEFT OUTER JOIN TBL_LOOKUP LU_PYPL ON LU_PYPL.TBL_ID = POS.POS_PAY_PLAN_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_MO ON LU_MO.TBL_ID = POS.POS_MED_OFFICERS_ID
--TODO: Remove TO_NUMBER call once the data type of POS_SUPERVISORY is fixed to NUMBER(20)
	--LEFT OUTER JOIN TBL_LOOKUP LU_SUP ON LU_SUP.TBL_ID = TO_NUMBER(POS.POS_SUPERVISORY)
	--LEFT OUTER JOIN LOCATION LU_LOC ON LU_LOC.LOC_ID = POS.POS_LOCATION
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMRS ON LU_MEMRS.MEMBERID = POS.POS_REPORT_SUPERVISOR
	--LEFT OUTER JOIN TBL_LOOKUP LU_ADT ON LU_ADT.TBL_ID = POS.POS_AT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_WSCHD ON LU_WSCHD.TBL_ID = POS.POS_WORK_SCHED_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SEC ON LU_SEC.TBL_ID = POS.POS_SEC_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_FNTP ON LU_FNTP.TBL_ID = POS.POS_CE_FINANCIAL_TYPE_ID
;
 


/




--------------------------------------------------------
--  DDL for VW_CLASSIFICATION
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_CLASSIFICATION
AS
SELECT
	R.REQ_ID
	, R.REQ_JOB_REQ_NUMBER
	, R.REQ_JOB_REQ_CREATE_DT
	, R.REQ_STATUS_ID
	, R.REQ_CANCEL_DT
	, R.REQ_CANCEL_REASON

	, CS.CS_TITLE
	, CS.CS_PAY_PLAN_ID
	--, LU_PYPL.TBL_NAME AS CS_PAY_PLAN_DSCR
	, (SELECT LU_PYPL.TBL_NAME FROM TBL_LOOKUP LU_PYPL WHERE LU_PYPL.TBL_ID = CS.CS_PAY_PLAN_ID AND ROWNUM = 1) AS CS_PAY_PLAN_DSCR
	, CS.CS_SR_ID
	--, LU_SR.TBL_LABEL AS CS_SR_DSCR
	, (SELECT LU_SR.TBL_LABEL FROM TBL_LOOKUP LU_SR WHERE LU_SR.TBL_ID = CS.CS_SR_ID AND ROWNUM = 1) AS CS_SR_DSCR
	, CS.CS_PD_NUMBER_JOBCD_1
	, CS.CS_CLASSIFICATION_DT_1
	, CS.CS_GR_ID_1
	, CS.CS_FLSA_DETERM_ID_1
	--, LU_FLSA_1.TBL_LABEL AS CS_FLSA_DETERM_DSCR_1
	, (SELECT LU_FLSA.TBL_LABEL FROM TBL_LOOKUP LU_FLSA WHERE LU_FLSA.TBL_ID = CS.CS_FLSA_DETERM_ID_1 AND ROWNUM = 1) AS CS_FLSA_DETERM_DSCR_1
	, CS.CS_PD_NUMBER_JOBCD_2
	, CS.CS_CLASSIFICATION_DT_2
	, CS.CS_GR_ID_2
	, CS.CS_FLSA_DETERM_ID_2
	--, LU_FLSA_2.TBL_LABEL AS CS_FLSA_DETERM_DSCR_2
	, (SELECT LU_FLSA.TBL_LABEL FROM TBL_LOOKUP LU_FLSA WHERE LU_FLSA.TBL_ID = CS.CS_FLSA_DETERM_ID_2 AND ROWNUM = 1) AS CS_FLSA_DETERM_DSCR_2
	, CS.CS_PD_NUMBER_JOBCD_3
	, CS.CS_CLASSIFICATION_DT_3
	, CS.CS_GR_ID_3
	, CS.CS_FLSA_DETERM_ID_3
	--, LU_FLSA_3.TBL_LABEL AS CS_FLSA_DETERM_DSCR_3
	, (SELECT LU_FLSA.TBL_LABEL FROM TBL_LOOKUP LU_FLSA WHERE LU_FLSA.TBL_ID = CS.CS_FLSA_DETERM_ID_3 AND ROWNUM = 1) AS CS_FLSA_DETERM_DSCR_3
	, CS.CS_PD_NUMBER_JOBCD_4
	, CS.CS_CLASSIFICATION_DT_4
	, CS.CS_GR_ID_4
	, CS.CS_FLSA_DETERM_ID_4
	--, LU_FLSA_4.TBL_LABEL AS CS_FLSA_DETERM_DSCR_4
	, (SELECT LU_FLSA.TBL_LABEL FROM TBL_LOOKUP LU_FLSA WHERE LU_FLSA.TBL_ID = CS.CS_FLSA_DETERM_ID_4 AND ROWNUM = 1) AS CS_FLSA_DETERM_DSCR_4
	, CS.CS_PD_NUMBER_JOBCD_5
	, CS.CS_CLASSIFICATION_DT_5
	, CS.CS_GR_ID_5
	, CS.CS_FLSA_DETERM_ID_5
	--, LU_FLSA_5.TBL_LABEL AS CS_FLSA_DETERM_DSCR_5
	, (SELECT LU_FLSA.TBL_LABEL FROM TBL_LOOKUP LU_FLSA WHERE LU_FLSA.TBL_ID = CS.CS_FLSA_DETERM_ID_5 AND ROWNUM = 1) AS CS_FLSA_DETERM_DSCR_5
	, CS.CS_PERFORMANCE_LEVEL
	, CS.CS_SUPERVISORY
	--, LU_SUP.TBL_LABEL AS CS_SUPERVISORY_DSCR
	, (SELECT LU_SUP.TBL_LABEL FROM TBL_LOOKUP LU_SUP WHERE LU_SUP.TBL_ID = CS.CS_SUPERVISORY AND ROWNUM = 1) AS CS_SUPERVISORY_DSCR
	, CS.CS_AC_ID
	--, LU_AC.AC_ADMIN_CD AS CS_AC_CD
	--, LU_AC.AC_ADMIN_CD_DESCR AS CS_AC_DSCR
	, CS.CS_ADMIN_CD AS CS_ADMIN_CD
	--, LU_AC.AC_ADMIN_CD_DESCR AS CS_ADMIN_CD_DSCR
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = CS_ADMIN_CD AND ROWNUM = 1) AS CS_ADMIN_CD_DSCR
	, CS.SO_ID
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = CS.SO_ID AND ROWNUM = 1)  AS SO_NAME
	, CS.SO_TITLE
	, CS.SO_ORG
	, CS.XO_ID
	, FN_GET_NAMES(CS.XO_ID)  AS XO_NAME
	, CS.XO_TITLE
	, CS.XO_ORG
	, CS.HRL_ID
	, FN_GET_NAMES(CS.HRL_ID)  AS HL_NAME
	, CS.HRL_TITLE
	, CS.HRL_ORG
	, CS.SS_ID
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = CS.SS_ID AND ROWNUM = 1)  AS SS_NAME
	, CS.CS_ID
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = CS.CS_ID AND ROWNUM = 1)  AS CS_NAME
	, CS.CS_FIN_STMT_REQ_ID
	--, LU_FNTP.TBL_LABEL AS CS_FIN_STMT_REQ_DSCR
	, (SELECT LU_FNTP.TBL_LABEL FROM TBL_LOOKUP LU_FNTP WHERE LU_FNTP.TBL_ID = CS.CS_FIN_STMT_REQ_ID AND ROWNUM = 1) AS CS_FIN_STMT_REQ_DSCR
	, CS.CS_SEC_ID
	--, LU_SEC.TBL_LABEL AS CS_SEC_DSCR
	, (SELECT LU_SEC.TBL_LABEL FROM TBL_LOOKUP LU_SEC WHERE LU_SEC.TBL_ID = CS.CS_SEC_ID AND ROWNUM = 1) AS CS_SEC_DSCR
	, PD.PD_ID
	, PD.PD_PROCID
	, PD.PD_ORG_POS_TITLE
	, PD.PD_EMPLOYING_OFFICE
	--, LU_EO.TBL_LABEL AS PD_EMPLOYING_OFFICE_DSCR
	, (SELECT LU_EO.TBL_LABEL FROM TBL_LOOKUP LU_EO WHERE LU_EO.TBL_ID = PD.PD_EMPLOYING_OFFICE AND ROWNUM = 1) AS PD_EMPLOYING_OFFICE_DSCR
	, CASE WHEN PD.PD_SUBJECT_IA = '1' THEN 'Yes' ELSE 'No' END AS PD_SUBJECT_IA
	, PD.PD_ORGANIZATION
	, PD.PD_SUB_ORG_1
	--, LU_SO_1.AC_ADMIN_CD_DESCR AS PD_SUB_ORG_DSCR_1
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = PD_SUB_ORG_1 AND ROWNUM = 1) AS PD_SUB_ORG_DSCR_1
	, PD.PD_SUB_ORG_2
	--, LU_SO_2.AC_ADMIN_CD_DESCR AS PD_SUB_ORG_DSCR_2
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = PD_SUB_ORG_2 AND ROWNUM = 1) AS PD_SUB_ORG_DSCR_2
	, PD.PD_SUB_ORG_3
	--, LU_SO_3.AC_ADMIN_CD_DESCR AS PD_SUB_ORG_DSCR_3
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = PD_SUB_ORG_3 AND ROWNUM = 1) AS PD_SUB_ORG_DSCR_3
	, PD.PD_SUB_ORG_4
	--, LU_SO_4.AC_ADMIN_CD_DESCR AS PD_SUB_ORG_DSCR_4
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = PD_SUB_ORG_4 AND ROWNUM = 1) AS PD_SUB_ORG_DSCR_4
	, PD.PD_SUB_ORG_5
	--, LU_SO_5.AC_ADMIN_CD_DESCR AS PD_SUB_ORG_DSCR_5
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = PD_SUB_ORG_5 AND ROWNUM = 1) AS PD_SUB_ORG_DSCR_5
	, PD.PD_SCOPE
    , PD.STD_PD_TYPE
	, CASE WHEN PD.PD_PCA = '1'        THEN 'Yes' ELSE 'No' END AS PD_PCA
	, CASE WHEN PD.PD_PDP = '1'        THEN 'Yes' ELSE 'No' END AS PD_PDP
	, CASE WHEN PD.PD_FTT = '1'        THEN 'Yes' ELSE 'No' END AS PD_FTT
	, CASE WHEN PD.PD_OUTSTATION = '1' THEN 'Yes' ELSE 'No' END AS PD_OUTSTATION
	, CASE WHEN PD.PD_INCUMBENCY = '1' THEN 'Yes' ELSE 'No' END AS PD_INCUMBENCY
	, PD.PD_REMARKS
	, PD.PD_CLS_STANDARDS
	, FN_GET_LOOKUP_DSCR(PD.PD_CLS_STANDARDS) AS PD_CLS_STANDARDS_DSCR
	, PD.PD_ACQ_CODE
	--, LU_ACQ.TBL_NAME AS PD_ACQ_CODE_DSCR
	, (SELECT LU_ACQ.TBL_NAME FROM TBL_LOOKUP LU_ACQ WHERE LU_ACQ.TBL_ID = PD.PD_ACQ_CODE AND ROWNUM = 1) AS PD_ACQ_CODE_DSCR
	, PD.PD_CYB_SEC_CD
	--, LU_CSEC.TBL_LABEL AS PD_CYB_SEC_CD_DSCR
	--, (SELECT LU_CSEC.TBL_LABEL FROM TBL_LOOKUP LU_CSEC WHERE LU_CSEC.TBL_ID = PD.PD_CYB_SEC_CD AND ROWNUM = 1) AS PD_CYB_SEC_CD_DSCR
	, FN_GET_LOOKUP_DSCR(PD.PD_CYB_SEC_CD) AS PD_CYB_SEC_CD_DSCR
	, PD.PD_COMPET_LVL_CD
	, PD.PD_BUS_CD
	--, LU_BUS.TBL_LABEL AS PD_BUS_CD_DSCR
	, (SELECT LU_BUS.TBL_LABEL FROM TBL_LOOKUP LU_BUS WHERE LU_BUS.TBL_ID = PD.PD_BUS_CD AND ROWNUM = 1) AS PD_BUS_CD_DSCR
	, PD.BYPASS_DWC_FL

	, CASE WHEN PD.PD_SUPV_CERT = '1' THEN 'Yes' ELSE 'No' END AS PD_SUPV_CERT
	, PD.PD_SUPV_NAME
	, PD.PD_SUPV_TITLE
	, PD.PD_SUPV_SIG
	, PD.PD_SUPV_SIG_DT
	, CASE WHEN PD.PD_CLS_SPEC_CERT = '1' THEN 'Yes' ELSE 'No' END AS PD_CLS_SPEC_CERT
	, PD.PD_CLS_SPEC_NAME
	, PD.PD_CLS_SPEC_TITLE
	, PD.PD_CLS_SPEC_SIG
	, PD.PD_CLS_SPEC_DT

	, CASE WHEN FLSA.FLSA_EX_EXEC = '1'            THEN 'Yes' ELSE 'No' END AS FLSA_EX_EXEC
	, CASE WHEN FLSA.FLSA_EX_ADMIN = '1'           THEN 'Yes' ELSE 'No' END AS FLSA_EX_ADMIN
	, CASE WHEN FLSA.FLSA_EX_PROF_LEARNED = '1'    THEN 'Yes' ELSE 'No' END AS FLSA_EX_PROF_LEARNED
	, CASE WHEN FLSA.FLSA_EX_PROF_CREATIVE = '1'   THEN 'Yes' ELSE 'No' END AS FLSA_EX_PROF_CREATIVE
	, CASE WHEN FLSA.FLSA_EX_PROF_COMPUTER = '1'   THEN 'Yes' ELSE 'No' END AS FLSA_EX_PROF_COMPUTER
	, CASE WHEN FLSA.FLSA_EX_LAW_ENFORC = '1'      THEN 'Yes' ELSE 'No' END AS FLSA_EX_LAW_ENFORC
	, CASE WHEN FLSA.FLSA_EX_FOREIGN = '1'         THEN 'Yes' ELSE 'No' END AS FLSA_EX_FOREIGN
	, FLSA.FLSA_EX_REMARKS
	, CASE WHEN FLSA.FLSA_NONEX_SALARY = '1'       THEN 'Yes' ELSE 'No' END AS FLSA_NONEX_SALARY
	, CASE WHEN FLSA.FLSA_NONEX_EQUIP_OPER = '1'   THEN 'Yes' ELSE 'No' END AS FLSA_NONEX_EQUIP_OPER
	, CASE WHEN FLSA.FLSA_NONEX_TECHN = '1'        THEN 'Yes' ELSE 'No' END AS FLSA_NONEX_TECHN
	, CASE WHEN FLSA.FLSA_NONEX_FED_WAGE_SYS = '1' THEN 'Yes' ELSE 'No' END AS FLSA_NONEX_FED_WAGE_SYS
	, FLSA.FLSA_NONEX_REMARKS

FROM
	REQUEST R
	LEFT OUTER JOIN CLASSIF_STRATCON CS ON CS.CS_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN PD_COVERSHEET PD ON PD.PD_REQ_ID = R.REQ_ID
	LEFT OUTER JOIN FLSA FLSA ON FLSA.FLSA_PD_ID = PD.PD_ID

	--LEFT OUTER JOIN TBL_LOOKUP LU_PYPL ON LU_PYPL.TBL_ID = CS.CS_PAY_PLAN_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SR ON LU_SR.TBL_ID = CS.CS_SR_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_FLSA_1 ON LU_FLSA_1.TBL_ID = CS.CS_FLSA_DETERM_ID_1
	--LEFT OUTER JOIN TBL_LOOKUP LU_FLSA_2 ON LU_FLSA_2.TBL_ID = CS.CS_FLSA_DETERM_ID_2
	--LEFT OUTER JOIN TBL_LOOKUP LU_FLSA_3 ON LU_FLSA_3.TBL_ID = CS.CS_FLSA_DETERM_ID_3
	--LEFT OUTER JOIN TBL_LOOKUP LU_FLSA_4 ON LU_FLSA_4.TBL_ID = CS.CS_FLSA_DETERM_ID_4
	--LEFT OUTER JOIN TBL_LOOKUP LU_FLSA_5 ON LU_FLSA_5.TBL_ID = CS.CS_FLSA_DETERM_ID_5
	--LEFT OUTER JOIN TBL_LOOKUP LU_SUP ON LU_SUP.TBL_ID = CS.CS_SUPERVISORY
	--LEFT OUTER JOIN ADMIN_CODES LU_AC ON LU_AC.AC_ID = CS.CS_AC_ID
	--LEFT OUTER JOIN ADMIN_CODES LU_AC ON LU_AC.AC_ADMIN_CD = CS.CS_ADMIN_CD
	--LEFT OUTER JOIN TBL_LOOKUP LU_FNTP ON LU_FNTP.TBL_ID = CS.CS_FIN_STMT_REQ_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SEC ON LU_SEC.TBL_ID = CS.CS_SEC_ID

	--LEFT OUTER JOIN TBL_LOOKUP LU_EO ON LU_EO.TBL_ID = PD.PD_EMPLOYING_OFFICE
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_1 ON LU_SO_1.AC_ADMIN_CD = PD.PD_SUB_ORG_1
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_2 ON LU_SO_2.AC_ADMIN_CD = PD.PD_SUB_ORG_2
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_3 ON LU_SO_3.AC_ADMIN_CD = PD.PD_SUB_ORG_3
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_4 ON LU_SO_4.AC_ADMIN_CD = PD.PD_SUB_ORG_4
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_5 ON LU_SO_5.AC_ADMIN_CD = PD.PD_SUB_ORG_5
	--LEFT OUTER JOIN TBL_LOOKUP LU_ACQ ON LU_ACQ.TBL_ID = PD.PD_ACQ_CODE
	--LEFT OUTER JOIN TBL_LOOKUP LU_CSEC ON LU_CSEC.TBL_ID = PD.PD_CYB_SEC_CD
	--LEFT OUTER JOIN TBL_LOOKUP LU_BUS ON LU_BUS.TBL_ID = PD.PD_BUS_CD
;
 

/




--------------------------------------------------------
--  DDL for VW_ELIGQUAL
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ELIGQUAL
AS
SELECT
	R.REQ_ID
	, R.REQ_JOB_REQ_NUMBER
	, R.REQ_JOB_REQ_CREATE_DT
	, R.REQ_STATUS_ID
	, R.REQ_CANCEL_DT
	, R.REQ_CANCEL_REASON

	, EQ.ELIGQUAL_ID
	, EQ.PROCID
	, EQ.ADMIN_CD AS ADMIN_CD
	--, LU_AC.AC_ADMIN_CD_DESCR AS ADMIN_CD_DSCR
	--, LU_SO_1.AC_ADMIN_CD AS SUB_ORG_1_CD
	--, LU_SO_1.AC_ADMIN_CD_DESCR AS SUB_ORG_1_DSCR
	--, LU_SO_2.AC_ADMIN_CD AS SUB_ORG_2_CD
	--, LU_SO_2.AC_ADMIN_CD_DESCR AS SUB_ORG_2_DSCR
	--, LU_SO_3.AC_ADMIN_CD AS SUB_ORG_3_CD
	--, LU_SO_3.AC_ADMIN_CD_DESCR AS SUB_ORG_3_DSCR
	--, LU_SO_4.AC_ADMIN_CD AS SUB_ORG_4_CD
	--, LU_SO_4.AC_ADMIN_CD_DESCR AS SUB_ORG_4_DSCR
	--, LU_SO_5.AC_ADMIN_CD AS SUB_ORG_5_CD
	--, LU_SO_5.AC_ADMIN_CD_DESCR AS SUB_ORG_5_DSCR
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = EQ.ADMIN_CD AND ROWNUM = 1) AS ADMIN_CD_DSCR
	, FN_GET_SUBORG_CD(EQ.ADMIN_CD, 1) AS SUB_ORG_1_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 1) AND ROWNUM = 1) AS SUB_ORG_1_DSCR
	, FN_GET_SUBORG_CD(EQ.ADMIN_CD, 2) AS SUB_ORG_2_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 2) AND ROWNUM = 1) AS SUB_ORG_2_DSCR
	, FN_GET_SUBORG_CD(EQ.ADMIN_CD, 3) AS SUB_ORG_3_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 3) AND ROWNUM = 1) AS SUB_ORG_3_DSCR
	, FN_GET_SUBORG_CD(EQ.ADMIN_CD, 4) AS SUB_ORG_4_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 4) AND ROWNUM = 1) AS SUB_ORG_4_DSCR
	, FN_GET_SUBORG_CD(EQ.ADMIN_CD, 5) AS SUB_ORG_5_CD
	, (SELECT AC.AC_ADMIN_CD_DESCR FROM ADMIN_CODES AC WHERE AC.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 5) AND ROWNUM = 1) AS SUB_ORG_5_DSCR
	, EQ.RT_ID
	--, LU_RT.TBL_LABEL AS RT_DSCR
	, (SELECT LU_RT.TBL_LABEL FROM TBL_LOOKUP LU_RT WHERE LU_RT.TBL_ID = EQ.RT_ID AND ROWNUM = 1) AS RT_DSCR
	, EQ.AT_ID
	--, LU_AT.TBL_LABEL AS AT_DSCR
	, (SELECT LU_AT.TBL_LABEL FROM TBL_LOOKUP LU_AT WHERE LU_AT.TBL_ID = EQ.AT_ID AND ROWNUM = 1) AS AT_DSCR
	, EQ.VT_ID
	--, LU_VT.TBL_LABEL AS VT_DSCR
	, (SELECT LU_VT.TBL_LABEL FROM TBL_LOOKUP LU_VT WHERE LU_VT.TBL_ID = EQ.VT_ID AND ROWNUM = 1) AS VT_DSCR
	, EQ.SAT_ID
	--, LU_SAT.TBL_LABEL AS SAT_DSCR
	, (SELECT LU_SAT.TBL_LABEL FROM TBL_LOOKUP LU_SAT WHERE LU_SAT.TBL_ID = EQ.SAT_ID AND ROWNUM = 1)  AS SAT_DSCR
	, EQ.CT_ID
	--, LU_CT.TBL_LABEL AS CT_DSCR
	, (SELECT LU_CT.TBL_LABEL FROM TBL_LOOKUP LU_CT WHERE LU_CT.TBL_ID = EQ.CT_ID AND ROWNUM = 1)  AS CT_DSCR
	, EQ.SO_ID
	--, LU_MEMSO.NAME AS SO_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EQ.SO_ID AND ROWNUM = 1)  AS SO_NAME
	, EQ.SO_TITLE
	, EQ.SO_ORG
	, EQ.XO_ID
	--, LU_MEMXO.NAME AS XO_NAME
	, FN_GET_NAMES(EQ.XO_ID)  AS XO_NAME
	, EQ.XO_TITLE
	, EQ.XO_ORG
	, EQ.HRL_ID
	--, LU_MEMHL.NAME AS HL_NAME
	, FN_GET_NAMES(EQ.HRL_ID)  AS HL_NAME
	, EQ.HRL_TITLE
	, EQ.HRL_ORG
	, EQ.SS_ID
	--, LU_MEMSS.NAME AS SS_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EQ.SS_ID AND ROWNUM = 1)  AS SS_NAME
	, EQ.CS_ID
	--, LU_MEMCS.NAME AS CS_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EQ.CS_ID AND ROWNUM = 1)  AS CS_NAME
	, CASE WHEN EQ.SO_AGREE = '1' THEN 'Yes' ELSE 'No' END AS SO_AGREE
	, EQ.OTHER_CERT
	, FN_GET_MEMBER_DSCR(EQ.OTHER_CERT) AS OTHER_CERT_DSCR

	, EQ.CNDT_LAST_NM
	, EQ.CNDT_FIRST_NM
	, EQ.CNDT_MIDDLE_NM
	, CASE WHEN EQ.BGT_APR_OFM = '1' THEN 'Yes' WHEN EQ.BGT_APR_OFM = '0' THEN 'No' ELSE 'N/A' END AS BGT_APR_OFM
	, EQ.SPNSR_ORG_NM
	, EQ.SPNSR_ORG_FUND_PC
	, EQ.POS_TITLE
	, EQ.PAY_PLAN_ID
	--, LU_PYPL.TBL_NAME AS PAY_PLAN_DSCR
	, (SELECT LU_PYPL.TBL_NAME FROM TBL_LOOKUP LU_PYPL WHERE LU_PYPL.TBL_ID = EQ.PAY_PLAN_ID AND ROWNUM = 1)  AS PAY_PLAN_DSCR
	, EQ.SERIES
	, EQ.POS_DESC_NUMBER_1
	, EQ.CLASSIFICATION_DT_1
	, EQ.GRADE_1
	, EQ.POS_DESC_NUMBER_2
	, EQ.CLASSIFICATION_DT_2
	, EQ.GRADE_2
	, EQ.POS_DESC_NUMBER_3
	, EQ.CLASSIFICATION_DT_3
	, EQ.GRADE_3
	, EQ.POS_DESC_NUMBER_4
	, EQ.CLASSIFICATION_DT_4
	, EQ.GRADE_4
	, EQ.POS_DESC_NUMBER_5
	, EQ.CLASSIFICATION_DT_5
	, EQ.GRADE_5
	, EQ.MED_OFFICERS_ID
	--, LU_MO.TBL_LABEL AS MED_OFFICERS_DSCR
	, (SELECT  LU_MO.TBL_LABEL FROM TBL_LOOKUP LU_MO WHERE LU_MO.TBL_ID = EQ.MED_OFFICERS_ID AND ROWNUM = 1)  AS MED_OFFICERS_DSCR
	, EQ.PERFORMANCE_LEVEL
	, EQ.SUPERVISORY
	--, LU_SUP.TBL_LABEL AS SUPERVISORY_DSCR
	, (SELECT LU_SUP.TBL_LABEL FROM TBL_LOOKUP LU_SUP WHERE LU_SUP.TBL_ID = EQ.SUPERVISORY AND ROWNUM = 1)  AS SUPERVISORY_DSCR
	, EQ.SKILL
	, EQ.LOCATION
	--, LU_LOC.LOC_CITY || ', ' || LU_LOC.LOC_STATE AS LOCATION_DSCR
	, FN_GET_LOCATION_DSCR(EQ.LOCATION) AS LOCATION_DSCR
	, EQ.VACANCIES
	, EQ.REPORT_SUPERVISOR
	--, LU_MEMRS.NAME AS REPORT_SUPERVISOR_NAME
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EQ.REPORT_SUPERVISOR AND ROWNUM = 1)  AS REPORT_SUPERVISOR_NAME
	, EQ.CAN
	, CASE WHEN EQ.VICE = '1' THEN 'Yes' ELSE 'No' END AS VICE
	, EQ.VICE_NAME
	, EQ.DAYS_ADVERTISED
	, EQ.TA_ID
	--, LU_ADT.TBL_LABEL AS TA_DSCR
	, (SELECT LU_ADT.TBL_LABEL FROM TBL_LOOKUP LU_ADT WHERE LU_ADT.TBL_ID = EQ.TA_ID AND ROWNUM = 1)  AS TA_DSCR
	, EQ.NTE
	, EQ.WORK_SCHED_ID
	--, LU_WSCHD.TBL_LABEL AS WORK_SCHED_DSCR
	, (SELECT LU_WSCHD.TBL_LABEL FROM TBL_LOOKUP LU_WSCHD WHERE LU_WSCHD.TBL_ID = EQ.WORK_SCHED_ID AND ROWNUM = 1)  AS WORK_SCHED_DSCR
	, EQ.HOURS_PER_WEEK
	, CASE WHEN EQ.DUAL_EMPLMT = '1' THEN 'Yes' WHEN EQ.DUAL_EMPLMT = '0' THEN 'No' ELSE NULL END AS DUAL_EMPLMT
	, EQ.SEC_ID
	--, LU_SEC.TBL_LABEL AS SEC_DSCR
	, (SELECT LU_SEC.TBL_LABEL FROM TBL_LOOKUP LU_SEC WHERE LU_SEC.TBL_ID = EQ.SEC_ID AND ROWNUM = 1)  AS SEC_DSCR
	, CASE WHEN EQ.CE_FINANCIAL_DISC = '1' THEN 'Yes' ELSE 'No' END AS CE_FINANCIAL_DISC
	, EQ.CE_FINANCIAL_TYPE_ID
	--, LU_FNTP.TBL_LABEL AS CE_FINANCIAL_TYPE_DSCR
	, (SELECT LU_FNTP.TBL_LABEL FROM TBL_LOOKUP LU_FNTP WHERE LU_FNTP.TBL_ID = EQ.CE_FINANCIAL_TYPE_ID AND ROWNUM = 1)  AS CE_FINANCIAL_TYPE_DSCR
	, CASE WHEN EQ.CE_PE_PHYSICAL = '1' THEN 'Yes' ELSE 'No' END AS CE_PE_PHYSICAL
	, CASE WHEN EQ.CE_DRUG_TEST = '1' THEN 'Yes' ELSE 'No' END AS CE_DRUG_TEST
	, CASE WHEN EQ.CE_IMMUN = '1' THEN 'Yes' ELSE 'No' END AS CE_IMMUN
	, CASE WHEN EQ.CE_TRAVEL = '1' THEN 'Yes' ELSE 'No' END AS CE_TRAVEL
	, EQ.CE_TRAVEL_PER
	, CASE WHEN EQ.CE_LIC = '1' THEN 'Yes' ELSE 'No' END AS CE_LIC
	, EQ.CE_LIC_INFO
	, EQ.REMARKS
	, EQ.PROC_REQ_TYPE
	, EQ.RECRUIT_OFFICE_ID
	, EQ.ASSOC_DESCR_NUMBERS
	, EQ.PROMOTE_POTENTIAL
	, EQ.VICE_EMPL_ID
	, EQ.SR_ID
	, EQ.GR_ID
	, CASE WHEN EQ.GA_1  = '1' THEN 'Yes' ELSE 'No' END AS GA_1
	, CASE WHEN EQ.GA_2  = '1' THEN 'Yes' ELSE 'No' END AS GA_2
	, CASE WHEN EQ.GA_3  = '1' THEN 'Yes' ELSE 'No' END AS GA_3
	, CASE WHEN EQ.GA_4  = '1' THEN 'Yes' ELSE 'No' END AS GA_4
	, CASE WHEN EQ.GA_5  = '1' THEN 'Yes' ELSE 'No' END AS GA_5
	, CASE WHEN EQ.GA_6  = '1' THEN 'Yes' ELSE 'No' END AS GA_6
	, CASE WHEN EQ.GA_7  = '1' THEN 'Yes' ELSE 'No' END AS GA_7
	, CASE WHEN EQ.GA_8  = '1' THEN 'Yes' ELSE 'No' END AS GA_8
	, CASE WHEN EQ.GA_9  = '1' THEN 'Yes' ELSE 'No' END AS GA_9
	, CASE WHEN EQ.GA_10 = '1' THEN 'Yes' ELSE 'No' END AS GA_10
	, CASE WHEN EQ.GA_11 = '1' THEN 'Yes' ELSE 'No' END AS GA_11
	, CASE WHEN EQ.GA_12 = '1' THEN 'Yes' ELSE 'No' END AS GA_12
	, CASE WHEN EQ.GA_13 = '1' THEN 'Yes' ELSE 'No' END AS GA_13
	, CASE WHEN EQ.GA_14 = '1' THEN 'Yes' ELSE 'No' END AS GA_14
	, CASE WHEN EQ.GA_15 = '1' THEN 'Yes' ELSE 'No' END AS GA_15

	, FN_GET_GRADE_ADVRT(EQ.GA_1, EQ.GA_2, EQ.GA_3, EQ.GA_4, EQ.GA_5
		 , EQ.GA_6, EQ.GA_7, EQ.GA_8, EQ.GA_9, EQ.GA_10
		 , EQ.GA_11, EQ.GA_12, EQ.GA_13, EQ.GA_14, EQ.GA_15)
	AS GA

	, EQ.CNDT_ELIGIBLE
	, EQ.INELIG_REASON
	--, LU_IER.TBL_LABEL AS INELIG_REASON_DSCR
	, (SELECT LU_IER.TBL_LABEL FROM TBL_LOOKUP LU_IER WHERE LU_IER.TBL_ID = EQ.INELIG_REASON AND ROWNUM = 1)  AS INELIG_REASON_DSCR
	, EQ.CNDT_QUALIFIED
	, EQ.DISQUAL_REASON
	--, LU_DQR.TBL_LABEL AS DISQUAL_REASON_DSCR
	, (SELECT LU_DQR.TBL_LABEL FROM TBL_LOOKUP LU_DQR WHERE LU_DQR.TBL_ID = EQ.DISQUAL_REASON AND ROWNUM = 1)  AS DISQUAL_REASON_DSCR
	, EQ.SEL_DETERM
	--, LU_SD.TBL_LABEL AS SEL_DETERM_DSCR
	, (SELECT LU_SD.TBL_LABEL FROM TBL_LOOKUP LU_SD WHERE LU_SD.TBL_ID = EQ.SEL_DETERM AND ROWNUM = 1)  AS SEL_DETERM_DSCR
	, EQ.DCO_CERT
	, EQ.DCO_NAME
	, EQ.DCO_SIG
	, EQ.DCO_SIG_DT

FROM
	REQUEST R
	LEFT OUTER JOIN ELIG_QUAL EQ ON EQ.REQ_ID = R.REQ_ID

	--LEFT OUTER JOIN ADMIN_CODES LU_AC ON LU_AC.AC_ADMIN_CD = EQ.ADMIN_CD
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_1 ON LU_SO_1.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 1)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_2 ON LU_SO_2.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 2)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_3 ON LU_SO_3.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 3)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_4 ON LU_SO_4.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 4)
	--LEFT OUTER JOIN ADMIN_CODES LU_SO_5 ON LU_SO_5.AC_ADMIN_CD = FN_GET_SUBORG_CD(EQ.ADMIN_CD, 5)
    
	--LEFT OUTER JOIN TBL_LOOKUP LU_RT ON LU_RT.TBL_ID = EQ.RT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_CT ON LU_CT.TBL_ID = EQ.CT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_AT ON LU_AT.TBL_ID = EQ.AT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_VT ON LU_VT.TBL_ID = EQ.VT_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SAT ON LU_SAT.TBL_ID = EQ.SAT_ID
    
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMSO ON LU_MEMSO.MEMBERID = EQ.SO_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMXO ON LU_MEMXO.MEMBERID = EQ.XO_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMHL ON LU_MEMHL.MEMBERID = EQ.HRL_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMSS ON LU_MEMSS.MEMBERID = EQ.SS_ID
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMCS ON LU_MEMCS.MEMBERID = EQ.CS_ID

	--LEFT OUTER JOIN TBL_LOOKUP LU_PYPL ON LU_PYPL.TBL_ID = EQ.PAY_PLAN_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_MO ON LU_MO.TBL_ID = EQ.MED_OFFICERS_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SUP ON LU_SUP.TBL_ID = EQ.SUPERVISORY
	--LEFT OUTER JOIN LOCATION LU_LOC ON LU_LOC.LOC_ID = EQ.LOCATION
	--LEFT OUTER JOIN BIZFLOW.MEMBER LU_MEMRS ON LU_MEMRS.MEMBERID = EQ.REPORT_SUPERVISOR
	--LEFT OUTER JOIN TBL_LOOKUP LU_ADT ON LU_ADT.TBL_ID = EQ.TA_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_WSCHD ON LU_WSCHD.TBL_ID = EQ.WORK_SCHED_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SEC ON LU_SEC.TBL_ID = EQ.SEC_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_FNTP ON LU_FNTP.TBL_ID = EQ.CE_FINANCIAL_TYPE_ID
	--LEFT OUTER JOIN TBL_LOOKUP LU_SD ON LU_SD.TBL_ID = EQ.SEL_DETERM
	--LEFT OUTER JOIN TBL_LOOKUP LU_IER ON LU_IER.TBL_ID = EQ.INELIG_REASON
	--LEFT OUTER JOIN TBL_LOOKUP LU_DQR ON LU_DQR.TBL_ID = EQ.DISQUAL_REASON
;

/

--------------------------------------------------------
--  DDL for VW_UNIFIED_REQUESTS_RANK
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_UNIFIED_REQUESTS_RANK
AS

    SELECT REQ.*, RANK() OVER (PARTITION BY REQ.REQ_JOB_REQ_NUMBER ORDER BY REQ.CREATIONDTIME DESC) REQ_RANK FROM (
          SELECT UNION_REQ.*, TO_CHAR(UNION_REQ.REQ_JOB_REQ_CREATE_DT, 'MM-DD-YYYY HH24:MI:SS') AS REQ_DATE_STRING
              , P.CREATIONDTIME, TO_CHAR(P.CREATIONDTIME, 'MM-DD-YYYY HH24:MI:SS') AS CREATION_DATE_STRING
              , P.STATE AS PROC_STATE
          FROM (
               SELECT REQ_ID, REQ_JOB_REQ_NUMBER, REQ_JOB_REQ_CREATE_DT, REQ_STATUS_ID, REQ_CANCEL_DT, REQ_CANCEL_REASON, PD_PROCID AS PROC_ID, 'CLASSIFICATION' AS PROC_TYPE  FROM VW_CLASSIFICATION
               UNION
               SELECT REQ_ID, REQ_JOB_REQ_NUMBER, REQ_JOB_REQ_CREATE_DT, REQ_STATUS_ID, REQ_CANCEL_DT, REQ_CANCEL_REASON, PROCID AS PROC_ID, 'ELIGQUAL' AS PROC_TYPE FROM VW_ELIGQUAL
               UNION
               SELECT REQ_ID, REQ_JOB_REQ_NUMBER, REQ_JOB_REQ_CREATE_DT, REQ_STATUS_ID, REQ_CANCEL_DT, REQ_CANCEL_REASON, SG_PROCID AS PROC_ID, 'STRATCON' AS PROC_TYPE FROM VW_STRATCON
               ) UNION_REQ
                 INNER JOIN BIZFLOW.PROCS P ON P.PROCID = UNION_REQ.PROC_ID
          WHERE UNION_REQ.PROC_ID IS NOT NULL
          ) REQ

;
/

--------------------------------------------------------
--  DDL for VW_UNIFIED_REQUESTS
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_UNIFIED_REQUESTS
	AS

		SELECT REQ.*
			,REGEXP_SUBSTR(XO_ID, '[^,]+', 1, 1) AS XO_ID1
			,REGEXP_SUBSTR(XO_ID, '[^,]+', 1, 2) AS XO_ID2
			,REGEXP_SUBSTR(XO_ID, '[^,]+', 1, 3) AS XO_ID3
			,REGEXP_SUBSTR(XO_NAME, '[^;]+', 1, 1) AS XO_NAME1
			,REGEXP_SUBSTR(XO_NAME, '[^;]+', 1, 2) AS XO_NAME2
			,REGEXP_SUBSTR(XO_NAME, '[^;]+', 1, 3) AS XO_NAME3
			,REGEXP_SUBSTR(XO_TITLE, '[^_/~]+', 1, 1) AS XO_TITLE1
			,REGEXP_SUBSTR(XO_TITLE, '[^_/~]+', 1, 2) AS XO_TITLE2
			,REGEXP_SUBSTR(XO_TITLE, '[^_/~]+', 1, 3) AS XO_TITLE3
			,REGEXP_SUBSTR(XO_ORG, '[^_/~]+', 1, 1) AS XO_ORG1
			,REGEXP_SUBSTR(XO_ORG, '[^_/~]+', 1, 2) AS XO_ORG2
			,REGEXP_SUBSTR(XO_ORG, '[^_/~]+', 1, 3) AS XO_ORG3
		FROM (
		     SELECT RR.REQ_ID, RR.REQ_JOB_REQ_NUMBER REQUEST_NUMBER, RR.REQ_JOB_REQ_CREATE_DT REQUEST_DATE
			     , RR.REQ_CANCEL_DT REQ_CANCEL_DATE, RR.REQ_CANCEL_REASON, RR.PROC_ID, RR.PROC_STATE, RR.PROC_TYPE
			     , VST.SG_RT_ID REQUEST_TYPE_ID, VST.SG_RT_DSCR REQUEST_TYPE
			     , VST.SG_ADMIN_CD ADMIN_CODE, VST.SG_ADMIN_CD_DSCR ADMIN_CODE_DESC
			     , VST.SG_SO_ID SO_ID, VST.SG_SO_NAME SO_NAME, VST.SG_SO_TITLE SO_TITLE, VST.SG_SO_ORG SO_ORG
			     , VST.SG_XO_ID XO_ID, VST.SG_XO_NAME XO_NAME, VST.SG_XO_TITLE XO_TITLE, VST.SG_XO_ORG XO_ORG
			     , VST.SG_HRL_ID HRL_ID, VST.SG_HL_NAME HRL_NAME, VST.SG_HRL_TITLE HRL_TITLE, VST.SG_HRL_ORG HRL_ORG
			     , VST.POS_TITLE POS_TITLE, VST.POS_PAY_PLAN_ID PAY_PLAN_ID, VST.POS_PAY_PLAN_DSCR PAY_PLAN_DESC
			     , VST.POS_SR_ID POS_SERIES_ID, (SELECT LU_SR.TBL_LABEL FROM TBL_LOOKUP LU_SR WHERE LU_SR.TBL_ID = VST.POS_SR_ID AND ROWNUM = 1) AS POS_SERIES_DESC
			     , VST.POS_GRADE_1 POS_GRADE1, VST.POS_GRADE_2 POS_GRADE2, VST.POS_GRADE_3 POS_GRADE3, VST.POS_GRADE_4 POS_GRADE4, VST.POS_GRADE_5 POS_GRADE5
			     , VST.POS_DESC_NUMBER_1 POS_DESC_NUM1, VST.POS_DESC_NUMBER_2 POS_DESC_NUM2, VST.POS_DESC_NUMBER_3 POS_DESC_NUM3, VST.POS_DESC_NUMBER_4 POS_DESC_NUM4, VST.POS_DESC_NUMBER_5 POS_DESC_NUM5
			     , VST.POS_CNDT_FIRST_NM CANDI_FIRST_NAME, VST.POS_CNDT_MIDDLE_NM CANDI_MIDDLE_NAME, VST.POS_CNDT_LAST_NM CANDI_LAST_NAME
			     , VST.POS_CE_LIC LICENSE, VST.POS_CE_LIC_INFO LICENSE_INFO
			     , VST.POS_WORK_SCHED_ID, VST.POS_WORK_SCHED_DSCR, VST.POS_HOURS_PER_WEEK, VST.POS_NTE
			     , VST.POS_AT_DSCR TYPE_OF_APPT
		     FROM VW_UNIFIED_REQUESTS_RANK RR
			          INNER JOIN VW_STRATCON VST ON VST.REQ_ID = RR.REQ_ID AND RR.PROC_TYPE='STRATCON' AND RR.REQ_RANK=1

		     UNION ALL

		     SELECT RR.REQ_ID, RR.REQ_JOB_REQ_NUMBER REQUEST_NUMBER, RR.REQ_JOB_REQ_CREATE_DT REQUEST_DATE
			     , RR.REQ_CANCEL_DT REQ_CANCEL_DATE, RR.REQ_CANCEL_REASON, RR.PROC_ID, RR.PROC_STATE, RR.PROC_TYPE
			     , VST.SG_RT_ID REQUEST_TYPE_ID, VST.SG_RT_DSCR REQUEST_TYPE
			     , VCL.CS_ADMIN_CD ADMIN_CODE, VCL.CS_ADMIN_CD_DSCR ADMIN_CODE_DESC
			     , VST.SG_SO_ID SO_ID, VST.SG_SO_NAME SO_NAME, VST.SG_SO_TITLE SO_TITLE, VST.SG_SO_ORG SO_ORG
			     , VST.SG_XO_ID XO_ID, VST.SG_XO_NAME XO_NAME, VST.SG_XO_TITLE XO_TITLE, VST.SG_XO_ORG XO_ORG
			     , VST.SG_HRL_ID HRL_ID, VST.SG_HL_NAME HRL_NAME, VST.SG_HRL_TITLE HRL_TITLE, VST.SG_HRL_ORG HRL_ORG
			     , VCL.CS_TITLE POS_TITLE, VCL.CS_PAY_PLAN_ID PAY_PLAN_ID, VCL.CS_PAY_PLAN_DSCR PAY_PLAN_DESC
			     , VCL.CS_SR_ID POS_SERIES_ID, VCL.CS_SR_DSCR POS_SERIES_DESC
			     , VCL.CS_GR_ID_1 POS_GRADE1, VCL.CS_GR_ID_2 POS_GRADE2, VCL.CS_GR_ID_3 POS_GRADE3, VCL.CS_GR_ID_4 POS_GRADE4, VCL.CS_GR_ID_5 POS_GRADE5
			     , VCL.CS_PD_NUMBER_JOBCD_1 POS_DESC_NUM1, VCL.CS_PD_NUMBER_JOBCD_2 POS_DESC_NUM2, VCL.CS_PD_NUMBER_JOBCD_3 POS_DESC_NUM3, VCL.CS_PD_NUMBER_JOBCD_4 POS_DESC_NUM4, VCL.CS_PD_NUMBER_JOBCD_5 POS_DESC_NUM5
			     , VST.POS_CNDT_FIRST_NM CANDI_FIRST_NAME, VST.POS_CNDT_MIDDLE_NM CANDI_MIDDLE_NAME, VST.POS_CNDT_LAST_NM CANDI_LAST_NAME
			     , VST.POS_CE_LIC LICENSE, VST.POS_CE_LIC_INFO LICENSE_INFO
			     , VST.POS_WORK_SCHED_ID, VST.POS_WORK_SCHED_DSCR, VST.POS_HOURS_PER_WEEK, VST.POS_NTE
			     , VST.POS_AT_DSCR TYPE_OF_APPT
		     FROM VW_UNIFIED_REQUESTS_RANK RR
			          INNER JOIN VW_CLASSIFICATION VCL ON VCL.REQ_ID = RR.REQ_ID AND RR.PROC_TYPE='CLASSIFICATION' AND RR.REQ_RANK=1
			          INNER JOIN VW_STRATCON VST ON VST.REQ_JOB_REQ_NUMBER = RR.REQ_JOB_REQ_NUMBER

		     UNION ALL

		     SELECT RR.REQ_ID, RR.REQ_JOB_REQ_NUMBER REQUEST_NUMBER, RR.REQ_JOB_REQ_CREATE_DT REQUEST_DATE
			     , RR.REQ_CANCEL_DT REQ_CANCEL_DATE, RR.REQ_CANCEL_REASON, RR.PROC_ID, RR.PROC_STATE, RR.PROC_TYPE
			     , VEL.RT_ID REQUEST_TYPE_ID, VEL.RT_DSCR REQUEST_TYPE
			     , VEL.ADMIN_CD ADMIN_CODE, VEL.ADMIN_CD_DSCR ADMIN_CODE_DESC
			     , VEL.SO_ID SO_ID, VEL.SO_NAME SO_NAME, VEL.SO_TITLE SO_TITLE, VEL.SO_ORG SO_ORG
			     , VEL.XO_ID XO_ID, VEL.XO_NAME XO_NAME, VEL.XO_TITLE XO_TITLE, VEL.XO_ORG XO_ORG
			     , VEL.HRL_ID HRL_ID, VEL.HL_NAME HRL_NAME, VEL.HRL_TITLE HRL_TITLE, VEL.HRL_ORG HRL_ORG
			     , VEL.POS_TITLE POS_TITLE, VEL.PAY_PLAN_ID PAY_PLAN_ID, VEL.PAY_PLAN_DSCR PAY_PLAN_DESC
			     , VEL.SR_ID POS_SERIES_ID, (SELECT LU_SR.TBL_LABEL FROM TBL_LOOKUP LU_SR WHERE LU_SR.TBL_ID = VEL.SR_ID AND ROWNUM = 1) AS POS_SERIES_DESC
			     , VEL.GRADE_1 POS_GRADE1, VEL.GRADE_2 POS_GRADE2, VEL.GRADE_3 POS_GRADE3, VEL.GRADE_4 POS_GRADE4, VEL.GRADE_5 POS_GRADE5
			     , VEL.POS_DESC_NUMBER_1 POS_DESC_NUM1, VEL.POS_DESC_NUMBER_2 POS_DESC_NUM2, VEL.POS_DESC_NUMBER_3 POS_DESC_NUM3, VEL.POS_DESC_NUMBER_4 POS_DESC_NUM4, VEL.POS_DESC_NUMBER_5 POS_DESC_NUM5
			     , VEL.CNDT_FIRST_NM CANDI_FIRST_NAME, VEL.CNDT_MIDDLE_NM CANDI_MIDDLE_NAME, VEL.CNDT_LAST_NM CANDI_LAST_NAME
			     , VEL.CE_LIC LICENSE, VEL.CE_LIC_INFO LICENSE_INFO
			     , VEL.WORK_SCHED_ID POS_WORK_SCHED_ID, VEL.WORK_SCHED_DSCR POS_WORK_SCHED_DSCR, VEL.HOURS_PER_WEEK POS_HOURS_PER_WEEK, VEL.NTE POS_NTE
			     , VEL.TA_DSCR TYPE_OF_APPT
		     FROM VW_UNIFIED_REQUESTS_RANK RR
			          INNER JOIN VW_ELIGQUAL VEL ON VEL.REQ_ID = RR.REQ_ID AND RR.PROC_TYPE='ELIGQUAL' AND RR.REQ_RANK=1
		     ) REQ
;
/


--------------------------------------------------------
--  DDL for VW_INCENTIVES_DATA
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_INCENTIVES_DATA
	AS
		SELECT FD.PROCID PROC_ID, X.REQ_NUM, to_timestamp(X.REQ_DATE, 'yyyy/mm/dd hh24:mi:ss') REQ_DATE
			, X.REQ_STATUS, X.INCEN_TYPE , X.PCA_TYPE
			-- associatedNEILRequest
			, X.NEIL_REQ_NUM,  X.NEIL_REQ_TYPE, X.ADMIN_CODE, X.ORG_NAME
			-- candidate
			, X.CANDI_NAME, X.CANDI_FIRST, X.CANDI_MIDDLE, X.CANDI_LAST
			-- selectingOfficial
			, X.SO_NAME, X.SO_EMAIL, X.SO_ID, X.SO_TITLE
			-- executiveOfficers
			, X.XO1_NAME, X.XO1_EMAIL, X.XO1_ID
			, X.XO2_NAME, X.XO2_EMAIL, X.XO2_ID
			, X.XO3_NAME, X.XO3_EMAIL, X.XO3_ID
			-- hrLiaisons
			, X.HRL1_NAME, X.HRL1_EMAIL, X.HRL1_ID
			, X.HRL2_NAME, X.HRL2_EMAIL, X.HRL2_ID
			, X.HRL3_NAME, X.HRL3_EMAIL, X.HRL3_ID
			-- hrSpecialist
			, X.HRS1_NAME, X.HRS1_EMAIL, X.HRS1_ID
			-- hrSpecialist2
			, X.HRS2_NAME, X.HRS2_EMAIL, X.HRS2_ID
			-- position
			, X.POS_TITLE, X.PAY_PLAN, X.SERIES, X.GRADE, X.POS_DESC_NUM
			-- dutyStation
			, X.DS1_STATE, X.DS1_CITY
			, X.DS2_STATE, X.DS2_CITY
			-- PCA Details
			, X.TYPE_OF_APPT, X.NOT_TO_EXDATE, X.WORK_SCHEDULE , X.HOURS_PER_WEEK , X.BD_CERT_REQ , X.LIC_INFO , X.REQ_ADMIN_APPROVAL
			-- licenseState
			, X.LIC_STATE1_STATE, X.LIC_STATE1_NAME, to_date(X.LIC_STATE1_EXP_DATE, 'mm/dd/yyyy') LIC_STATE1_EXP_DATE
			, X.LIC_STATE2_STATE, X.LIC_STATE2_NAME, to_date(X.LIC_STATE2_EXP_DATE, 'mm/dd/yyyy') LIC_STATE2_EXP_DATE
			-- boardCertSpecialty
			, X.BD_CERT_SPEC1, X.BD_CERT_SPEC2, X.BD_CERT_SPEC3, X.BD_CERT_SPEC4
			, X.BD_CERT_SPEC5, X.BD_CERT_SPEC6, X.BD_CERT_SPEC7, X.BD_CERT_SPEC8
			, X.BD_CERT_SPEC9, X.BD_CERT_SPEC_OTHER
			-- allowance
			, X.LEN_SERVED, X.LEN_SERVICE
			, X.ALW_CATEGORY, TO_NUMBER(SUBSTR(X.ALW_CATEGORY, 2), '999999999.99') ALW_CATEGORY_NUM
			, X.ALW_BD_CERT, TO_NUMBER(SUBSTR(X.ALW_BD_CERT, 2), '999999999.99') ALW_BD_CERT_NUM
			, X.ALW_MULTI_YEAR_AGMT, TO_NUMBER(SUBSTR(X.ALW_MULTI_YEAR_AGMT, 2), '999999999.99') ALW_MULTI_YEAR_AGMT_NUM
			, X.ALW_MISSION_SC, TO_NUMBER(SUBSTR(X.ALW_MISSION_SC, 2), '999999999.99') ALW_MISSION_SC_NUM
			, X.ALW_TOTAL, TO_NUMBER(SUBSTR(X.ALW_TOTAL, 2 ), '999999999.99') ALW_TOTAL_NUM
			, X.TOTAL_PAYABLE, TO_NUMBER(SUBSTR(X.TOTAL_PAYABLE, 2), '999999999.99') TOTAL_PAYABLE_NUM
			-- cancellation
			, X.CANCEL_RESAON
		FROM TBL_FORM_DTL FD, XMLTABLE('/formData/items'
		                               PASSING FD.FIELD_DATA
		                               COLUMNS
			                               REQ_NUM  NVARCHAR2(15)   PATH './item[id="requestNumber"]/value'
			                               ,   REQ_DATE  NVARCHAR2(20)   PATH './item[id="requestDate"]/value'
			                               ,   REQ_STATUS  NVARCHAR2(20)   PATH './item[id="requestStatus"]/value'
			                               ,   INCEN_TYPE  NVARCHAR2(10)   PATH './item[id="incentiveType"]/value'
			                               ,   PCA_TYPE NVARCHAR2(10)   PATH './item[id="pcaType"]/value'
			                               -- associatedNEILRequest
			                               ,   NEIL_REQ_NUM NVARCHAR2(20)   PATH './item[id="associatedNEILRequest"]/value/requestNumber'
			                               ,   NEIL_REQ_TYPE NVARCHAR2(20)   PATH './item[id="requestType"]/value'
			                               ,   ADMIN_CODE NVARCHAR2(10)   PATH './item[id="administrativeCode"]/value'
			                               ,   ORG_NAME NVARCHAR2(100)   PATH './item[id="organizationName"]/value'
			                               -- associatedIncentives
			                               ,   ASSOC_INCEN_REQ_NUM NVARCHAR2(20)   PATH './item[id="associatedIncentives"]/value/requestNumber'
			                               ,   ASSOC_INCEN_TYPE NVARCHAR2(20)   PATH './item[id="associatedIncentives"]/value/incentiveType'
			                               -- candidate
			                               ,   CANDI_NAME NVARCHAR2(150)   PATH './item[id="candidateName"]/value'
			                               ,   CANDI_FIRST NVARCHAR2(50)   PATH './item[id="candiFirstName"]/value'
			                               ,   CANDI_MIDDLE NVARCHAR2(50)   PATH './item[id="candiMiddleName"]/value'
			                               ,   CANDI_LAST NVARCHAR2(50)   PATH './item[id="candiLastName"]/value'
			                               -- selectingOfficial
			                               ,   SO_NAME NVARCHAR2(100)   PATH './item[id="selectingOfficial"]/value/name'
			                               ,   SO_EMAIL NVARCHAR2(100)   PATH './item[id="selectingOfficial"]/value/email'
			                               ,   SO_ID NVARCHAR2(10)   PATH './item[id="selectingOfficial"]/value/id'
			                               ,   SO_TITLE NVARCHAR2(100)   PATH './item[id="selectingOfficial"]/value/title'
			                               -- executiveOfficers
			                               ,   XO1_NAME NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[1]/name'
			                               ,   XO1_EMAIL NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[1]/email'
			                               ,   XO1_ID NVARCHAR2(10)   PATH './item[id="executiveOfficers"]/value[1]/id'
			                               ,   XO2_NAME NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[2]/name'
			                               ,   XO2_EMAIL NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[2]/email'
			                               ,   XO2_ID NVARCHAR2(10)   PATH './item[id="executiveOfficers"]/value[2]/id'
			                               ,   XO3_NAME NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[3]/name'
			                               ,   XO3_EMAIL NVARCHAR2(100)   PATH './item[id="executiveOfficers"]/value[3]/email'
			                               ,   XO3_ID NVARCHAR2(10)   PATH './item[id="executiveOfficers"]/value[3]/id'
			                               -- hrLiaisons
			                               ,   HRL1_NAME NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[1]/name'
			                               ,   HRL1_EMAIL NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[1]/email'
			                               ,   HRL1_ID NVARCHAR2(10)   PATH './item[id="hrLiaisons"]/value[1]/id'
			                               ,   HRL2_NAME NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[2]/name'
			                               ,   HRL2_EMAIL NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[2]/email'
			                               ,   HRL2_ID NVARCHAR2(10)   PATH './item[id="hrLiaisons"]/value[2]/id'
			                               ,   HRL3_NAME NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[3]/name'
			                               ,   HRL3_EMAIL NVARCHAR2(100)   PATH './item[id="hrLiaisons"]/value[3]/email'
			                               ,   HRL3_ID NVARCHAR2(10)   PATH './item[id="hrLiaisons"]/value[3]/id'
			                               -- hrSpecialist
			                               ,   HRS1_NAME NVARCHAR2(100)   PATH './item[id="hrSpecialist"]/value/name'
			                               ,   HRS1_EMAIL NVARCHAR2(100)   PATH './item[id="hrSpecialist"]/value/email'
			                               ,   HRS1_ID NVARCHAR2(10)   PATH './item[id="hrSpecialist"]/value/id'
			                               -- hrSpecialist2
			                               ,   HRS2_NAME NVARCHAR2(100)   PATH './item[id="hrSpecialist2"]/value/name'
			                               ,   HRS2_EMAIL NVARCHAR2(100)   PATH './item[id="hrSpecialist2"]/value/email'
			                               ,   HRS2_ID NVARCHAR2(10)   PATH './item[id="hrSpecialist2"]/value/id'
			                               -- position
			                               ,   POS_TITLE NVARCHAR2(140)   PATH './item[id="positionTitle"]/value'
			                               ,   PAY_PLAN NVARCHAR2(5)   PATH './item[id="payPlan"]/value'
			                               ,   SERIES NVARCHAR2(140)   PATH './item[id="series"]/value'
			                               ,   GRADE NVARCHAR2(5)   PATH './item[id="grade"]/value'
			                               ,   POS_DESC_NUM NVARCHAR2(20)   PATH './item[id="posDescNumber"]/value'
			                               -- dutyStation
			                               ,   DS1_STATE NVARCHAR2(2)   PATH './item[id="dutyStation"]/value[1]/state'
			                               ,   DS1_CITY NVARCHAR2(50)   PATH './item[id="dutyStation"]/value[1]/city'
			                               ,   DS2_STATE NVARCHAR2(2)   PATH './item[id="dutyStation"]/value[2]/state'
			                               ,   DS2_CITY NVARCHAR2(50)   PATH './item[id="dutyStation"]/value[2]/city'
			                               -- PCA Details
			                               ,   TYPE_OF_APPT NVARCHAR2(20)   PATH './item[id="typeOfAppointment"]/value'
			                               ,   NOT_TO_EXDATE NVARCHAR2(50)   PATH './item[id="notToExceedDate"]/value'
			                               ,   WORK_SCHEDULE NVARCHAR2(15)   PATH './item[id="workSchedule"]/value'
			                               ,   HOURS_PER_WEEK NVARCHAR2(5)   PATH './item[id="hoursPerWeek"]/value'
			                               ,   BD_CERT_REQ NVARCHAR2(5)   PATH './item[id="requireBoardCert"]/value'
			                               ,   LIC_INFO NVARCHAR2(140)   PATH './item[id="licenseInfo"]/value'
			                               ,   REQ_ADMIN_APPROVAL NVARCHAR2(5)   PATH './item[id="requireAdminApproval"]/value'
			                               -- licenseState
			                               ,   LIC_STATE1_STATE NVARCHAR2(2)   PATH './item[id="licenseState"]/value[1]/state'
			                               ,   LIC_STATE1_NAME NVARCHAR2(50)   PATH './item[id="licenseState"]/value[1]/name'
			                               ,   LIC_STATE1_EXP_DATE NVARCHAR2(10)   PATH './item[id="licenseState"]/value[1]/expDate'
			                               ,   LIC_STATE2_STATE NVARCHAR2(2)   PATH './item[id="licenseState"]/value[2]/state'
			                               ,   LIC_STATE2_NAME NVARCHAR2(50)   PATH './item[id="licenseState"]/value[2]/name'
			                               ,   LIC_STATE2_EXP_DATE NVARCHAR2(10)   PATH './item[id="licenseState"]/value[2]/expDate'
			                               -- boardCertSpecialty
			                               ,   BD_CERT_SPEC1 NVARCHAR2(30)   PATH './item[id="boardCertSpecialty"]/value[1]/text'
			                               ,   BD_CERT_SPEC2 NVARCHAR2(30)   PATH './item[id="boardCertSpecialty"]/value[2]/text'
			                               ,   BD_CERT_SPEC3 NVARCHAR2(30)   PATH './item[id="boardCertSpecialty"]/value[3]/text'
			                               ,   BD_CERT_SPEC4 NVARCHAR2(30)   PATH './item[id="boardCertSpecialty"]/value[4]/text'
			                               ,   BD_CERT_SPEC5 NVARCHAR2(20)   PATH './item[id="boardCertSpecialty"]/value[5]/text'
			                               ,   BD_CERT_SPEC6 NVARCHAR2(30)   PATH './item[id="boardCertSpecialty"]/value[6]/text'
			                               ,   BD_CERT_SPEC7 NVARCHAR2(30)   PATH './item[id="boardCertSpecialty"]/value[7]/text'
			                               ,   BD_CERT_SPEC8 NVARCHAR2(30)   PATH './item[id="boardCertSpecialty"]/value[8]/text'
			                               ,   BD_CERT_SPEC9 NVARCHAR2(30)   PATH './item[id="boardCertSpecialty"]/value[9]/text'
			                               ,   BD_CERT_SPEC_OTHER NVARCHAR2(140)   PATH './item[id="otherSpeciality"]/value'
			                               -- allowance
			                               ,   LEN_SERVED NVARCHAR2(25)   PATH './item[id="lengthOfServed"]/value'
			                               ,   LEN_SERVICE NVARCHAR2(2)   PATH './item[id="lengthOfService"]/value'
			                               ,   ALW_CATEGORY NVARCHAR2(15)   PATH './item[id="allowanceCategory"]/value'
			                               ,   ALW_BD_CERT NVARCHAR2(15)   PATH './item[id="allowanceBoardCertification"]/value'
			                               ,   ALW_MULTI_YEAR_AGMT NVARCHAR2(15)   PATH './item[id="allowanceMultiYearAgreement"]/value'
			                               ,   ALW_MISSION_SC NVARCHAR2(15)   PATH './item[id="allowanceMissionSpecificCriteria"]/value'
			                               ,   ALW_TOTAL NVARCHAR2(15)   PATH './item[id="allowanceTotal"]/value'
			                               ,   TOTAL_PAYABLE NVARCHAR2(15)   PATH './item[id="totalPayablePCACalculation"]/value'
			                               -- cancellation
			                               ,   CANCEL_RESAON NVARCHAR2(25)   PATH './item[id="cancellationReason"]/value'
			) X
		WHERE FD.FORM_TYPE='CMSINCENTIVES'
;
/


--------------------------------------------------------
--  DDL for Incentives Views
--------------------------------------------------------
CREATE OR REPLACE FORCE VIEW HHS_CMS_HR.VW_INCENTIVES_COM (
        PROC_ID
        , INCEN_TYPE
        , REQ_NUM
        , REQ_TYPE
        , REQ_DATE
        , ADMIN_CODE
        , ORG_NAME
        , CANDI_NAME
        , CANDI_FIRST
        , CANDI_MIDDLE
        , CANDI_LAST
        , SO_NAME
        , SO_EMAIL
        , SO_ID
        , XO1_NAME
        , XO1_EMAIL
        , XO1_ID
        , XO2_NAME
        , XO2_EMAIL
        , XO2_ID
        , XO3_NAME
        , XO3_EMAIL
        , XO3_ID
        , HRL1_NAME
        , HRL1_EMAIL
        , HRL1_ID
        , HRL2_NAME
        , HRL2_EMAIL
        , HRL2_ID
        , HRL3_NAME
        , HRL3_EMAIL
        , HRL3_ID
        , HRS1_NAME
        , HRS1_EMAIL
        , HRS1_ID
        , HRS2_NAME
        , HRS2_EMAIL
        , HRS2_ID
        , DGHO_NAME
        , DGHO_EMAIL
        , DGHO_ID
        , TABG_NAME
        , TABG_EMAIL
        , TABG_ID
        , POS_TITLE
        , PAY_PLAN
        , SERIES
        , GRADE
        , POS_DESC_NUM
        , TYPE_OF_APPT
        , DS_STATE
        , DS_CITY
        , CANCEL_RESAON
        , CANCEL_USER_NAME
        , CANCEL_USER_ID
        , SO_TITLE
        , SS_NAME
        , SS_EMAIL
        , SS_ID
        , VACANCY_NUMBER
) AS 
SELECT 
        PROC_ID
        , INCEN_TYPE
        , REQ_NUM
        , REQ_TYPE
        , TO_CHAR(REQ_DATE, 'yyyy/mm/dd')
        , ADMIN_CODE
        , ORG_NAME
        , CANDI_NAME
        , CANDI_FIRST
        , CANDI_MIDDLE
        , CANDI_LAST
        , SO_NAME
        , SO_EMAIL
        , SO_ID
        , XO1_NAME
        , XO1_EMAIL
        , XO1_ID
        , XO2_NAME
        , XO2_EMAIL
        , XO2_ID
        , XO3_NAME
        , XO3_EMAIL
        , XO3_ID
        , HRL1_NAME
        , HRL1_EMAIL
        , HRL1_ID
        , HRL2_NAME
        , HRL2_EMAIL
        , HRL2_ID
        , HRL3_NAME
        , HRL3_EMAIL
        , HRL3_ID
        , HRS1_NAME
        , HRS1_EMAIL
        , HRS1_ID
        , HRS2_NAME
        , HRS2_EMAIL
        , HRS2_ID
        , DGHO_NAME
        , DGHO_EMAIL
        , DGHO_ID
        , TABG_NAME
        , TABG_EMAIL
        , TABG_ID
        , POS_TITLE
        , PAY_PLAN
        , SERIES
        , GRADE
        , POS_DESC_NUM
        , TYPE_OF_APPT
        , DS_STATE
        , DS_CITY
        , CANCEL_RESAON
        , CANCEL_USER_NAME
        , CANCEL_USER_ID
        , SO_TITLE
        , SS_NAME
        , SS_EMAIL
        , SS_ID
        , VACANCY_NUMBER
FROM HHS_CMS_HR.INCENTIVES_COM
;


/

CREATE OR REPLACE FORCE VIEW HHS_CMS_HR.VW_INCENTIVES_PCA (
    PROC_ID
    ,PCA_TYPE
    ,CANDI_AGREE
    ,CP_NAME
    ,CP_EMAIL
    ,CP_ID
    ,OFM_NAME
    ,OFM_EMAIL
    ,OFM_ID
    ,ADMIN_APPROVAL_REQ
    ,OHC_NAME
    ,OHC_EMAIL
    ,OHC_ID
    ,OADMIN_NAME
    ,OADMIN_EMAIL
    ,OADMIN_ID
    ,WORK_SCHEDULE
    ,HOURS_PER_WEEK
    ,BD_CERT_REQ
    ,LIC_INFO
    ,LIC_STATE1_STATE
    ,LIC_STATE1_NAME
    ,LIC_STATE1_EXP_DATE --
    ,LIC_STATE2_STATE
    ,LIC_STATE2_NAME
    ,LIC_STATE2_EXP_DATE --
    ,BD_CERT_SPEC1
    ,BD_CERT_SPEC2
    ,BD_CERT_SPEC3
    ,BD_CERT_SPEC4
    ,BD_CERT_SPEC5
    ,BD_CERT_SPEC6
    ,BD_CERT_SPEC7
    ,BD_CERT_SPEC8
    ,BD_CERT_SPEC9
    ,BD_CERT_SPEC_OTHER
    ,LEN_SERVED
    ,LEN_SERVICE
    ,ALW_CATEGORY  --
    ,ALW_BD_CERT --
    ,ALW_MULTI_YEAR_AGMT --
    ,ALW_MISSION_SC --
    ,ALW_TOTAL --
    ,ALW_TOTAL_PAYABLE --
    ,DETAIL_REMARKS
    ,RVW_SO_NAME
    ,RVW_SO_ID
    ,RVW_SO_DATE --
    ,RVW_DGHO_NAME
    ,RVW_DGHO_ID
    ,RVW_DGHO_DATE --
    ,RVW_CP_NAME
    ,RVW_CP_ID
    ,RVW_CP_DATE --
    ,RVW_OFM_NAME
    ,RVW_OFM_ID
    ,RVW_OFM_DATE --
    ,RVW_TABG_NAME
    ,RVW_TABG_ID
    ,RVW_TABG_DATE --
    ,RVW_OHC_NAME
    ,RVW_OHC_ID
    ,RVW_OHC_DATE --
    ,APPROVAL_TABG_NAME
    ,APPROVAL_TABG_ID
    ,APPROVAL_TABG_DATE --
    ,APPROVAL_OADMIN_NAME
    ,APPROVAL_OADMIN_ID
    ,APPROVAL_OADMIN_DATE --
    ---- correct data type
    ,LIC_STATE1_EXP_DATE_D
    ,LIC_STATE2_EXP_DATE_D
    ,ALW_CATEGORY_N
    ,ALW_BD_CERT_N
    ,ALW_MULTI_YEAR_AGMT_N
    ,ALW_MISSION_SC_N
    ,ALW_TOTAL_N
    ,ALW_TOTAL_PAYABLE_N
    ,RVW_SO_DATE_D
    ,RVW_DGHO_DATE_D
    ,RVW_CP_DATE_D
    ,RVW_OFM_DATE_D
    ,RVW_TABG_DATE_D
    ,RVW_OHC_DATE_D
    ,APPROVAL_TABG_DATE_D
    ,APPROVAL_OADMIN_DATE_D
) AS 
SELECT 
    PROC_ID
    ,PCA_TYPE
    ,CANDI_AGREE
    ,CP_NAME
    ,CP_EMAIL
    ,CP_ID
    ,OFM_NAME
    ,OFM_EMAIL
    ,OFM_ID
    ,ADMIN_APPROVAL_REQ
    ,OHC_NAME
    ,OHC_EMAIL
    ,OHC_ID
    ,OADMIN_NAME
    ,OADMIN_EMAIL
    ,OADMIN_ID
    ,WORK_SCHEDULE
    ,HOURS_PER_WEEK
    ,BD_CERT_REQ
    ,LIC_INFO
    ,LIC_STATE1_STATE
    ,LIC_STATE1_NAME
    ,TO_CHAR(LIC_STATE1_EXP_DATE_D, 'mm/dd/yyyy') as LIC_STATE1_EXP_DATE --
    ,LIC_STATE2_STATE
    ,LIC_STATE2_NAME
    ,TO_CHAR(LIC_STATE2_EXP_DATE_D, 'mm/dd/yyyy') as LIC_STATE2_EXP_DATE --
    ,BD_CERT_SPEC1
    ,BD_CERT_SPEC2
    ,BD_CERT_SPEC3
    ,BD_CERT_SPEC4
    ,BD_CERT_SPEC5
    ,BD_CERT_SPEC6
    ,BD_CERT_SPEC7
    ,BD_CERT_SPEC8
    ,BD_CERT_SPEC9
    ,BD_CERT_SPEC_OTHER
    ,LEN_SERVED
    ,LEN_SERVICE
    ,TO_CHAR(ALW_CATEGORY_N, '$999,999,999,999,999,999.99' ) as ALW_CATEGORY  --
    ,TO_CHAR(ALW_BD_CERT_N, '$999,999,999,999,999,999.99' ) as ALW_BD_CERT --
    ,TO_CHAR(ALW_MULTI_YEAR_AGMT_N, '$999,999,999,999,999,999.99' ) as ALW_MULTI_YEAR_AGMT --
    ,TO_CHAR(ALW_MISSION_SC_N, '$999,999,999,999,999,999.99' ) as ALW_MISSION_SC --
    ,TO_CHAR(ALW_TOTAL_N, '$999,999,999,999,999,999.99' ) as ALW_TOTAL --
    ,TO_CHAR(ALW_TOTAL_PAYABLE_N, '$999,999,999,999,999,999.99' ) as ALW_TOTAL_PAYABLE --
    ,DETAIL_REMARKS
    ,RVW_SO_NAME
    ,RVW_SO_ID
    ,TO_CHAR(RVW_SO_DATE_D, 'mm/dd/yyyy') as RVW_SO_DATE --
    ,RVW_DGHO_NAME
    ,RVW_DGHO_ID
    ,TO_CHAR(RVW_DGHO_DATE_D, 'mm/dd/yyyy') as RVW_DGHO_DATE --
    ,RVW_CP_NAME
    ,RVW_CP_ID
    ,TO_CHAR(RVW_CP_DATE_D, 'mm/dd/yyyy') as RVW_CP_DATE --
    ,RVW_OFM_NAME
    ,RVW_OFM_ID
    ,TO_CHAR(RVW_OFM_DATE_D, 'mm/dd/yyyy') as RVW_OFM_DATE --
    ,RVW_TABG_NAME
    ,RVW_TABG_ID
    ,TO_CHAR(RVW_TABG_DATE_D, 'mm/dd/yyyy') as RVW_TABG_DATE --
    ,RVW_OHC_NAME
    ,RVW_OHC_ID
    ,TO_CHAR(RVW_OHC_DATE_D, 'mm/dd/yyyy') as RVW_OHC_DATE --
    ,APPROVAL_TABG_NAME
    ,APPROVAL_TABG_ID
    ,TO_CHAR(APPROVAL_TABG_DATE_D, 'mm/dd/yyyy') as APPROVAL_TABG_DATE --
    ,APPROVAL_OADMIN_NAME
    ,APPROVAL_OADMIN_ID
    ,TO_CHAR(APPROVAL_OADMIN_DATE_D, 'mm/dd/yyyy') as APPROVAL_OADMIN_DATE --
    ---- correct data type
    ,LIC_STATE1_EXP_DATE_D
    ,LIC_STATE2_EXP_DATE_D
    ,ALW_CATEGORY_N
    ,ALW_BD_CERT_N
    ,ALW_MULTI_YEAR_AGMT_N
    ,ALW_MISSION_SC_N
    ,ALW_TOTAL_N
    ,ALW_TOTAL_PAYABLE_N
    ,RVW_SO_DATE_D
    ,RVW_DGHO_DATE_D
    ,RVW_CP_DATE_D
    ,RVW_OFM_DATE_D
    ,RVW_TABG_DATE_D
    ,RVW_OHC_DATE_D
    ,APPROVAL_TABG_DATE_D
    ,APPROVAL_OADMIN_DATE_D
FROM HHS_CMS_HR.INCENTIVES_PCA
;
/

---------------------
CREATE OR REPLACE FORCE VIEW HHS_CMS_HR.VW_INCENTIVES_PDP (
     PROC_ID
    , PDP_TYPE
    , PDP_TYPE_OTHER
    , EXISTINGREQUEST
    , WORK_SCHEDULE
    , HOURS_PER_WEEK
    , BD_CERT_REQ
    , LIC_INFO
    , MARKET_PAY_RATE
    , CURRENT_FED_EMPLOYEE
    , LEVEL_RESPONSIBILITY
    , EXEC_RESP_AMT_REQUESTED
    , EXEC_RESP_JUSTIF_DETERMIN_AMT
    , EXPT_QF_Q1_AMT_REQUESTED
    , EXPT_QF_Q1_JUSTIF_DETERMIN_AMT
    , EXPT_QF_Q2_AMT_REQUESTED
    , EXPT_QF_Q2_JUSTIF_DETERMIN_AMT
    , EXPT_QF_Q3_AMT_REQUESTED
    , EXPT_QF_Q3_JUSTIF_DETERMIN_AMT
    , EXPT_QF_Q4_AMT_REQUESTED
    , EXPT_QF_Q4_JUSTIF_DETERMIN_AMT
    , EXPT_QF_Q5_AMT_REQUESTED
    , EXPT_QF_Q5_JUSTIF_DETERMIN_AMT
    , TOTAL_AMT_EXPT_QUALIFICATIONS
    , CURRENT_PAY_GRADE
    , CURRENT_PAY_STEP
    , CURRENT_PAY_POSITION_TITLE
    , CURRENT_PAY_TABLE
    , CURRENT_PAY_TIER
    , CLINICAL_SPECIALTY_BOARD_CERT
    , OTHER_SPECIALTY
    , CURRENT_PAY_RECRUITMENT
    , CURRENT_PAY_RELOCATION
    , CURRENT_PAY_RETENTION
    , CURRENT_PAY_3R_TOTAL
    , CURRENT_PAY_BASE
    , CURRENT_PAY_LOCALITY_MARKET
    , CURRENT_PAY_TOTAL_ANNUAL_PAY
    , CURRENT_PAY_TOTAL_COMPENSATION
    , CURRENT_PAY_NOTES
    , PROPOSED_PAY_STEP
    , PROPOSED_PAY_TABLE
    , PROPOSED_PAY_TIER
    , PROPOSED_PAY_RECRUITMENT
    , PROPOSED_PAY_RELOCATION
    , PROPOSED_PAY_RETENTION
    , PROPOSED_PAY_TOTAL_3R
    , PROPOSED_GS_BASE_PAY
    , PROPOSED_MARKET_PAY
    , PROPOSED_TOTAL_ANNUAL_PAY
    , PROPOSED_TOTAL_ANNUAL_COMPENS
    , INCENTIVES_APPROVED_BY_TABG
    , PROPOSED_PAY_NOTES
    , DATE_OF_MEETING
    , QUORUM_REACHED
    , PANEL_CURRENT_SALARY
    , PANEL_PDP_AMOUNT
    , PANEL_RECOMM_ANNUAL_SALARY
    , SELECTING_OFFICIAL_REVIEWER
    , SELECTING_OFFICIAL_REVIEW_DT
    , TABG_DIVISION_DIR_REVIEW_DT
    , CMS_CHIEF_PHYSICIAN_REVIEW_DT
    , OFM_REVIEW_DATE
    , TABG_REVIEW_DATE
    , OHC_REVIEW_DATE
    , ADMINISTRATOR_APPROVAL_DATE
    , DATE_OF_RECOMMENDATION
) AS 
SELECT 
     PROC_ID
    , PDP_TYPE
    , PDP_TYPE_OTHER
    , EXISTINGREQUEST
    , WORK_SCHEDULE
    , HOURS_PER_WEEK
    , BD_CERT_REQ
    , LIC_INFO
    , MARKET_PAY_RATE
    , CURRENT_FED_EMPLOYEE
    , LEVEL_RESPONSIBILITY
    , EXEC_RESP_AMT_REQUESTED
    , EXEC_RESP_JUSTIF_DETERMIN_AMT
    , EXPT_QF_Q1_AMT_REQUESTED
    , EXPT_QF_Q1_JUSTIF_DETERMIN_AMT
    , EXPT_QF_Q2_AMT_REQUESTED
    , EXPT_QF_Q2_JUSTIF_DETERMIN_AMT
    , EXPT_QF_Q3_AMT_REQUESTED
    , EXPT_QF_Q3_JUSTIF_DETERMIN_AMT
    , EXPT_QF_Q4_AMT_REQUESTED
    , EXPT_QF_Q4_JUSTIF_DETERMIN_AMT
    , EXPT_QF_Q5_AMT_REQUESTED
    , EXPT_QF_Q5_JUSTIF_DETERMIN_AMT
    , TOTAL_AMT_EXPT_QUALIFICATIONS
    , CURRENT_PAY_GRADE
    , CURRENT_PAY_STEP
    , CURRENT_PAY_POSITION_TITLE
    , CURRENT_PAY_TABLE
    , CURRENT_PAY_TIER
    , CLINICAL_SPECIALTY_BOARD_CERT
    , OTHER_SPECIALTY
    , CURRENT_PAY_RECRUITMENT
    , CURRENT_PAY_RELOCATION
    , CURRENT_PAY_RETENTION
    , CURRENT_PAY_3R_TOTAL
    , CURRENT_PAY_BASE
    , CURRENT_PAY_LOCALITY_MARKET
    , CURRENT_PAY_TOTAL_ANNUAL_PAY
    , CURRENT_PAY_TOTAL_COMPENSATION
    , CURRENT_PAY_NOTES
    , PROPOSED_PAY_STEP
    , PROPOSED_PAY_TABLE
    , PROPOSED_PAY_TIER
    , PROPOSED_PAY_RECRUITMENT
    , PROPOSED_PAY_RELOCATION
    , PROPOSED_PAY_RETENTION
    , PROPOSED_PAY_TOTAL_3R
    , PROPOSED_GS_BASE_PAY
    , PROPOSED_MARKET_PAY
    , PROPOSED_TOTAL_ANNUAL_PAY
    , PROPOSED_TOTAL_ANNUAL_COMPENS
    , INCENTIVES_APPROVED_BY_TABG
    , PROPOSED_PAY_NOTES
    , DATE_OF_MEETING
    , QUORUM_REACHED
    , PANEL_CURRENT_SALARY
    , PANEL_PDP_AMOUNT
    , PANEL_RECOMM_ANNUAL_SALARY
    , SELECTING_OFFICIAL_REVIEWER
    , SELECTING_OFFICIAL_REVIEW_DT
    , TABG_DIVISION_DIR_REVIEW_DT
    , CMS_CHIEF_PHYSICIAN_REVIEW_DT
    , OFM_REVIEW_DATE
    , TABG_REVIEW_DATE
    , OHC_REVIEW_DATE
    , ADMINISTRATOR_APPROVAL_DATE
    , DATE_OF_RECOMMENDATION
FROM HHS_CMS_HR.INCENTIVES_PDP
;
/


CREATE OR REPLACE FORCE VIEW HHS_CMS_HR.VW_INCENTIVES_SAM
(
    PROC_ID
    ,INIT_SALARY_GRADE
    ,INIT_SALARY_STEP
    ,INIT_SALARY_SALARY_PER_ANNUM
    ,INIT_SALARY_LOCALITY_PAY_SCALE
    ,SUPPORT_SAM
    ,RCMD_SALARY_GRADE
    ,RCMD_SALARY_STEP
    ,RCMD_SALARY_SALARY_PER_ANNUM
    ,RCMD_SALARY_LOCALITY_PAY_SCALE
    ,SELECTEE_SALARY_PER_ANNUM
    ,SELECTEE_SALARY_TYPE
    ,SELECTEE_BONUS
    ,SELECTEE_BENEFITS
    ,SELECTEE_TOTAL_COMPENSATION
    ,SUP_DOC_REQ_DATE
    ,SUP_DOC_RCV_DATE
    ,JUSTIFICATION_SUPER_QUAL_DESC
    ,JUSTIFICATION_QUAL_COMP_DESC
    ,JUSTIFICATION_PAY_EQUITY_DESC
    ,JUSTIFICATION_EXIST_PKG_DESC
    ,JUSTIFICATION_EXPLAIN_CONSID
    ,SELECT_MEET_ELIGIBILITY
    ,SELECT_MEET_CRITERIA
    ,SUPERIOR_QUAL_REASON
    ,OTHER_FACTORS
    ,SPL_AGENCY_NEED_RSN
    ,SPL_AGENCY_NEED_RSN_ESS
    ,QUAL_REAPPT
    ,OTHER_EXCEPTS
    ,BASIC_PAY_RATE_FACTOR1
    ,BASIC_PAY_RATE_FACTOR2
    ,BASIC_PAY_RATE_FACTOR3
    ,BASIC_PAY_RATE_FACTOR4
    ,BASIC_PAY_RATE_FACTOR5
    ,BASIC_PAY_RATE_FACTOR6
    ,BASIC_PAY_RATE_FACTOR7
    ,BASIC_PAY_RATE_FACTOR8
    ,BASIC_PAY_RATE_FACTOR9
    ,BASIC_PAY_RATE_FACTOR10
    ,OTHER_RLVNT_FACTOR
    ,OTHER_REQ_JUST_APVD
    ,OTHER_REQ_SUFF_INFO_PRVD
    ,OTHER_REQ_INCEN_REQD
    ,OTHER_REQ_DOC_PRVD
    ,HRS_RVW_CERT
    ,HRS_NOT_SPT_RSN
    ,RVW_HRS
    ,HRS_RVW_DATE
    ,RCMD_GRADE
    ,RCMD_STEP
    ,RCMD_SALARY_PER_ANNUM
    ,RCMD_LOCALITY_PAY_SCALE
    ,RCMD_INC_DEC_AMOUNT
    ,RCMD_PERC_DIFF
    ,OHC_APPRO_REQ
    ,RCMD_APPRO_OHC_NAME
    ,RCMD_APPRO_OHC_EMAIL
    ,RCMD_APPRO_OHC_ID
    ,RVW_REMARKS
    ,APPROVAL_SO_VALUE
    ,APPROVAL_SO
    ,APPROVAL_SO_RESP_DATE 
    ,APPROVAL_DGHO_VALUE
    ,APPROVAL_DGHO
    ,APPROVAL_DGHO_RESP_DATE 
    ,APPROVAL_TABG_VALUE
    ,APPROVAL_TABG
    ,APPROVAL_TABG_RESP_DATE 
    ,APPROVAL_OHC_VALUE
    ,APPROVAL_OHC
    ,APPROVAL_OHC_RESP_DATE 
    ,APPROVER_NOTES
    ,COC_NAME
    ,COC_EMAIL
    ,COC_ID
    ,COC_TITLE
    ,APPROVAL_COC_VALUE
    ,APPROVAL_COC_ACTING
    ,APPROVAL_COC
    ,APPROVAL_COC_RESP_DATE 
    ,APPROVAL_SO_ACTING
    ,APPROVAL_DGHO_ACTING
    ,APPROVAL_TABG_ACTING
    ,APPROVAL_OHC_ACTING
    ,JUSTIFICATION_MOD_REASON
    ,JUSTIFICATION_MOD_SUMMARY
    ,JUSTIFICATION_MODIFIER_NAME
    ,JUSTIFICATION_MODIFIER_ID
    ,JUSTIFICATION_MODIFIED_DATE
    ,JUSTIFICATION_VER
    ,JUSTIFICATION_CRT_NAME
    ,JUSTIFICATION_CRT_ID
    ,JUSTIFICATION_CRT_DATE 
    ,JUSTIFICATION_LASTMOD_NAME
    ,JUSTIFICATION_LASTMOD_ID
    ,JUSTIFICATION_LASTMOD_DATE
    ,INIT_SALARY_SALARY_PER_ANNUM_N
    ,RCMD_SALARY_SALARY_PER_ANNUM_N
    ,SELECTEE_SALARY_PER_ANNUM_N
    ,SELECTEE_BONUS_N
    ,SELECTEE_TOTAL_COMPENSATION_N
    ,SUP_DOC_REQ_DATE_D
    ,SUP_DOC_RCV_DATE_D
    ,HRS_RVW_DATE_D
    ,RCMD_SALARY_PER_ANNUM_N
    ,RCMD_INC_DEC_AMOUNT_N
    ,APPROVAL_SO_RESP_DATE_D
    ,APPROVAL_DGHO_RESP_DATE_D
    ,APPROVAL_TABG_RESP_DATE_D
    ,APPROVAL_OHC_RESP_DATE_D
    ,APPROVAL_COC_RESP_DATE_D
    ,JUSTIFICATION_MODIFIED_DATE_D
    ,JUSTIFICATION_CRT_DATE_D
    ,JUSTIFICATION_LASTMOD_DATE_D
)
AS
--------------------------------------------------------------------------------------------------------------------------------
SELECT 
    PROC_ID
    ,INIT_SALARY_GRADE
    ,INIT_SALARY_STEP
    ,TO_CHAR(INIT_SALARY_SALARY_PER_ANNUM_N, '$999,999,999,999,999,999.99' ) as INIT_SALARY_SALARY_PER_ANNUM 
    ,INIT_SALARY_LOCALITY_PAY_SCALE
    ,SUPPORT_SAM
    ,RCMD_SALARY_GRADE
    ,RCMD_SALARY_STEP
    ,TO_CHAR(RCMD_SALARY_SALARY_PER_ANNUM_N, '$999,999,999,999,999,999.99' ) as RCMD_SALARY_SALARY_PER_ANNUM
    ,RCMD_SALARY_LOCALITY_PAY_SCALE
    ,TO_CHAR(SELECTEE_SALARY_PER_ANNUM_N, '$999,999,999,999,999,999.99' ) as SELECTEE_SALARY_PER_ANNUM
    ,SELECTEE_SALARY_TYPE
    ,TO_CHAR(SELECTEE_BONUS_N, '$999,999,999,999,999,999.99' ) as SELECTEE_BONUS
    ,SELECTEE_BENEFITS
    ,TO_CHAR(SELECTEE_TOTAL_COMPENSATION_N, '$999,999,999,999,999,999.99' ) as SELECTEE_TOTAL_COMPENSATION
    ,TO_CHAR(SUP_DOC_REQ_DATE_D, 'mm/dd/yyyy') as SUP_DOC_REQ_DATE
    ,TO_CHAR(SUP_DOC_RCV_DATE_D, 'mm/dd/yyyy') as SUP_DOC_RCV_DATE
    ,JUSTIFICATION_SUPER_QUAL_DESC
    ,JUSTIFICATION_QUAL_COMP_DESC
    ,JUSTIFICATION_PAY_EQUITY_DESC
    ,JUSTIFICATION_EXIST_PKG_DESC
    ,JUSTIFICATION_EXPLAIN_CONSID
    ,SELECT_MEET_ELIGIBILITY
    ,SELECT_MEET_CRITERIA
    ,SUPERIOR_QUAL_REASON
    ,OTHER_FACTORS
    ,SPL_AGENCY_NEED_RSN
    ,SPL_AGENCY_NEED_RSN_ESS
    ,QUAL_REAPPT
    ,OTHER_EXCEPTS
    ,BASIC_PAY_RATE_FACTOR1
    ,BASIC_PAY_RATE_FACTOR2
    ,BASIC_PAY_RATE_FACTOR3
    ,BASIC_PAY_RATE_FACTOR4
    ,BASIC_PAY_RATE_FACTOR5
    ,BASIC_PAY_RATE_FACTOR6
    ,BASIC_PAY_RATE_FACTOR7
    ,BASIC_PAY_RATE_FACTOR8
    ,BASIC_PAY_RATE_FACTOR9
    ,BASIC_PAY_RATE_FACTOR10
    ,OTHER_RLVNT_FACTOR
    ,OTHER_REQ_JUST_APVD
    ,OTHER_REQ_SUFF_INFO_PRVD
    ,OTHER_REQ_INCEN_REQD
    ,OTHER_REQ_DOC_PRVD
    ,HRS_RVW_CERT
    ,HRS_NOT_SPT_RSN
    ,RVW_HRS
    ,TO_CHAR(HRS_RVW_DATE_D, 'mm/dd/yyyy') as HRS_RVW_DATE
    ,RCMD_GRADE
    ,RCMD_STEP
    ,DECODE(RCMD_SALARY_PER_ANNUM_N, 0, '0.00', TO_CHAR(RCMD_SALARY_PER_ANNUM_N, 's999,999,999,999,999,999.99')) as RCMD_SALARY_PER_ANNUM
    ,RCMD_LOCALITY_PAY_SCALE
    ,DECODE(RCMD_INC_DEC_AMOUNT_N, 0, '0.00', TO_CHAR(RCMD_INC_DEC_AMOUNT_N, 's999,999,999,999,999,999.99')) as RCMD_INC_DEC_AMOUNT 
    ,RCMD_PERC_DIFF
    ,OHC_APPRO_REQ
    ,RCMD_APPRO_OHC_NAME
    ,RCMD_APPRO_OHC_EMAIL
    ,RCMD_APPRO_OHC_ID
    ,RVW_REMARKS
    ,APPROVAL_SO_VALUE
    ,APPROVAL_SO
    ,TO_CHAR(APPROVAL_SO_RESP_DATE_D, 'mm/dd/yyyy') as APPROVAL_SO_RESP_DATE
    ,APPROVAL_DGHO_VALUE
    ,APPROVAL_DGHO
    ,TO_CHAR(APPROVAL_DGHO_RESP_DATE_D, 'mm/dd/yyyy') as APPROVAL_DGHO_RESP_DATE
    ,APPROVAL_TABG_VALUE
    ,APPROVAL_TABG
    ,TO_CHAR(APPROVAL_TABG_RESP_DATE_D, 'mm/dd/yyyy') as APPROVAL_TABG_RESP_DATE
    ,APPROVAL_OHC_VALUE
    ,APPROVAL_OHC
    ,TO_CHAR(APPROVAL_OHC_RESP_DATE_D, 'mm/dd/yyyy') as APPROVAL_OHC_RESP_DATE
    ,APPROVER_NOTES
    ,COC_NAME
    ,COC_EMAIL
    ,COC_ID
    ,COC_TITLE
    ,APPROVAL_COC_VALUE
    ,APPROVAL_COC_ACTING
    ,APPROVAL_COC
    ,TO_CHAR(APPROVAL_COC_RESP_DATE_D, 'mm/dd/yyyy') as APPROVAL_COC_RESP_DATE
    ,APPROVAL_SO_ACTING
    ,APPROVAL_DGHO_ACTING
    ,APPROVAL_TABG_ACTING
    ,APPROVAL_OHC_ACTING
    ,JUSTIFICATION_MOD_REASON
    ,JUSTIFICATION_MOD_SUMMARY
    ,JUSTIFICATION_MODIFIER_NAME
    ,JUSTIFICATION_MODIFIER_ID
    ,TO_CHAR(JUSTIFICATION_MODIFIED_DATE_D, 'mm/dd/yyyy hh24:mi:ss') as JUSTIFICATION_MODIFIED_DATE
    ,JUSTIFICATION_VER
    ,JUSTIFICATION_CRT_NAME
    ,JUSTIFICATION_CRT_ID
    ,TO_CHAR(JUSTIFICATION_CRT_DATE_D, 'mm/dd/yyyy hh24:mi:ss') as JUSTIFICATION_CRT_DATE
    ,JUSTIFICATION_LASTMOD_NAME
    ,JUSTIFICATION_LASTMOD_ID
    ,TO_CHAR(JUSTIFICATION_LASTMOD_DATE_D, 'mm/dd/yyyy hh24:mi:ss') as JUSTIFICATION_LASTMOD_DATE
    ,INIT_SALARY_SALARY_PER_ANNUM_N
    ,RCMD_SALARY_SALARY_PER_ANNUM_N
    ,SELECTEE_SALARY_PER_ANNUM_N
    ,SELECTEE_BONUS_N
    ,SELECTEE_TOTAL_COMPENSATION_N
    ,SUP_DOC_REQ_DATE_D 
    ,SUP_DOC_RCV_DATE_D
    ,HRS_RVW_DATE_D
    ,RCMD_SALARY_PER_ANNUM_N
    ,RCMD_INC_DEC_AMOUNT_N
    ,APPROVAL_SO_RESP_DATE_D
    ,APPROVAL_DGHO_RESP_DATE_D
    ,APPROVAL_TABG_RESP_DATE_D
    ,APPROVAL_OHC_RESP_DATE_D
    ,APPROVAL_COC_RESP_DATE_D
    ,JUSTIFICATION_MODIFIED_DATE_D
    ,JUSTIFICATION_CRT_DATE_D
    ,JUSTIFICATION_LASTMOD_DATE_D
FROM HHS_CMS_HR.INCENTIVES_SAM
;

SELECT FD.PROCID AS PROC_ID, X.*
FROM TBL_FORM_DTL FD,
     XMLTABLE('/formData/items' PASSING FD.FIELD_DATA COLUMNS
	     ---- Center/Office/Consortium Director
	     COC_NAME VARCHAR2(100) PATH './item[id="cocDirector"]/value/name'
	     , COC_EMAIL VARCHAR2(100) PATH './item[id="cocDirector"]/value/email'
	     , COC_ID VARCHAR2(10) PATH './item[id="cocDirector"]/value/id'
	     , COC_TITLE VARCHAR2(100) PATH './item[id="cocDirector"]/value/title'
	     , INIT_SALARY_GRADE VARCHAR2(5) PATH './item[id="hrInitialSalaryGrade"]/value'
	     , INIT_SALARY_STEP VARCHAR2(5) PATH './item[id="hrInitialSalaryStep"]/value'
	     , INIT_SALARY_SALARY_PER_ANNUM VARCHAR2(20) PATH './item[id="hrInitialSalarySalaryPerAnnum"]/value'
	     , INIT_SALARY_LOCALITY_PAY_SCALE VARCHAR2(200) PATH './item[id="hrInitialSalaryLocalityPayScale"]/value'
	     , SUPPORT_SAM VARCHAR2(5) PATH './item[id="supportSAM"]/value'
	     , RCMD_SALARY_GRADE VARCHAR2(5) PATH './item[id="componentRcmdGrade"]/value'
	     , RCMD_SALARY_STEP VARCHAR2(5) PATH './item[id="componentRcmdStep"]/value'
	     , RCMD_SALARY_SALARY_PER_ANNUM VARCHAR2(20) PATH './item[id="componentRcmdSalaryPerAnnum"]/value'
	     , RCMD_SALARY_LOCALITY_PAY_SCALE VARCHAR2(200) PATH './item[id="componentRcmdLocalityPayScale"]/value'

	     , SELECTEE_SALARY_PER_ANNUM VARCHAR2(20) PATH './item[id="selecteeSalaryPerAnnum"]/value'
	     , SELECTEE_SALARY_TYPE VARCHAR2(25) PATH './item[id="selecteeSalaryType"]/value'
	     , SELECTEE_BONUS VARCHAR2(20) PATH './item[id="selecteeBonus"]/value'
	     , SELECTEE_BENEFITS VARCHAR2(500) PATH './item[id="selecteeBenefits"]/value'
	     , SELECTEE_TOTAL_COMPENSATION VARCHAR2(20) PATH './item[id="selecteeTotalCompensation"]/value'
	     , SUP_DOC_REQ_DATE VARCHAR2(10) PATH './item[id="dateSupDocRequested"]/value'
	     , SUP_DOC_RCV_DATE VARCHAR2(10) PATH './item[id="dateSupDocReceived"]/value'
	     -- Justification
		 , JUSTIFICATION_LASTMOD_NAME VARCHAR2(100) PATH './item[id="currentUser"]/value'
		 , JUSTIFICATION_LASTMOD_ID VARCHAR2(10) PATH './item[id="currentUserId"]/value'
		 , JUSTIFICATION_MOD_REASON VARCHAR2(200) PATH './item[id="justificationModificationReason"]/value'
		 , JUSTIFICATION_MOD_SUMMARY VARCHAR2(500) PATH './item[id="justificationModificationSummary"]/value'
		 , JUSTIFICATION_MODIFIER_NAME VARCHAR2(100) PATH './item[id="justificationModifier"]/value'
		 , JUSTIFICATION_MODIFIER_ID VARCHAR2(10) PATH './item[id="justificationModifierId"]/value'
		 , JUSTIFICATION_MODIFIED_DATE VARCHAR2(20) PATH './item[id="justificationModified"]/value'	
	     , JUSTIFICATION_SUPER_QUAL_DESC VARCHAR2(4000) PATH './item[id="justificationSuperQualificationDesc"]/value'
	     , JUSTIFICATION_QUAL_COMP_DESC VARCHAR2(4000) PATH './item[id="justificationQualificationComparedDesc"]/value'
	     , JUSTIFICATION_PAY_EQUITY_DESC VARCHAR2(4000) PATH './item[id="justificationPayEquityDesc"]/value'
	     , JUSTIFICATION_EXIST_PKG_DESC VARCHAR2(4000) PATH './item[id="justificationExistingCompensationPkgDesc"]/value'
	     , JUSTIFICATION_EXPLAIN_CONSID VARCHAR2(4000) PATH './item[id="justificationExplainIncentiveConsideration"]/value'
	     -- Review
	     , SELECT_MEET_ELIGIBILITY VARCHAR2(100) PATH './item[id="selecteeMeetEligibility"]/value'
	     , SELECT_MEET_CRITERIA VARCHAR2(100) PATH './item[id="selecteeMeetCriteria"]/value'
	     , SUPERIOR_QUAL_REASON VARCHAR2(100) PATH './item[id="superiorQualificationReason"]/value'
	     , OTHER_FACTORS VARCHAR2(140) PATH './item[id="otherFactorsAsExplained"]/value'
	     , SPL_AGENCY_NEED_RSN VARCHAR2(140) PATH './item[id="specialAgencyNeedReason"]/value'
	     , SPL_AGENCY_NEED_RSN_ESS VARCHAR2(140) PATH './item[id="specialAgencyNeedReasonEssential"]/value'
	     , QUAL_REAPPT VARCHAR2(50) PATH './item[id="qualifyingReappointment"]/value'
	     , OTHER_EXCEPTS VARCHAR2(140) PATH './item[id="otherExceptions"]/value'
	     , BASIC_PAY_RATE_FACTOR1 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[1]/text'
	     , BASIC_PAY_RATE_FACTOR2 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[2]/text'
	     , BASIC_PAY_RATE_FACTOR3 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[3]/text'
	     , BASIC_PAY_RATE_FACTOR4 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[4]/text'
	     , BASIC_PAY_RATE_FACTOR5 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[5]/text'
	     , BASIC_PAY_RATE_FACTOR6 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[6]/text'
	     , BASIC_PAY_RATE_FACTOR7 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[7]/text'
	     , BASIC_PAY_RATE_FACTOR8 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[8]/text'
	     , BASIC_PAY_RATE_FACTOR9 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[9]/text'
	     , BASIC_PAY_RATE_FACTOR10 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[10]/text'
	     , OTHER_RLVNT_FACTOR VARCHAR2(140) PATH './item[id="otherRelevantFactors"]/value'
	     , OTHER_REQ_JUST_APVD VARCHAR2(5) PATH './item[id="otherReqJustificationApproved"]/value'
	     , OTHER_REQ_SUFF_INFO_PRVD VARCHAR2(5) PATH './item[id="otherReqSufficientInformationProvided"]/value'
	     , OTHER_REQ_INCEN_REQD VARCHAR2(5) PATH './item[id="otherReqIncentiveRequired"]/value'
	     , OTHER_REQ_DOC_PRVD VARCHAR2(5) PATH './item[id="otherReqDocumentationProvided"]/value'
	     , HRS_RVW_CERT VARCHAR2(100) PATH './item[id="hrSpecialistReviewCertification"]/value'
	     , HRS_NOT_SPT_RSN VARCHAR2(100) PATH './item[id="hrSpecialistNotSupportReason"]/value'
	     , RVW_HRS VARCHAR2(100) PATH './item[id="reviewHRSpecialist"]/value'
	     , HRS_RVW_DATE VARCHAR2(10) PATH './item[id="hrSpecialistReviewDate"]/value'
	     , RCMD_GRADE VARCHAR2(5) PATH './item[id="reviewRcmdGrade"]/value'
	     , RCMD_STEP VARCHAR2(5) PATH './item[id="reviewRcmdStep"]/value'
	     , RCMD_SALARY_PER_ANNUM VARCHAR2(20) PATH './item[id="reviewRcmdSalaryPerAnnum"]/value'
	     , RCMD_LOCALITY_PAY_SCALE VARCHAR2(200) PATH './item[id="reviewRcmdLocalityPayScale"]/value'
	     , RCMD_INC_DEC_AMOUNT VARCHAR2(20) PATH './item[id="reviewRcmdIncDecAmount"]/value'
	     , RCMD_PERC_DIFF VARCHAR2(10) PATH './item[id="reviewRcmdPercentageDifference"]/value'
	     , OHC_APPRO_REQ VARCHAR2(5) PATH './item[id="requireOHCApproval"]/value'
	     -- OHC Director
	     , RCMD_APPRO_OHC_NAME VARCHAR2(100) PATH './item[id="reviewRcmdApprovalOHCDirector"]/value/name'
	     , RCMD_APPRO_OHC_EMAIL VARCHAR2(100) PATH './item[id="reviewRcmdApprovalOHCDirector"]/value/email'
	     , RCMD_APPRO_OHC_ID VARCHAR2(10) PATH './item[id="reviewRcmdApprovalOHCDirector"]/value/id'
	     , RVW_REMARKS VARCHAR2(500) PATH './item[id="samReviewRemarks"]/value'
	     -- Approvals
	     , APPROVAL_SO_VALUE VARCHAR2(10) PATH './item[id="approvalSOValue"]/value'
	     , APPROVAL_SO_ACTING VARCHAR2(10) PATH './item[id="approvalSOActing"]/value'
	     , APPROVAL_SO VARCHAR2(100) PATH './item[id="approvalSO"]/value'
	     , APPROVAL_SO_RESP_DATE VARCHAR2(10) PATH './item[id="approvalSOResponseDate"]/value'
	     , APPROVAL_COC_VALUE VARCHAR2(10) PATH './item[id="approvalCOCValue"]/value'
	     , APPROVAL_COC_ACTING VARCHAR2(10) PATH './item[id="approvalCOCActing"]/value'
	     , APPROVAL_COC VARCHAR2(100) PATH './item[id="approvalCOC"]/value'
	     , APPROVAL_COC_RESP_DATE VARCHAR2(10) PATH './item[id="approvalCOCResponseDate"]/value'
	     , APPROVAL_DGHO_VALUE VARCHAR2(10) PATH './item[id="approvalDGHOValue"]/value'
	     , APPROVAL_DGHO_ACTING VARCHAR2(10) PATH './item[id="approvalDGHOActing"]/value'
	     , APPROVAL_DGHO VARCHAR2(100) PATH './item[id="approvalDGHO"]/value'
	     , APPROVAL_DGHO_RESP_DATE VARCHAR2(10) PATH './item[id="approvalDGHOResponseDate"]/value'
	     , APPROVAL_TABG_VALUE VARCHAR2(10) PATH './item[id="approvalTABGValue"]/value'
	     , APPROVAL_TABG_ACTING VARCHAR2(10) PATH './item[id="approvalTABGActing"]/value'
	     , APPROVAL_TABG VARCHAR2(100) PATH './item[id="approvalTABG"]/value'
	     , APPROVAL_TABG_RESP_DATE VARCHAR2(10) PATH './item[id="approvalTABGResponseDate"]/value'
	     , APPROVAL_OHC_VALUE VARCHAR2(10) PATH './item[id="approvalOHCValue"]/value'
	     , APPROVAL_OHC_Acting VARCHAR2(10) PATH './item[id="approvalOHCActing"]/value'
	     , APPROVAL_OHC VARCHAR2(100) PATH './item[id="approvalOHC"]/value'
	     , APPROVAL_OHC_RESP_DATE VARCHAR2(10) PATH './item[id="approvalOHCResponseDate"]/value'
	     , APPROVER_NOTES VARCHAR2(500) PATH './item[id="approverNotes"]/value'
	     ) X
WHERE FD.FORM_TYPE = 'CMSINCENTIVES'
;
/


CREATE OR REPLACE VIEW VW_INCENTIVES_LE AS

SELECT FD.PROCID AS PROC_ID, X.*
FROM TBL_FORM_DTL FD,
     XMLTABLE('/formData/items' PASSING FD.FIELD_DATA COLUMNS
	     -- Details
	     ---- Center/Office/Consortium Director
	     COC_NAME VARCHAR2(100) PATH './item[id="lecocDirector"]/value/name'
	     , COC_EMAIL VARCHAR2(100) PATH './item[id="lecocDirector"]/value/email'
	     , COC_ID VARCHAR2(10) PATH './item[id="lecocDirector"]/value/id'
	     , COC_TITLE VARCHAR2(100) PATH './item[id="lecocDirector"]/value/title'
	     , INIT_ANN_LA_RATE VARCHAR2(10) PATH './item[id="initialOfferedAnnualLeaveAccrualRate"]/value'
	     , SUPPORT_LE VARCHAR2(5) PATH './item[id="supportLE"]/value'
	     , PROPS_ANN_LA_RATE VARCHAR2(10) PATH './item[id="proposedAnnualLeaveAccrualRate"]/value'
	     , TOTAL_CREDITABLE_YEARS NUMBER(10) PATH './item[id="totalCreditableServiceYears"]/value'
	     , TOTAL_CREDITABLE_MONTHS NUMBER(10) PATH './item[id="totalCreditableServiceMonths"]/value'
	     -- Justification
		 , JUSTIFICATION_LASTMOD_NAME VARCHAR2(100) PATH './item[id="currentUser"]/value'
		 , JUSTIFICATION_LASTMOD_ID VARCHAR2(10) PATH './item[id="currentUserId"]/value'
		 , JUSTIFICATION_MOD_REASON VARCHAR2(200) PATH './item[id="leJustificationModificationReason"]/value'
		 , JUSTIFICATION_MOD_SUMMARY VARCHAR2(500) PATH './item[id="leJustificationModificationSummary"]/value'
		 , JUSTIFICATION_MODIFIER_NAME VARCHAR2(100) PATH './item[id="leJustificationModifier"]/value'
		 , JUSTIFICATION_MODIFIER_ID VARCHAR2(10) PATH './item[id="leJustificationModifierId"]/value'
		 , JUSTIFICATION_MODIFIED_DATE VARCHAR2(20) PATH './item[id="leJustificationModified"]/value'
	     , JUSTIFICATION_SKILL_EXP VARCHAR2(4000) PATH './item[id="justificationSkillAndExperience"]/value'
	     , JUSTIFICATION_AGENCY_GOAL VARCHAR2(4000) PATH './item[id="justificationAgencyMissionOrPerformanceGoal"]/value'
	     -- Review
	     , SELECTEE_ELIGIBILITY VARCHAR2(100) PATH './item[id="leSelecteeEligibility"]/value'
	     , HRS_RVW_CERT VARCHAR2(100) PATH './item[id="hrSpecialistLEReviewCertification"]/value'
	     , HRS_NOT_SPT_RSN VARCHAR2(100) PATH './item[id="hrSpecialistLENotSupportReason"]/value'
	     , RVW_HRS VARCHAR2(100) PATH './item[id="leReviewHRSpecialist"]/value'
	     , HRS_RVW_DATE VARCHAR2(10) PATH './item[id="hrSpecialistLEReviewDate"]/value'
	     , RCMD_LA_RATE VARCHAR2(10) PATH './item[id="rcmdAnnualLeaveAccrualRate"]/value'
	     -- Approvals
	     , APPROVAL_SO_VALUE VARCHAR2(10) PATH './item[id="leApprovalSOValue"]/value'
	     , APPROVAL_SO_ACTING VARCHAR2(10) PATH './item[id="leApprovalSOActing"]/value'
	     , APPROVAL_SO VARCHAR2(100) PATH './item[id="leApprovalSO"]/value'
	     , APPROVAL_SO_RESP_DATE VARCHAR2(10) PATH './item[id="leApprovalSOResponseDate"]/value'
	     , APPROVAL_COC_VALUE VARCHAR2(10) PATH './item[id="leApprovalCOCValue"]/value'
	     , APPROVAL_COC_ACTING VARCHAR2(10) PATH './item[id="leApprovalCOCActing"]/value'
	     , APPROVAL_COC VARCHAR2(100) PATH './item[id="leApprovalCOC"]/value'
	     , APPROVAL_COC_RESP_DATE VARCHAR2(10) PATH './item[id="leApprovalCOCResponseDate"]/value'
	     , APPROVAL_DGHO_VALUE VARCHAR2(10) PATH './item[id="leApprovalDGHOValue"]/value'
	     , APPROVAL_DGHO_ACTING VARCHAR2(10) PATH './item[id="leApprovalDGHOActing"]/value'
	     , APPROVAL_DGHO VARCHAR2(100) PATH './item[id="leApprovalDGHO"]/value'
	     , APPROVAL_DGHO_RESP_DATE VARCHAR2(10) PATH './item[id="leApprovalDGHOResponseDate"]/value'
	     , APPROVAL_TABG_VALUE VARCHAR2(10) PATH './item[id="leApprovalTABGValue"]/value'
	     , APPROVAL_TABG_ACTING VARCHAR2(10) PATH './item[id="leApprovalTABGActing"]/value'
	     , APPROVAL_TABG VARCHAR2(100) PATH './item[id="leApprovalTABG"]/value'
	     , APPROVAL_TABG_RESP_DATE VARCHAR2(10) PATH './item[id="leApprovalTABGResponseDate"]/value'
	     , APPROVER_NOTES VARCHAR2(500) PATH './item[id="leApproverNotes"]/value'
	     ) X
WHERE FD.FORM_TYPE = 'CMSINCENTIVES'
;
/

CREATE OR REPLACE VIEW VW_INCENTIVES_LE_CRED AS

SELECT FD.PROCID AS PROC_ID, 
	x.SEQ_NUM,
	x.START_DATE,
	x.END_DATE, 
	x.WORK_SCHEDULE, 
	x.POS_TITLE, 
	NVL(x.CALCULATED_YEARS,0) AS CALCULATED_YEARS, 
	NVL(x.CALCULATED_MONTHS,0) AS CALCULATED_MONTHS, 
	NVL(x.CREDITABLE_YEARS,0) AS CREDITABLE_YEARS, 
	NVL(x.CREDITABLE_MONTHS,0) AS CREDITABLE_MONTHS
FROM TBL_FORM_DTL FD,
	 XMLTABLE('/formData/items/item[id="creditableNonFederalServices"]/value' PASSING FD.FIELD_DATA COLUMNS
		SEQ_NUM FOR ORDINALITY,
		START_DATE			VARCHAR2(10) PATH './startDate',
		END_DATE			VARCHAR2(10) PATH './endDate',
		WORK_SCHEDULE		VARCHAR2(15) PATH './workSchedule',
		POS_TITLE			VARCHAR2(140) PATH './positionTitle',
		CALCULATED_YEARS	NUMBER(10) PATH './calculatedTime/years',
		CALCULATED_MONTHS	NUMBER(10) PATH './calculatedTime/months',
		CREDITABLE_YEARS	NUMBER(10) PATH './creditableTime/years',
		CREDITABLE_MONTHS	NUMBER(10) PATH './creditableTime/months'
	) X
WHERE FD.FORM_TYPE = 'CMSINCENTIVES'
;
/

create or replace PROCEDURE SP_UPDATE_INCENTIVES_COM_TABLE
  (
    I_PROCID            IN      NUMBER
  )
IS
    V_XMLREC_CNT                                    INTEGER := 0;
    V_XMLDOC                                        XMLTYPE;
    V_SERIES                                        VARCHAR2(140);
    V_TYPE_OF_APPOINTMENT_SELECT                    VARCHAR2(20);
BEGIN

    --DBMS_OUTPUT.PUT_LINE('SP_UPDATE_INCENTIVES_SAM_TBL2');
    --DBMS_OUTPUT.PUT_LINE('I_PROCID=' || TO_CHAR(I_PROCID));
	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN

        SELECT COUNT(*)
          INTO V_XMLREC_CNT
          FROM TBL_FORM_DTL
         WHERE PROCID = I_PROCID;

        IF V_XMLREC_CNT > 0 THEN
			--DBMS_OUTPUT.PUT_LINE('RECORD FOUND PROCID=' || TO_CHAR(I_PROCID));

			MERGE INTO INCENTIVES_COM TRG
			USING
			(
                SELECT FD.PROCID AS PROC_ID
                        , X.INCEN_TYPE
                        , X.REQ_NUM
                        , X.REQ_TYPE
                        , TO_DATE(regexp_replace(X."REQ_DATE", '[^0-9|/]', ''), 'yyyy/mm/dd hh24:mi:ss') as REQ_DATE
                        , X.ADMIN_CODE
                        , X.ORG_NAME
                        , X.CANDI_NAME
                        , X.CANDI_FIRST
                        , X.CANDI_MIDDLE
                        , X.CANDI_LAST
                        , X.SO_NAME
                        , X.SO_EMAIL
                        , X.SO_ID
                        , X.XO1_NAME
                        , X.XO1_EMAIL
                        , X.XO1_ID
                        , X.XO2_NAME
                        , X.XO2_EMAIL
                        , X.XO2_ID
                        , X.XO3_NAME
                        , X.XO3_EMAIL
                        , X.XO3_ID
                        , X.HRL1_NAME
                        , X.HRL1_EMAIL
                        , X.HRL1_ID
                        , X.HRL2_NAME
                        , X.HRL2_EMAIL
                        , X.HRL2_ID
                        , X.HRL3_NAME
                        , X.HRL3_EMAIL
                        , X.HRL3_ID
                        , X.HRS1_NAME
                        , X.HRS1_EMAIL
                        , X.HRS1_ID
                        , X.HRS2_NAME
                        , X.HRS2_EMAIL
                        , X.HRS2_ID
                        , X.DGHO_NAME
                        , X.DGHO_EMAIL
                        , X.DGHO_ID
                        , X.TABG_NAME
                        , X.TABG_EMAIL
                        , X.TABG_ID
                        , X.POS_TITLE
                        , X.PAY_PLAN
                        , X.SERIES
                        , X.GRADE
                        , X.POS_DESC_NUM
                        , X.TYPE_OF_APPT
                        , X.DS_STATE
                        , X.DS_CITY
                        , X.CANCEL_RESAON
                        , X.CANCEL_USER_NAME
                        , X.CANCEL_USER_ID
                        , X.SO_TITLE
                        , X.SS_NAME
                        , X.SS_EMAIL
                        , X.SS_ID
                        , X.VACANCY_NUMBER
                    FROM TBL_FORM_DTL FD,
                         XMLTABLE('/formData/items' PASSING FD.FIELD_DATA COLUMNS
                         INCEN_TYPE VARCHAR2(10) PATH './item[id="incentiveType"]/value'
                         , REQ_NUM VARCHAR2(15) PATH './item[id="requestNumber"]/value'
                         , REQ_TYPE VARCHAR2(20) PATH './item[id="requestType"]/value'
                         , REQ_DATE VARCHAR2(10) PATH './item[id="requestDate"]/value'
                         , ADMIN_CODE VARCHAR2(10) PATH './item[id="administrativeCode"]/value'
                         , ORG_NAME VARCHAR2(100) PATH './item[id="organizationName"]/value'
                         -- candidate
                         , CANDI_NAME VARCHAR2(150) PATH './item[id="candidateName"]/value'
                         , CANDI_FIRST VARCHAR2(50) PATH './item[id="candiFirstName"]/value'
                         , CANDI_MIDDLE VARCHAR2(50) PATH './item[id="candiMiddleName"]/value'
                         , CANDI_LAST VARCHAR2(50) PATH './item[id="candiLastName"]/value'
                         -- selectingOfficial
                         , SO_NAME VARCHAR2(100) PATH './item[id="selectingOfficial"]/value/name'
                         , SO_EMAIL VARCHAR2(100) PATH './item[id="selectingOfficial"]/value/email'
                         , SO_ID VARCHAR2(10) PATH './item[id="selectingOfficial"]/value/id'
                         , SO_TITLE VARCHAR2(100) PATH './item[id="selectingOfficial"]/value/title'
                         -- executiveOfficers
                         , XO1_NAME VARCHAR2(100) PATH './item[id="executiveOfficers"]/value[1]/name'
                         , XO1_EMAIL VARCHAR2(100) PATH './item[id="executiveOfficers"]/value[1]/email'
                         , XO1_ID VARCHAR2(10) PATH './item[id="executiveOfficers"]/value[1]/id'
                         , XO2_NAME VARCHAR2(100) PATH './item[id="executiveOfficers"]/value[2]/name'
                         , XO2_EMAIL VARCHAR2(100) PATH './item[id="executiveOfficers"]/value[2]/email'
                         , XO2_ID VARCHAR2(10) PATH './item[id="executiveOfficers"]/value[2]/id'
                         , XO3_NAME VARCHAR2(100) PATH './item[id="executiveOfficers"]/value[3]/name'
                         , XO3_EMAIL VARCHAR2(100) PATH './item[id="executiveOfficers"]/value[3]/email'
                         , XO3_ID VARCHAR2(10) PATH './item[id="executiveOfficers"]/value[3]/id'
                         -- hrLiaisons
                         , HRL1_NAME VARCHAR2(100) PATH './item[id="hrLiaisons"]/value[1]/name'
                         , HRL1_EMAIL VARCHAR2(100) PATH './item[id="hrLiaisons"]/value[1]/email'
                         , HRL1_ID VARCHAR2(10) PATH './item[id="hrLiaisons"]/value[1]/id'
                         , HRL2_NAME VARCHAR2(100) PATH './item[id="hrLiaisons"]/value[2]/name'
                         , HRL2_EMAIL VARCHAR2(100) PATH './item[id="hrLiaisons"]/value[2]/email'
                         , HRL2_ID VARCHAR2(10) PATH './item[id="hrLiaisons"]/value[2]/id'
                         , HRL3_NAME VARCHAR2(100) PATH './item[id="hrLiaisons"]/value[3]/name'
                         , HRL3_EMAIL VARCHAR2(100) PATH './item[id="hrLiaisons"]/value[3]/email'
                         , HRL3_ID VARCHAR2(10) PATH './item[id="hrLiaisons"]/value[3]/id'
                         -- hrSpecialist
                         , HRS1_NAME VARCHAR2(100) PATH './item[id="hrSpecialist"]/value/name'
                         , HRS1_EMAIL VARCHAR2(100) PATH './item[id="hrSpecialist"]/value/email'
                         , HRS1_ID VARCHAR2(10) PATH './item[id="hrSpecialist"]/value/id'
                         -- hrSpecialist2
                         , HRS2_NAME VARCHAR2(100) PATH './item[id="hrSpecialist2"]/value/name'
                         , HRS2_EMAIL VARCHAR2(100) PATH './item[id="hrSpecialist2"]/value/email'
                         , HRS2_ID VARCHAR2(10) PATH './item[id="hrSpecialist2"]/value/id'
                         -- TABG Division Director
                         , DGHO_NAME VARCHAR2(100) PATH './item[id="dghoDirector"]/value/name'
                         , DGHO_EMAIL VARCHAR2(100) PATH './item[id="dghoDirector"]/value/email'
                         , DGHO_ID VARCHAR2(10) PATH './item[id="dghoDirector"]/value/id'
                         -- TABG Director
                         , TABG_NAME VARCHAR2(100) PATH './item[id="tabgDirector"]/value/name'
                         , TABG_EMAIL VARCHAR2(100) PATH './item[id="tabgDirector"]/value/email'
                         , TABG_ID VARCHAR2(10) PATH './item[id="tabgDirector"]/value/id'
                         --	 STAFFING SPECIALIST	
                         , SS_NAME VARCHAR2(100) PATH './item[id="staffingSpecialist"]/value/name'
                         , SS_EMAIL VARCHAR2(100) PATH './item[id="staffingSpecialist"]/value/email'
                         , SS_ID VARCHAR2(10) PATH './item[id="staffingSpecialist"]/value/id'
                         -- position
                         , POS_TITLE VARCHAR2(140) PATH './item[id="positionTitle"]/value'
                         , PAY_PLAN VARCHAR2(5) PATH './item[id="payPlan"]/value'
                         , SERIES VARCHAR2(140) PATH './item[id="series"]/value'  --!!!
                         , GRADE VARCHAR2(5) PATH './item[id="grade"]/value'
                         , POS_DESC_NUM VARCHAR2(20) PATH './item[id="posDescNumber"]/value'
                         , TYPE_OF_APPT VARCHAR2(20) PATH './item[id="typeOfAppointment"]/value' --!!!
                         -- dutyStation
                         , DS_STATE VARCHAR2(2) PATH './item[id="dutyStation"]/value[1]/state'
                         , DS_CITY VARCHAR2(50) PATH './item[id="dutyStation"]/value[1]/city'
                         -- cancellation
                         , CANCEL_RESAON VARCHAR2(25) PATH './item[id="cancellationReason"]/value'
                         , CANCEL_USER_NAME VARCHAR2(100) PATH './item[id="cancellationUser"]/value/name'
                         , CANCEL_USER_ID VARCHAR2(10) PATH './item[id="cancellationUser"]/value/id'
                         --vacancy number
                         , VACANCY_NUMBER  NUMBER(10) PATH './item[id="vacancyNumber"]/value'
                        ) X
                    WHERE FD.PROCID = I_PROCID
			) SRC ON (SRC.PROC_ID = TRG.PROC_ID)
            WHEN MATCHED THEN UPDATE SET
                        TRG.INCEN_TYPE = SRC.INCEN_TYPE
                        ,TRG.REQ_NUM = SRC.REQ_NUM
                        ,TRG.REQ_TYPE = SRC.REQ_TYPE
                        ,TRG.REQ_DATE = SRC.REQ_DATE
                        ,TRG.ADMIN_CODE = SRC.ADMIN_CODE
                        ,TRG.ORG_NAME = SRC.ORG_NAME
                        ,TRG.CANDI_NAME = SRC.CANDI_NAME
                        ,TRG.CANDI_FIRST = SRC.CANDI_FIRST
                        ,TRG.CANDI_MIDDLE = SRC.CANDI_MIDDLE
                        ,TRG.CANDI_LAST = SRC.CANDI_LAST
                        ,TRG.SO_NAME = SRC.SO_NAME
                        ,TRG.SO_EMAIL = SRC.SO_EMAIL
                        ,TRG.SO_ID = SRC.SO_ID
                        ,TRG.XO1_NAME = SRC.XO1_NAME
                        ,TRG.XO1_EMAIL = SRC.XO1_EMAIL
                        ,TRG.XO1_ID = SRC.XO1_ID
                        ,TRG.XO2_NAME = SRC.XO2_NAME
                        ,TRG.XO2_EMAIL = SRC.XO2_EMAIL
                        ,TRG.XO2_ID = SRC.XO2_ID
                        ,TRG.XO3_NAME = SRC.XO3_NAME
                        ,TRG.XO3_EMAIL = SRC.XO3_EMAIL
                        ,TRG.XO3_ID = SRC.XO3_ID
                        ,TRG.HRL1_NAME = SRC.HRL1_NAME
                        ,TRG.HRL1_EMAIL = SRC.HRL1_EMAIL
                        ,TRG.HRL1_ID = SRC.HRL1_ID
                        ,TRG.HRL2_NAME = SRC.HRL2_NAME
                        ,TRG.HRL2_EMAIL = SRC.HRL2_EMAIL
                        ,TRG.HRL2_ID = SRC.HRL2_ID
                        ,TRG.HRL3_NAME = SRC.HRL3_NAME
                        ,TRG.HRL3_EMAIL = SRC.HRL3_EMAIL
                        ,TRG.HRL3_ID = SRC.HRL3_ID
                        ,TRG.HRS1_NAME = SRC.HRS1_NAME
                        ,TRG.HRS1_EMAIL = SRC.HRS1_EMAIL
                        ,TRG.HRS1_ID = SRC.HRS1_ID
                        ,TRG.HRS2_NAME = SRC.HRS2_NAME
                        ,TRG.HRS2_EMAIL = SRC.HRS2_EMAIL
                        ,TRG.HRS2_ID = SRC.HRS2_ID
                        ,TRG.DGHO_NAME = SRC.DGHO_NAME
                        ,TRG.DGHO_EMAIL = SRC.DGHO_EMAIL
                        ,TRG.DGHO_ID = SRC.DGHO_ID
                        ,TRG.TABG_NAME = SRC.TABG_NAME
                        ,TRG.TABG_EMAIL = SRC.TABG_EMAIL
                        ,TRG.TABG_ID = SRC.TABG_ID
                        ,TRG.POS_TITLE = SRC.POS_TITLE
                        ,TRG.PAY_PLAN = SRC.PAY_PLAN
                        ,TRG.SERIES = SRC.SERIES
                        ,TRG.GRADE = SRC.GRADE
                        ,TRG.POS_DESC_NUM = SRC.POS_DESC_NUM
                        ,TRG.TYPE_OF_APPT = SRC.TYPE_OF_APPT
                        ,TRG.DS_STATE = SRC.DS_STATE
                        ,TRG.DS_CITY = SRC.DS_CITY
                        ,TRG.CANCEL_RESAON = SRC.CANCEL_RESAON
                        ,TRG.CANCEL_USER_NAME = SRC.CANCEL_USER_NAME
                        ,TRG.CANCEL_USER_ID = SRC.CANCEL_USER_ID
                        ,TRG.SO_TITLE = SRC.SO_TITLE
                        ,TRG.SS_NAME = SRC.SS_NAME
                        ,TRG.SS_EMAIL = SRC.SS_EMAIL
                        ,TRG.SS_ID = SRC.SS_ID
                        ,TRG.VACANCY_NUMBER = SRC.VACANCY_NUMBER
            WHEN NOT MATCHED THEN INSERT (
                        TRG.PROC_ID
                        ,TRG.INCEN_TYPE
                        ,TRG.REQ_NUM
                        ,TRG.REQ_TYPE
                        ,TRG.REQ_DATE
                        ,TRG.ADMIN_CODE
                        ,TRG.ORG_NAME
                        ,TRG.CANDI_NAME
                        ,TRG.CANDI_FIRST
                        ,TRG.CANDI_MIDDLE
                        ,TRG.CANDI_LAST
                        ,TRG.SO_NAME
                        ,TRG.SO_EMAIL
                        ,TRG.SO_ID
                        ,TRG.XO1_NAME
                        ,TRG.XO1_EMAIL
                        ,TRG.XO1_ID
                        ,TRG.XO2_NAME
                        ,TRG.XO2_EMAIL
                        ,TRG.XO2_ID
                        ,TRG.XO3_NAME
                        ,TRG.XO3_EMAIL
                        ,TRG.XO3_ID
                        ,TRG.HRL1_NAME
                        ,TRG.HRL1_EMAIL
                        ,TRG.HRL1_ID
                        ,TRG.HRL2_NAME
                        ,TRG.HRL2_EMAIL
                        ,TRG.HRL2_ID
                        ,TRG.HRL3_NAME
                        ,TRG.HRL3_EMAIL
                        ,TRG.HRL3_ID
                        ,TRG.HRS1_NAME
                        ,TRG.HRS1_EMAIL
                        ,TRG.HRS1_ID
                        ,TRG.HRS2_NAME
                        ,TRG.HRS2_EMAIL
                        ,TRG.HRS2_ID
                        ,TRG.DGHO_NAME
                        ,TRG.DGHO_EMAIL
                        ,TRG.DGHO_ID
                        ,TRG.TABG_NAME
                        ,TRG.TABG_EMAIL
                        ,TRG.TABG_ID
                        ,TRG.POS_TITLE
                        ,TRG.PAY_PLAN
                        ,TRG.SERIES
                        ,TRG.GRADE
                        ,TRG.POS_DESC_NUM
                        ,TRG.TYPE_OF_APPT
                        ,TRG.DS_STATE
                        ,TRG.DS_CITY
                        ,TRG.CANCEL_RESAON
                        ,TRG.CANCEL_USER_NAME
                        ,TRG.CANCEL_USER_ID
                        ,TRG.SO_TITLE
                        ,TRG.SS_NAME
                        ,TRG.SS_EMAIL
                        ,TRG.SS_ID
                        ,TRG.VACANCY_NUMBER
                    ) VALUES (
                        SRC.PROC_ID
                        ,SRC.INCEN_TYPE
                        ,SRC.REQ_NUM
                        ,SRC.REQ_TYPE
                        ,SRC.REQ_DATE
                        ,SRC.ADMIN_CODE
                        ,SRC.ORG_NAME
                        ,SRC.CANDI_NAME
                        ,SRC.CANDI_FIRST
                        ,SRC.CANDI_MIDDLE
                        ,SRC.CANDI_LAST
                        ,SRC.SO_NAME
                        ,SRC.SO_EMAIL
                        ,SRC.SO_ID
                        ,SRC.XO1_NAME
                        ,SRC.XO1_EMAIL
                        ,SRC.XO1_ID
                        ,SRC.XO2_NAME
                        ,SRC.XO2_EMAIL
                        ,SRC.XO2_ID
                        ,SRC.XO3_NAME
                        ,SRC.XO3_EMAIL
                        ,SRC.XO3_ID
                        ,SRC.HRL1_NAME
                        ,SRC.HRL1_EMAIL
                        ,SRC.HRL1_ID
                        ,SRC.HRL2_NAME
                        ,SRC.HRL2_EMAIL
                        ,SRC.HRL2_ID
                        ,SRC.HRL3_NAME
                        ,SRC.HRL3_EMAIL
                        ,SRC.HRL3_ID
                        ,SRC.HRS1_NAME
                        ,SRC.HRS1_EMAIL
                        ,SRC.HRS1_ID
                        ,SRC.HRS2_NAME
                        ,SRC.HRS2_EMAIL
                        ,SRC.HRS2_ID
                        ,SRC.DGHO_NAME
                        ,SRC.DGHO_EMAIL
                        ,SRC.DGHO_ID
                        ,SRC.TABG_NAME
                        ,SRC.TABG_EMAIL
                        ,SRC.TABG_ID
                        ,SRC.POS_TITLE
                        ,SRC.PAY_PLAN
                        ,SRC.SERIES
                        ,SRC.GRADE
                        ,SRC.POS_DESC_NUM
                        ,SRC.TYPE_OF_APPT
                        ,SRC.DS_STATE
                        ,SRC.DS_CITY
                        ,SRC.CANCEL_RESAON
                        ,SRC.CANCEL_USER_NAME
                        ,SRC.CANCEL_USER_ID
                        ,SRC.SO_TITLE
                        ,SRC.SS_NAME
                        ,SRC.SS_EMAIL
                        ,SRC.SS_ID
                        ,SRC.VACANCY_NUMBER
                    );

                /*
                
                -- GET XML VALUE;
                SELECT FIELD_DATA
                  INTO V_XMLDOC
                  FROM TBL_FORM_DTL
                 WHERE PROCID = I_PROCID;         

                SELECT -- FN_EXTRACT_STR(V_XMLDOC, 'series') AS SERIES
                       --, FN_EXTRACT_STR(V_XMLDOC, 'typeOfAppointment') AS TYPE_OF_APPOINTMENT
                       FN_EXTRACT_STR(V_XMLDOC, 'seriesSelect ') AS SERIES_SELECT
                       ,FN_EXTRACT_STR(V_XMLDOC, 'typeOfAppointmentSelect') AS TYPE_OF_APPOINTMENT_SELECT 
                  INTO V_SERIES
                        ,V_TYPE_OF_APPOINTMENT_SELECT
                FROM DUAL;

                IF V_SERIES IS NOT NULL AND TRIM(V_SERIES) != '' THEN
                    UPDATE INCENTIVES_COM
                       SET SERIES = SUBSTR(V_SERIES, 1, 140)
                     WHERE PROC_ID = I_PROCID;
                END IF;
                
                IF V_TYPE_OF_APPOINTMENT_SELECT IS NOT NULL AND TRIM(V_TYPE_OF_APPOINTMENT_SELECT) != '' THEN
                    UPDATE INCENTIVES_COM
                       SET TYPE_OF_APPT = SUBSTR(V_TYPE_OF_APPOINTMENT_SELECT, 1, 20)
                     WHERE PROC_ID = I_PROCID;
                END IF;
               
               */
        END IF;
    END IF;

    EXCEPTION
    WHEN OTHERS THEN
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION=' || SUBSTR(SQLERRM, 1, 200));
          --err_code := SQLCODE;
          --err_msg := SUBSTR(SQLERRM, 1, 200);    
    SP_ERROR_LOG();
  END;
/


create or replace PROCEDURE SP_UPDATE_INCENTIVES_PCA_TABLE
  (
    I_PROCID            IN      NUMBER
  )
IS
    V_XMLREC_CNT                INTEGER := 0;
BEGIN

    --DBMS_OUTPUT.PUT_LINE('SP_UPDATE_INCENTIVES_LE_TBL2');
    --DBMS_OUTPUT.PUT_LINE('I_PROCID=' || TO_CHAR(I_PROCID));
	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN

        SELECT COUNT(*)
          INTO V_XMLREC_CNT
          FROM TBL_FORM_DTL
         WHERE PROCID = I_PROCID;
        
        IF V_XMLREC_CNT > 0 THEN
			--DBMS_OUTPUT.PUT_LINE('RECORD FOUND PROCID=' || TO_CHAR(I_PROCID));
            
			MERGE INTO INCENTIVES_PCA TRG
			USING
			(
                     SELECT FD.PROCID AS PROC_ID
                            , X.PCA_TYPE
                            , X.CANDI_AGREE
                            , X.CP_NAME
                            , X.CP_EMAIL
                            , X.CP_ID
                            , X.OFM_NAME
                            , X.OFM_EMAIL
                            , X.OFM_ID
                            , X.ADMIN_APPROVAL_REQ
                            , X.OHC_NAME
                            , X.OHC_EMAIL
                            , X.OHC_ID
                            , X.OADMIN_NAME
                            , X.OADMIN_EMAIL
                            , X.OADMIN_ID
                            , X.WORK_SCHEDULE
                            , X.HOURS_PER_WEEK
                            , X.BD_CERT_REQ
                            , X.LIC_INFO
                            , X.LIC_STATE1_STATE
                            , X.LIC_STATE1_NAME
                            , X.LIC_STATE1_EXP_DATE
                            , X.LIC_STATE2_STATE
                            , X.LIC_STATE2_NAME
                            , X.LIC_STATE2_EXP_DATE
                            , X.BD_CERT_SPEC1
                            , X.BD_CERT_SPEC2
                            , X.BD_CERT_SPEC3
                            , X.BD_CERT_SPEC4
                            , X.BD_CERT_SPEC5
                            , X.BD_CERT_SPEC6
                            , X.BD_CERT_SPEC7
                            , X.BD_CERT_SPEC8
                            , X.BD_CERT_SPEC9
                            , X.BD_CERT_SPEC_OTHER
                            , X.LEN_SERVED
                            , X.LEN_SERVICE
                            , X.ALW_CATEGORY
                            , X.ALW_BD_CERT
                            , X.ALW_MULTI_YEAR_AGMT
                            , X.ALW_MISSION_SC
                            , X.ALW_TOTAL
                            , X.ALW_TOTAL_PAYABLE
                            , X.DETAIL_REMARKS
                            , X.RVW_SO_NAME
                            , X.RVW_SO_ID
                            , X.RVW_SO_DATE
                            , X.RVW_DGHO_NAME
                            , X.RVW_DGHO_ID
                            , X.RVW_DGHO_DATE
                            , X.RVW_CP_NAME
                            , X.RVW_CP_ID
                            , X.RVW_CP_DATE
                            , X.RVW_OFM_NAME
                            , X.RVW_OFM_ID
                            , X.RVW_OFM_DATE
                            , X.RVW_TABG_NAME
                            , X.RVW_TABG_ID
                            , X.RVW_TABG_DATE
                            , X.RVW_OHC_NAME
                            , X.RVW_OHC_ID
                            , X.RVW_OHC_DATE
                            , X.APPROVAL_TABG_NAME
                            , X.APPROVAL_TABG_ID
                            , X.APPROVAL_TABG_DATE
                            , X.APPROVAL_OADMIN_NAME
                            , X.APPROVAL_OADMIN_ID
                            , X.APPROVAL_OADMIN_DATE
                            -- new columsn for data type fixes
                            , TO_DATE(regexp_replace(X."LIC_STATE1_EXP_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as LIC_STATE1_EXP_DATE_D
                            , TO_DATE(regexp_replace(X."LIC_STATE2_EXP_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as LIC_STATE2_EXP_DATE_D
                            , regexp_replace(X."ALW_CATEGORY", '[^0-9|.]', '') as ALW_CATEGORY_N
                            , regexp_replace(X."ALW_BD_CERT", '[^0-9|.]', '') as ALW_BD_CERT_N
                            , regexp_replace(X."ALW_MULTI_YEAR_AGMT", '[^0-9|.]', '') as ALW_MULTI_YEAR_AGMT_N
                            , regexp_replace(X."ALW_MISSION_SC", '[^0-9|.]', '') as ALW_MISSION_SC_N
                            , regexp_replace(X."ALW_TOTAL", '[^0-9|.]', '') as ALW_TOTAL_N
                            , regexp_replace(X."ALW_TOTAL_PAYABLE", '[^0-9|.]', '') as ALW_TOTAL_PAYABLE_N
                            , TO_DATE(regexp_replace(X."RVW_SO_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as RVW_SO_DATE_D
                            , TO_DATE(regexp_replace(X."RVW_DGHO_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as RVW_DGHO_DATE_D
                            , TO_DATE(regexp_replace(X."RVW_CP_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as RVW_CP_DATE_D
                            , TO_DATE(regexp_replace(X."RVW_OFM_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as RVW_OFM_DATE_D
                            , TO_DATE(regexp_replace(X."RVW_TABG_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as RVW_TABG_DATE_D
                            , TO_DATE(regexp_replace(X."RVW_OHC_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as RVW_OHC_DATE_D
                            , TO_DATE(regexp_replace(X."APPROVAL_TABG_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as APPROVAL_TABG_DATE_D
                            , TO_DATE(regexp_replace(X."APPROVAL_OADMIN_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as APPROVAL_OADMIN_DATE_D
                            
                    FROM TBL_FORM_DTL FD,
                         XMLTABLE('/formData/items' PASSING FD.FIELD_DATA COLUMNS
                        PCA_TYPE VARCHAR2(10) PATH './item[id="pcaType"]/value'
                        , CANDI_AGREE VARCHAR2(5) PATH './item[id="candiAgreeRenewal"]/value'
                        -- Chief Physician
                        , CP_NAME VARCHAR2(100) PATH './item[id="chiefPhysician"]/value/name'
                        , CP_EMAIL VARCHAR2(100) PATH './item[id="chiefPhysician"]/value/email'
                        , CP_ID VARCHAR2(10) PATH './item[id="chiefPhysician"]/value/id'
                        -- OFM Director
                        , OFM_NAME VARCHAR2(100) PATH './item[id="ofmDirector"]/value/name'
                        , OFM_EMAIL VARCHAR2(100) PATH './item[id="ofmDirector"]/value/email'
                        , OFM_ID VARCHAR2(10) PATH './item[id="ofmDirector"]/value/id'
                        -- Does the PCA require the Office of the Administrator approval?
                        , ADMIN_APPROVAL_REQ VARCHAR2(5) PATH './item[id="requireAdminApproval"]/value'
                        -- OHC Director
                        , OHC_NAME VARCHAR2(100) PATH './item[id="ohcDirector"]/value/name'
                        , OHC_EMAIL VARCHAR2(100) PATH './item[id="ohcDirector"]/value/email'
                        , OHC_ID VARCHAR2(10) PATH './item[id="ohcDirector"]/value/id'
                        -- Administrator
                        , OADMIN_NAME VARCHAR2(100) PATH './item[id="offAdmin"]/value/name'
                        , OADMIN_EMAIL VARCHAR2(100) PATH './item[id="offAdmin"]/value/email'
                        , OADMIN_ID VARCHAR2(10) PATH './item[id="offAdmin"]/value/id'
                        -- Position
                        , WORK_SCHEDULE VARCHAR2(15) PATH './item[id="workSchedule"]/value'
                        , HOURS_PER_WEEK VARCHAR2(5) PATH './item[id="hoursPerWeek"]/value'
                        , BD_CERT_REQ VARCHAR2(5) PATH './item[id="requireBoardCert"]/value'
                        , LIC_INFO VARCHAR2(140) PATH './item[id="licenseInfo"]/value'
                        -- licenseState
                        , LIC_STATE1_STATE VARCHAR2(2) PATH './item[id="licenseState"]/value[1]/state'
                        , LIC_STATE1_NAME VARCHAR2(50) PATH './item[id="licenseState"]/value[1]/name'
                        , LIC_STATE1_EXP_DATE VARCHAR2(10) PATH './item[id="licenseState"]/value[1]/expDate'
                        , LIC_STATE2_STATE VARCHAR2(2) PATH './item[id="licenseState"]/value[2]/state'
                        , LIC_STATE2_NAME VARCHAR2(50) PATH './item[id="licenseState"]/value[2]/name'
                        , LIC_STATE2_EXP_DATE VARCHAR2(10) PATH './item[id="licenseState"]/value[2]/expDate'
                        -- boardCertSpecialty
                        , BD_CERT_SPEC1 VARCHAR2(30) PATH './item[id="boardCertSpecialty"]/value[1]/text'
                        , BD_CERT_SPEC2 VARCHAR2(30) PATH './item[id="boardCertSpecialty"]/value[2]/text'
                        , BD_CERT_SPEC3 VARCHAR2(30) PATH './item[id="boardCertSpecialty"]/value[3]/text'
                        , BD_CERT_SPEC4 VARCHAR2(30) PATH './item[id="boardCertSpecialty"]/value[4]/text'
                        , BD_CERT_SPEC5 VARCHAR2(30) PATH './item[id="boardCertSpecialty"]/value[5]/text'
                        , BD_CERT_SPEC6 VARCHAR2(30) PATH './item[id="boardCertSpecialty"]/value[6]/text'
                        , BD_CERT_SPEC7 VARCHAR2(30) PATH './item[id="boardCertSpecialty"]/value[7]/text'
                        , BD_CERT_SPEC8 VARCHAR2(30) PATH './item[id="boardCertSpecialty"]/value[8]/text'
                        , BD_CERT_SPEC9 VARCHAR2(30) PATH './item[id="boardCertSpecialty"]/value[9]/text'
                        , BD_CERT_SPEC_OTHER VARCHAR2(140) PATH './item[id="otherSpeciality"]/value'
                        -- allowance
                        , LEN_SERVED VARCHAR2(25) PATH './item[id="lengthOfServed"]/value'
                        , LEN_SERVICE VARCHAR2(2) PATH './item[id="lengthOfService"]/value'
                        , ALW_CATEGORY VARCHAR2(15) PATH './item[id="allowanceCategory"]/value'
                        , ALW_BD_CERT VARCHAR2(15) PATH './item[id="allowanceBoardCertification"]/value'
                        , ALW_MULTI_YEAR_AGMT VARCHAR2(15) PATH './item[id="allowanceMultiYearAgreement"]/value'
                        , ALW_MISSION_SC VARCHAR2(15) PATH './item[id="allowanceMissionSpecificCriteria"]/value'
                        , ALW_TOTAL VARCHAR2(15) PATH './item[id="allowanceTotal"]/value'
                        , ALW_TOTAL_PAYABLE VARCHAR2(15) PATH './item[id="totalPayablePCACalculation"]/value'
                        -- remarks
                        , DETAIL_REMARKS VARCHAR2(500) PATH './item[id="detailRemarks"]/value'
                        -- Review
                        , RVW_SO_NAME VARCHAR2(100) PATH './item[id="reviewSO"]/value'
                        , RVW_SO_ID VARCHAR2(10) PATH './item[id="reviewSOId"]/value'
                        , RVW_SO_DATE VARCHAR2(10) PATH './item[id="reviewSODate"]/value'
                        , RVW_DGHO_NAME VARCHAR2(100) PATH './item[id="reviewDGHO"]/value'
                        , RVW_DGHO_ID VARCHAR2(10) PATH './item[id="reviewDGHOId"]/value'
                        , RVW_DGHO_DATE VARCHAR2(10) PATH './item[id="reviewDGHODate"]/value'
                        , RVW_CP_NAME VARCHAR2(100) PATH './item[id="reviewCP"]/value'
                        , RVW_CP_ID VARCHAR2(10) PATH './item[id="reviewCPId"]/value'
                        , RVW_CP_DATE VARCHAR2(10) PATH './item[id="reviewCPDate"]/value'
                        , RVW_OFM_NAME VARCHAR2(100) PATH './item[id="reviewOFM"]/value'
                        , RVW_OFM_ID VARCHAR2(10) PATH './item[id="reviewOFMId"]/value'
                        , RVW_OFM_DATE VARCHAR2(10) PATH './item[id="reviewOFMDate"]/value'
                        , RVW_TABG_NAME VARCHAR2(100) PATH './item[id="reviewTABG"]/value'
                        , RVW_TABG_ID VARCHAR2(10) PATH './item[id="reviewTABGId"]/value'
                        , RVW_TABG_DATE VARCHAR2(10) PATH './item[id="reviewTABGDate"]/value'
                        , RVW_OHC_NAME VARCHAR2(100) PATH './item[id="reviewOHC"]/value'
                        , RVW_OHC_ID VARCHAR2(10) PATH './item[id="reviewOHCId"]/value'
                        , RVW_OHC_DATE VARCHAR2(10) PATH './item[id="reviewOHCDate"]/value'
                        -- Approvals
                        , APPROVAL_TABG_NAME VARCHAR2(100) PATH './item[id="pcaApproveTABG"]/value'
                        , APPROVAL_TABG_ID VARCHAR2(10) PATH './item[id="pcaApproveTABGId"]/value'
                        , APPROVAL_TABG_DATE VARCHAR2(10) PATH './item[id="pcaApproveTABGDate"]/value'
                        , APPROVAL_OADMIN_NAME VARCHAR2(100) PATH './item[id="pcaApproveADM"]/value'
                        , APPROVAL_OADMIN_ID VARCHAR2(10) PATH './item[id="pcaApproveADMId"]/value'
                        , APPROVAL_OADMIN_DATE VARCHAR2(10) PATH './item[id="pcaApproveADMDate"]/value'
                        ) X
                    WHERE FD.PROCID = I_PROCID
			) SRC ON (SRC.PROC_ID = TRG.PROC_ID)
            WHEN MATCHED THEN UPDATE SET
                        TRG.PCA_TYPE = SRC.PCA_TYPE
                        ,TRG.CANDI_AGREE = SRC.CANDI_AGREE
                        ,TRG.CP_NAME = SRC.CP_NAME
                        ,TRG.CP_EMAIL = SRC.CP_EMAIL
                        ,TRG.CP_ID = SRC.CP_ID
                        ,TRG.OFM_NAME = SRC.OFM_NAME
                        ,TRG.OFM_EMAIL = SRC.OFM_EMAIL
                        ,TRG.OFM_ID = SRC.OFM_ID
                        ,TRG.ADMIN_APPROVAL_REQ = SRC.ADMIN_APPROVAL_REQ
                        ,TRG.OHC_NAME = SRC.OHC_NAME
                        ,TRG.OHC_EMAIL = SRC.OHC_EMAIL
                        ,TRG.OHC_ID = SRC.OHC_ID
                        ,TRG.OADMIN_NAME = SRC.OADMIN_NAME
                        ,TRG.OADMIN_EMAIL = SRC.OADMIN_EMAIL
                        ,TRG.OADMIN_ID = SRC.OADMIN_ID
                        ,TRG.WORK_SCHEDULE = SRC.WORK_SCHEDULE
                        ,TRG.HOURS_PER_WEEK = SRC.HOURS_PER_WEEK
                        ,TRG.BD_CERT_REQ = SRC.BD_CERT_REQ
                        ,TRG.LIC_INFO = SRC.LIC_INFO
                        ,TRG.LIC_STATE1_STATE = SRC.LIC_STATE1_STATE
                        ,TRG.LIC_STATE1_NAME = SRC.LIC_STATE1_NAME
                        ,TRG.LIC_STATE1_EXP_DATE = SRC.LIC_STATE1_EXP_DATE
                        ,TRG.LIC_STATE2_STATE = SRC.LIC_STATE2_STATE
                        ,TRG.LIC_STATE2_NAME = SRC.LIC_STATE2_NAME
                        ,TRG.LIC_STATE2_EXP_DATE = SRC.LIC_STATE2_EXP_DATE
                        ,TRG.BD_CERT_SPEC1 = SRC.BD_CERT_SPEC1
                        ,TRG.BD_CERT_SPEC2 = SRC.BD_CERT_SPEC2
                        ,TRG.BD_CERT_SPEC3 = SRC.BD_CERT_SPEC3
                        ,TRG.BD_CERT_SPEC4 = SRC.BD_CERT_SPEC4
                        ,TRG.BD_CERT_SPEC5 = SRC.BD_CERT_SPEC5
                        ,TRG.BD_CERT_SPEC6 = SRC.BD_CERT_SPEC6
                        ,TRG.BD_CERT_SPEC7 = SRC.BD_CERT_SPEC7
                        ,TRG.BD_CERT_SPEC8 = SRC.BD_CERT_SPEC8
                        ,TRG.BD_CERT_SPEC9 = SRC.BD_CERT_SPEC9
                        ,TRG.BD_CERT_SPEC_OTHER = SRC.BD_CERT_SPEC_OTHER
                        ,TRG.LEN_SERVED = SRC.LEN_SERVED
                        ,TRG.LEN_SERVICE = SRC.LEN_SERVICE
                        ,TRG.ALW_CATEGORY = SRC.ALW_CATEGORY
                        ,TRG.ALW_BD_CERT = SRC.ALW_BD_CERT
                        ,TRG.ALW_MULTI_YEAR_AGMT = SRC.ALW_MULTI_YEAR_AGMT
                        ,TRG.ALW_MISSION_SC = SRC.ALW_MISSION_SC
                        ,TRG.ALW_TOTAL = SRC.ALW_TOTAL
                        ,TRG.ALW_TOTAL_PAYABLE = SRC.ALW_TOTAL_PAYABLE
                        ,TRG.DETAIL_REMARKS = SRC.DETAIL_REMARKS
                        ,TRG.RVW_SO_NAME = SRC.RVW_SO_NAME
                        ,TRG.RVW_SO_ID = SRC.RVW_SO_ID
                        ,TRG.RVW_SO_DATE = SRC.RVW_SO_DATE
                        ,TRG.RVW_DGHO_NAME = SRC.RVW_DGHO_NAME
                        ,TRG.RVW_DGHO_ID = SRC.RVW_DGHO_ID
                        ,TRG.RVW_DGHO_DATE = SRC.RVW_DGHO_DATE
                        ,TRG.RVW_CP_NAME = SRC.RVW_CP_NAME
                        ,TRG.RVW_CP_ID = SRC.RVW_CP_ID
                        ,TRG.RVW_CP_DATE = SRC.RVW_CP_DATE
                        ,TRG.RVW_OFM_NAME = SRC.RVW_OFM_NAME
                        ,TRG.RVW_OFM_ID = SRC.RVW_OFM_ID
                        ,TRG.RVW_OFM_DATE = SRC.RVW_OFM_DATE
                        ,TRG.RVW_TABG_NAME = SRC.RVW_TABG_NAME
                        ,TRG.RVW_TABG_ID = SRC.RVW_TABG_ID
                        ,TRG.RVW_TABG_DATE = SRC.RVW_TABG_DATE
                        ,TRG.RVW_OHC_NAME = SRC.RVW_OHC_NAME
                        ,TRG.RVW_OHC_ID = SRC.RVW_OHC_ID
                        ,TRG.RVW_OHC_DATE = SRC.RVW_OHC_DATE
                        ,TRG.APPROVAL_TABG_NAME = SRC.APPROVAL_TABG_NAME
                        ,TRG.APPROVAL_TABG_ID = SRC.APPROVAL_TABG_ID
                        ,TRG.APPROVAL_TABG_DATE = SRC.APPROVAL_TABG_DATE
                        ,TRG.APPROVAL_OADMIN_NAME = SRC.APPROVAL_OADMIN_NAME
                        ,TRG.APPROVAL_OADMIN_ID = SRC.APPROVAL_OADMIN_ID
                        ,TRG.APPROVAL_OADMIN_DATE = SRC.APPROVAL_OADMIN_DATE
                        ------------
                        ,TRG.LIC_STATE1_EXP_DATE_D = SRC.LIC_STATE1_EXP_DATE_D
                        ,TRG.LIC_STATE2_EXP_DATE_D = SRC.LIC_STATE2_EXP_DATE_D
                        ,TRG.ALW_CATEGORY_N = SRC.ALW_CATEGORY_N
                        ,TRG.ALW_BD_CERT_N = SRC.ALW_BD_CERT_N
                        ,TRG.ALW_MULTI_YEAR_AGMT_N = SRC.ALW_MULTI_YEAR_AGMT_N
                        ,TRG.ALW_MISSION_SC_N = SRC.ALW_MISSION_SC_N
                        ,TRG.ALW_TOTAL_N = SRC.ALW_TOTAL_N
                        ,TRG.ALW_TOTAL_PAYABLE_N = SRC.ALW_TOTAL_PAYABLE_N
                        ,TRG.RVW_SO_DATE_D = SRC.RVW_SO_DATE_D
                        ,TRG.RVW_DGHO_DATE_D = SRC.RVW_DGHO_DATE_D
                        ,TRG.RVW_CP_DATE_D = SRC.RVW_CP_DATE_D
                        ,TRG.RVW_OFM_DATE_D = SRC.RVW_OFM_DATE_D
                        ,TRG.RVW_TABG_DATE_D = SRC.RVW_TABG_DATE_D
                        ,TRG.RVW_OHC_DATE_D = SRC.RVW_OHC_DATE_D
                        ,TRG.APPROVAL_TABG_DATE_D = SRC.APPROVAL_TABG_DATE_D
                        ,TRG.APPROVAL_OADMIN_DATE_D = SRC.APPROVAL_OADMIN_DATE_D                  
            WHEN NOT MATCHED THEN INSERT (
                            TRG.PROC_ID
                            ,TRG.PCA_TYPE
                            ,TRG.CANDI_AGREE
                            ,TRG.CP_NAME
                            ,TRG.CP_EMAIL
                            ,TRG.CP_ID
                            ,TRG.OFM_NAME
                            ,TRG.OFM_EMAIL
                            ,TRG.OFM_ID
                            ,TRG.ADMIN_APPROVAL_REQ
                            ,TRG.OHC_NAME
                            ,TRG.OHC_EMAIL
                            ,TRG.OHC_ID
                            ,TRG.OADMIN_NAME
                            ,TRG.OADMIN_EMAIL
                            ,TRG.OADMIN_ID
                            ,TRG.WORK_SCHEDULE
                            ,TRG.HOURS_PER_WEEK
                            ,TRG.BD_CERT_REQ
                            ,TRG.LIC_INFO
                            ,TRG.LIC_STATE1_STATE
                            ,TRG.LIC_STATE1_NAME
                            ,TRG.LIC_STATE1_EXP_DATE
                            ,TRG.LIC_STATE2_STATE
                            ,TRG.LIC_STATE2_NAME
                            ,TRG.LIC_STATE2_EXP_DATE
                            ,TRG.BD_CERT_SPEC1
                            ,TRG.BD_CERT_SPEC2
                            ,TRG.BD_CERT_SPEC3
                            ,TRG.BD_CERT_SPEC4
                            ,TRG.BD_CERT_SPEC5
                            ,TRG.BD_CERT_SPEC6
                            ,TRG.BD_CERT_SPEC7
                            ,TRG.BD_CERT_SPEC8
                            ,TRG.BD_CERT_SPEC9
                            ,TRG.BD_CERT_SPEC_OTHER
                            ,TRG.LEN_SERVED
                            ,TRG.LEN_SERVICE
                            ,TRG.ALW_CATEGORY
                            ,TRG.ALW_BD_CERT
                            ,TRG.ALW_MULTI_YEAR_AGMT
                            ,TRG.ALW_MISSION_SC
                            ,TRG.ALW_TOTAL
                            ,TRG.ALW_TOTAL_PAYABLE
                            ,TRG.DETAIL_REMARKS
                            ,TRG.RVW_SO_NAME
                            ,TRG.RVW_SO_ID
                            ,TRG.RVW_SO_DATE
                            ,TRG.RVW_DGHO_NAME
                            ,TRG.RVW_DGHO_ID
                            ,TRG.RVW_DGHO_DATE
                            ,TRG.RVW_CP_NAME
                            ,TRG.RVW_CP_ID
                            ,TRG.RVW_CP_DATE
                            ,TRG.RVW_OFM_NAME
                            ,TRG.RVW_OFM_ID
                            ,TRG.RVW_OFM_DATE
                            ,TRG.RVW_TABG_NAME
                            ,TRG.RVW_TABG_ID
                            ,TRG.RVW_TABG_DATE
                            ,TRG.RVW_OHC_NAME
                            ,TRG.RVW_OHC_ID
                            ,TRG.RVW_OHC_DATE
                            ,TRG.APPROVAL_TABG_NAME
                            ,TRG.APPROVAL_TABG_ID
                            ,TRG.APPROVAL_TABG_DATE
                            ,TRG.APPROVAL_OADMIN_NAME
                            ,TRG.APPROVAL_OADMIN_ID
                            ,TRG.APPROVAL_OADMIN_DATE
                            ----------
                            ,TRG.LIC_STATE1_EXP_DATE_D
                            ,TRG.LIC_STATE2_EXP_DATE_D
                            ,TRG.ALW_CATEGORY_N
                            ,TRG.ALW_BD_CERT_N
                            ,TRG.ALW_MULTI_YEAR_AGMT_N
                            ,TRG.ALW_MISSION_SC_N
                            ,TRG.ALW_TOTAL_N
                            ,TRG.ALW_TOTAL_PAYABLE_N
                            ,TRG.RVW_SO_DATE_D
                            ,TRG.RVW_DGHO_DATE_D
                            ,TRG.RVW_CP_DATE_D
                            ,TRG.RVW_OFM_DATE_D
                            ,TRG.RVW_TABG_DATE_D
                            ,TRG.RVW_OHC_DATE_D
                            ,TRG.APPROVAL_TABG_DATE_D
                            ,TRG.APPROVAL_OADMIN_DATE_D                             
                        ) VALUES (
                            SRC.PROC_ID
                            ,SRC.PCA_TYPE
                            ,SRC.CANDI_AGREE
                            ,SRC.CP_NAME
                            ,SRC.CP_EMAIL
                            ,SRC.CP_ID
                            ,SRC.OFM_NAME
                            ,SRC.OFM_EMAIL
                            ,SRC.OFM_ID
                            ,SRC.ADMIN_APPROVAL_REQ
                            ,SRC.OHC_NAME
                            ,SRC.OHC_EMAIL
                            ,SRC.OHC_ID
                            ,SRC.OADMIN_NAME
                            ,SRC.OADMIN_EMAIL
                            ,SRC.OADMIN_ID
                            ,SRC.WORK_SCHEDULE
                            ,SRC.HOURS_PER_WEEK
                            ,SRC.BD_CERT_REQ
                            ,SRC.LIC_INFO
                            ,SRC.LIC_STATE1_STATE
                            ,SRC.LIC_STATE1_NAME
                            ,SRC.LIC_STATE1_EXP_DATE
                            ,SRC.LIC_STATE2_STATE
                            ,SRC.LIC_STATE2_NAME
                            ,SRC.LIC_STATE2_EXP_DATE
                            ,SRC.BD_CERT_SPEC1
                            ,SRC.BD_CERT_SPEC2
                            ,SRC.BD_CERT_SPEC3
                            ,SRC.BD_CERT_SPEC4
                            ,SRC.BD_CERT_SPEC5
                            ,SRC.BD_CERT_SPEC6
                            ,SRC.BD_CERT_SPEC7
                            ,SRC.BD_CERT_SPEC8
                            ,SRC.BD_CERT_SPEC9
                            ,SRC.BD_CERT_SPEC_OTHER
                            ,SRC.LEN_SERVED
                            ,SRC.LEN_SERVICE
                            ,SRC.ALW_CATEGORY
                            ,SRC.ALW_BD_CERT
                            ,SRC.ALW_MULTI_YEAR_AGMT
                            ,SRC.ALW_MISSION_SC
                            ,SRC.ALW_TOTAL
                            ,SRC.ALW_TOTAL_PAYABLE
                            ,SRC.DETAIL_REMARKS
                            ,SRC.RVW_SO_NAME
                            ,SRC.RVW_SO_ID
                            ,SRC.RVW_SO_DATE
                            ,SRC.RVW_DGHO_NAME
                            ,SRC.RVW_DGHO_ID
                            ,SRC.RVW_DGHO_DATE
                            ,SRC.RVW_CP_NAME
                            ,SRC.RVW_CP_ID
                            ,SRC.RVW_CP_DATE
                            ,SRC.RVW_OFM_NAME
                            ,SRC.RVW_OFM_ID
                            ,SRC.RVW_OFM_DATE
                            ,SRC.RVW_TABG_NAME
                            ,SRC.RVW_TABG_ID
                            ,SRC.RVW_TABG_DATE
                            ,SRC.RVW_OHC_NAME
                            ,SRC.RVW_OHC_ID
                            ,SRC.RVW_OHC_DATE
                            ,SRC.APPROVAL_TABG_NAME
                            ,SRC.APPROVAL_TABG_ID
                            ,SRC.APPROVAL_TABG_DATE
                            ,SRC.APPROVAL_OADMIN_NAME
                            ,SRC.APPROVAL_OADMIN_ID
                            ,SRC.APPROVAL_OADMIN_DATE
                            ----------
                            ,SRC.LIC_STATE1_EXP_DATE_D
                            ,SRC.LIC_STATE2_EXP_DATE_D
                            ,SRC.ALW_CATEGORY_N
                            ,SRC.ALW_BD_CERT_N
                            ,SRC.ALW_MULTI_YEAR_AGMT_N
                            ,SRC.ALW_MISSION_SC_N
                            ,SRC.ALW_TOTAL_N
                            ,SRC.ALW_TOTAL_PAYABLE_N
                            ,SRC.RVW_SO_DATE_D
                            ,SRC.RVW_DGHO_DATE_D
                            ,SRC.RVW_CP_DATE_D
                            ,SRC.RVW_OFM_DATE_D
                            ,SRC.RVW_TABG_DATE_D
                            ,SRC.RVW_OHC_DATE_D
                            ,SRC.APPROVAL_TABG_DATE_D
                            ,SRC.APPROVAL_OADMIN_DATE_D                       
                        );
        END IF;

    END IF;
        
    EXCEPTION
    WHEN OTHERS THEN
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION=' || SUBSTR(SQLERRM, 1, 200));
          --err_code := SQLCODE;
          --err_msg := SUBSTR(SQLERRM, 1, 200);    
    SP_ERROR_LOG();
  END;
/


create or replace PROCEDURE SP_UPDATE_INCENTIVES_PDP_TABLE
(
	I_PROCID            IN      NUMBER
)
IS
    V_XMLDOC                            XMLTYPE;
    V_CLINICAL_SPCLTY_BOARD_CERT        VARCHAR2(2000);
    V_INCENTIVES_APPRVD_BY_TABG         VARCHAR2(2000);
BEGIN
    --DBMS_OUTPUT.PUT_LINE('SP_UPDATE_INCENTIVES_PDP_TBL2');
    --DBMS_OUTPUT.PUT_LINE('I_PROCID=' || TO_CHAR(I_PROCID));

	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN

        SELECT FIELD_DATA
          INTO V_XMLDOC
          FROM TBL_FORM_DTL
         WHERE PROCID = I_PROCID;
         
        --DBMS_OUTPUT.PUT_LINE('DELETE INCENTIVES_PDP');
		DELETE INCENTIVES_PDP WHERE PROC_ID = I_PROCID;

        --DBMS_OUTPUT.PUT_LINE('INSERT INTO INCENTIVES_PDP');
		INSERT INTO INCENTIVES_PDP (
                            PROC_ID
                            ,PDP_TYPE
                            ,PDP_TYPE_OTHER
                            ,EXISTINGREQUEST
                            ,WORK_SCHEDULE
                            ,HOURS_PER_WEEK
                            ,BD_CERT_REQ
                            ,LIC_INFO
                            ,MARKET_PAY_RATE
                            ,CURRENT_FED_EMPLOYEE
                            ,LEVEL_RESPONSIBILITY
                            ,EXEC_RESP_AMT_REQUESTED
                            ,EXEC_RESP_JUSTIF_DETERMIN_AMT
                            ,EXPT_QF_Q1_AMT_REQUESTED
                            ,EXPT_QF_Q1_JUSTIF_DETERMIN_AMT
                            ,EXPT_QF_Q2_AMT_REQUESTED
                            ,EXPT_QF_Q2_JUSTIF_DETERMIN_AMT
                            ,EXPT_QF_Q3_AMT_REQUESTED
                            ,EXPT_QF_Q3_JUSTIF_DETERMIN_AMT
                            ,EXPT_QF_Q4_AMT_REQUESTED
                            ,EXPT_QF_Q4_JUSTIF_DETERMIN_AMT
                            ,EXPT_QF_Q5_AMT_REQUESTED
                            ,EXPT_QF_Q5_JUSTIF_DETERMIN_AMT
                            ,TOTAL_AMT_EXPT_QUALIFICATIONS
                            ,CURRENT_PAY_GRADE
                            ,CURRENT_PAY_STEP
                            ,CURRENT_PAY_POSITION_TITLE
                            ,CURRENT_PAY_TABLE
                            ,CURRENT_PAY_TIER
                            --,CLINICAL_SPECIALTY_BOARD_CERT --converted multiple value type
                          ,OTHER_SPECIALTY
                            ,CURRENT_PAY_RECRUITMENT
                            ,CURRENT_PAY_RELOCATION
                            ,CURRENT_PAY_RETENTION
                            ,CURRENT_PAY_3R_TOTAL
                            ,CURRENT_PAY_BASE
                            ,CURRENT_PAY_LOCALITY_MARKET
                            ,CURRENT_PAY_TOTAL_ANNUAL_PAY
                            ,CURRENT_PAY_TOTAL_COMPENSATION
                           ,CURRENT_PAY_NOTES
                           ,PROPOSED_PAY_STEP
                            ,PROPOSED_PAY_TABLE
                            ,PROPOSED_PAY_TIER
                            ,PROPOSED_PAY_RECRUITMENT
                            ,PROPOSED_PAY_RELOCATION
                            ,PROPOSED_PAY_RETENTION
                            ,PROPOSED_PAY_TOTAL_3R
                            ,PROPOSED_GS_BASE_PAY,PROPOSED_MARKET_PAY
                            ,PROPOSED_TOTAL_ANNUAL_PAY
                            ,PROPOSED_TOTAL_ANNUAL_COMPENS
                            --,INCENTIVES_APPROVED_BY_TABG --converted multiple value type
                            ,PROPOSED_PAY_NOTES
                            --Panel Tab
                             ,DATE_OF_MEETING
                            ,DATE_OF_RECOMMENDATION --added
                            ,QUORUM_REACHED
                            ,PANEL_CURRENT_SALARY
                            ,PANEL_PDP_AMOUNT
                            ,PANEL_RECOMM_ANNUAL_SALARY

                            ,SELECTING_OFFICIAL_REVIEWER
                            ,SELECTING_OFFICIAL_REVIEW_DT
                            ,TABG_DIVISION_DIR_REVIEW_DT
                            ,CMS_CHIEF_PHYSICIAN_REVIEW_DT
                            ,OFM_REVIEW_DATE
                            ,TABG_REVIEW_DATE
                            ,OHC_REVIEW_DATE
                            ,ADMINISTRATOR_APPROVAL_DATE 
                            )
                    SELECT FD.PROCID AS PROC_ID
                            ,X."PDP_TYPE"
                            ,X."PDP_TYPE_OTHER"
                            ,X."EXISTINGREQUEST"
                            ,X."WORK_SCHEDULE"
                            ,X."HOURS_PER_WEEK"
                            ,X."BD_CERT_REQ"
                            ,X."LIC_INFO"
                            ,X."MARKET_PAY_RATE"
                            ,X."CURRENT_FED_EMPLOYEE"
                            ,X."LEVEL_RESPONSIBILITY"
                            ,regexp_replace(X."EXEC_RESP_AMT_REQUESTED", '[^0-9|.]', '')
                            ,X."EXEC_RESP_JUSTIF_DETERMIN_AMT"
                            ,regexp_replace(X."EXPT_QF_Q1_AMT_REQUESTED", '[^0-9|.]', '')
                            ,X."EXPT_QF_Q1_JUSTIF_DETERMIN_AMT"
                            ,regexp_replace(X."EXPT_QF_Q2_AMT_REQUESTED", '[^0-9|.]', '')
                            ,X."EXPT_QF_Q2_JUSTIF_DETERMIN_AMT"
                            ,regexp_replace(X."EXPT_QF_Q3_AMT_REQUESTED", '[^0-9|.]', '')
                            ,X."EXPT_QF_Q3_JUSTIF_DETERMIN_AMT"
                            ,regexp_replace(X."EXPT_QF_Q4_AMT_REQUESTED", '[^0-9|.]', '')
                            ,X."EXPT_QF_Q4_JUSTIF_DETERMIN_AMT"
                            ,regexp_replace(X."EXPT_QF_Q5_AMT_REQUESTED", '[^0-9|.]', '')
                            ,X."EXPT_QF_Q5_JUSTIF_DETERMIN_AMT"
                           ,regexp_replace(X."TOTAL_AMT_EXPT_QUALIFICATIONS", '[^0-9|.]', '')
                            ,X."CURRENT_PAY_GRADE"
                            ,X."CURRENT_PAY_STEP"
                            ,X."CURRENT_PAY_POSITION_TITLE"
                            ,X."CURRENT_PAY_TABLE"
                            ,X."CURRENT_PAY_TIER"
                            --,X."CLINICAL_SPECIALTY_BOARD_CERT" --converted multiple value type
                            ,X."OTHER_SPECIALTY"
                            ,regexp_replace(X."CURRENT_PAY_RECRUITMENT", '[^0-9|.]', '')
                            ,regexp_replace(X."CURRENT_PAY_RELOCATION", '[^0-9|.]', '')
                            ,regexp_replace(X."CURRENT_PAY_RETENTION", '[^0-9|.]', '')
                            ,regexp_replace(X."CURRENT_PAY_3R_TOTAL", '[^0-9|.]', '')
                            ,regexp_replace(X."CURRENT_PAY_BASE", '[^0-9|.]', '')
                            ,regexp_replace(X."CURRENT_PAY_LOCALITY_MARKET", '[^0-9|.]', '')
                            ,regexp_replace(X."CURRENT_PAY_TOTAL_ANNUAL_PAY", '[^0-9|.]', '')
                            ,regexp_replace(X."CURRENT_PAY_TOTAL_COMPENSATION", '[^0-9|.]', '')
                            ,X."CURRENT_PAY_NOTES"
                            ,X."PROPOSED_PAY_STEP"
                            ,X."PROPOSED_PAY_TABLE"
                            ,X."PROPOSED_PAY_TIER"
                            ,regexp_replace(X."PROPOSED_PAY_RECRUITMENT", '[^0-9|.]', '')
                            ,regexp_replace(X."PROPOSED_PAY_RELOCATION", '[^0-9|.]', '')
                            ,regexp_replace(X."PROPOSED_PAY_RETENTION", '[^0-9|.]', '')
                            ,regexp_replace(X."PROPOSED_PAY_TOTAL_3R", '[^0-9|.]', '')
                            ,regexp_replace(X."PROPOSED_GS_BASE_PAY", '[^0-9|.]', '')
                            ,regexp_replace(X."PROPOSED_MARKET_PAY", '[^0-9|.]', '')
                            ,regexp_replace(X."PROPOSED_TOTAL_ANNUAL_PAY", '[^0-9|.]', '')
                            ,regexp_replace(X."PROPOSED_TOTAL_ANNUAL_COMPENS", '[^0-9|.]', '')
                            --,X."INCENTIVES_APPROVED_BY_TABG" --converted multiple value type
                            ,X."PROPOSED_PAY_NOTES"
                            --Panel tab
                             ,TO_DATE(regexp_replace(X."DATE_OF_MEETING", '[^0-9|/]', ''), 'mm/dd/yyyy')
                            ,TO_DATE(regexp_replace(X."DATE_OF_RECOMMENDATION", '[^0-9|/]', ''), 'mm/dd/yyyy')
                            ,X."QUORUM_REACHED"
                            ,regexp_replace(X."PANEL_CURRENT_SALARY", '[^0-9|.]', '')
                            ,regexp_replace(X."PANEL_PDP_AMOUNT", '[^0-9|.]', '')
                            ,regexp_replace(X."PANEL_RECOMM_ANNUAL_SALARY", '[^0-9|.]', '') 
                            ,X."SELECTING_OFFICIAL_REVIEWER"
                            ,TO_DATE(regexp_replace(X."SELECTING_OFFICIAL_REVIEW_DT", '[^0-9|/]', ''), 'mm/dd/yyyy')
                            ,TO_DATE(regexp_replace(X."TABG_DIVISION_DIR_REVIEW_DT", '[^0-9|/]', ''), 'mm/dd/yyyy')
                            ,TO_DATE(regexp_replace(X."CMS_CHIEF_PHYSICIAN_REVIEW_DT", '[^0-9|/]', ''), 'mm/dd/yyyy')
                            ,TO_DATE(regexp_replace(X."OFM_REVIEW_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy')
                            ,TO_DATE(regexp_replace(X."TABG_REVIEW_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy')
                            ,TO_DATE(regexp_replace(X."OHC_REVIEW_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy')
                            ,TO_DATE(regexp_replace(X."ADMINISTRATOR_APPROVAL_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') 
                FROM TBL_FORM_DTL FD,
                     XMLTABLE('/formData/items' PASSING FD.FIELD_DATA COLUMNS
                    PDP_TYPE VARCHAR2(18) PATH './item[id="pdpType"]/value'
                    ,PDP_TYPE_OTHER	VARCHAR2(150)PATH './item[id="pdpTypeOther"]/value'
                    ,EXISTINGREQUEST	VARCHAR2(1)PATH './item[id="associatedRequest"]/value'
                    -- Position
                    ,WORK_SCHEDULE        VARCHAR2(15) PATH './item[id="workSchedule"]/value'
                    ,HOURS_PER_WEEK       VARCHAR2(5) PATH './item[id="hoursPerWeek"]/value'
                    ,BD_CERT_REQ          VARCHAR2(5) PATH './item[id="requireBoardCert"]/value'
                    ,LIC_INFO             VARCHAR2(140) PATH './item[id="licenseInfo"]/value'
                    --Details
                    ,MARKET_PAY_RATE VARCHAR2(9) PATH './item[id="marketPayRate"]/value' 
                    ,CURRENT_FED_EMPLOYEE  VARCHAR2(1) PATH './item[id="currentFederalEmployee"]/value' 
                    ,LEVEL_RESPONSIBILITY VARCHAR2(50) PATH './item[id="execRespLevelOfResponsability"]/value'
                    ,EXEC_RESP_AMT_REQUESTED VARCHAR2(50) PATH './item[id="execRespAmountRequested"]/value' 
                    ,EXEC_RESP_JUSTIF_DETERMIN_AMT VARCHAR2(1000) PATH './item[id="execRespJustification"]/value' 
                    ,EXPT_QF_Q1_AMT_REQUESTED VARCHAR2(50) PATH './item[id="excepQualAmountRequested_1"]/value' 
                    ,EXPT_QF_Q1_JUSTIF_DETERMIN_AMT VARCHAR2(1000) PATH './item[id="excepQualJustification_1"]/value' 
                    ,EXPT_QF_Q2_AMT_REQUESTED VARCHAR2(50) PATH './item[id="excepQualAmountRequested_2"]/value' 
                    ,EXPT_QF_Q2_JUSTIF_DETERMIN_AMT VARCHAR2(1000) PATH './item[id="excepQualJustification_2"]/value' 
                    ,EXPT_QF_Q3_AMT_REQUESTED VARCHAR2(50) PATH './item[id="excepQualAmountRequested_3"]/value' 
                    ,EXPT_QF_Q3_JUSTIF_DETERMIN_AMT VARCHAR2(1000) PATH './item[id="excepQualJustification_3"]/value' 
                    ,EXPT_QF_Q4_AMT_REQUESTED VARCHAR2(50) PATH './item[id="excepQualAmountRequested_4"]/value' 
                    ,EXPT_QF_Q4_JUSTIF_DETERMIN_AMT VARCHAR2(1000) PATH './item[id="excepQualJustification_4"]/value' 
                    ,EXPT_QF_Q5_AMT_REQUESTED VARCHAR2(50) PATH './item[id="excepQualAmountRequested_5"]/value' 
                    ,EXPT_QF_Q5_JUSTIF_DETERMIN_AMT VARCHAR2(1000) PATH './item[id="excepQualJustification_5"]/value' 
                    ,TOTAL_AMT_EXPT_QUALIFICATIONS VARCHAR2(50) PATH './item[id="excepQualTotalAmount"]/value'
                    ,CURRENT_PAY_GRADE VARCHAR2(20) PATH './item[id="currentPayInfoGrade"]/value' 
                    ,CURRENT_PAY_STEP VARCHAR2(20) PATH './item[id="currentPayInfoStep"]/value' 
                    ,CURRENT_PAY_POSITION_TITLE VARCHAR2(70) PATH './item[id="currentPayInfoPositionTitle"]/value' 
                    ,CURRENT_PAY_TABLE VARCHAR2(20) PATH './item[id="currentPayInfoTable"]/value' 
                    ,CURRENT_PAY_TIER VARCHAR2(20) PATH './item[id="currentPayInfoTier"]/value' 
                    --,CLINICAL_SPECIALTY_BOARD_CERT VARCHAR2(200) PATH './item[id="currentPayInfoSpecialtyCertification"]/value' --converted multiple value type
                     ,OTHER_SPECIALTY VARCHAR2(140) PATH './item[id="currentPayOtherSpecialty"]/value'
                     ,CURRENT_PAY_RECRUITMENT VARCHAR2(50) PATH './item[id="currentPayInfoRecruitment"]/value' 
                    ,CURRENT_PAY_RELOCATION VARCHAR2(50) PATH './item[id="currentPayInfoRelocation"]/value' 
                    ,CURRENT_PAY_RETENTION VARCHAR2(50) PATH './item[id="currentPayInfoRetention"]/value' 
                    ,CURRENT_PAY_3R_TOTAL VARCHAR2(50) PATH './item[id="currentPayInfoTotal3R"]/value' 
                    ,CURRENT_PAY_BASE VARCHAR2(50) PATH './item[id="currentPayInfoBasePay"]/value' 
                    ,CURRENT_PAY_LOCALITY_MARKET VARCHAR2(50) PATH './item[id="currentPayInfoLocality"]/value' 
                    ,CURRENT_PAY_TOTAL_ANNUAL_PAY VARCHAR2(50) PATH './item[id="currentPayInfoTotalAnnualPay"]/value' 
                    ,CURRENT_PAY_TOTAL_COMPENSATION VARCHAR2(50) PATH './item[id="currentPayInfoTotalAnnualComp"]/value' 
                    ,CURRENT_PAY_NOTES VARCHAR2(500) PATH './item[id="currentPayInfoNotes"]/value' 
                   ,PROPOSED_PAY_STEP VARCHAR2(20) PATH './item[id="proposedPayInfoStep"]/value' 
                    ,PROPOSED_PAY_TABLE VARCHAR2(20) PATH './item[id="proposedPayInfoTable"]/value' 
                    ,PROPOSED_PAY_TIER VARCHAR2(20) PATH './item[id="proposedPayInfoTier"]/value' 
                    ,PROPOSED_PAY_RECRUITMENT VARCHAR2(50) PATH './item[id="proposedPayInfoRecruitment"]/value' 
                    ,PROPOSED_PAY_RELOCATION VARCHAR2(50) PATH './item[id="proposedPayInfoRelocation"]/value' 
                    ,PROPOSED_PAY_RETENTION VARCHAR2(50) PATH './item[id="proposedPayInfoRetention"]/value' 
                    ,PROPOSED_PAY_TOTAL_3R VARCHAR2(50) PATH './item[id="proposedPayInfoTotal3R"]/value' 
                    ,PROPOSED_GS_BASE_PAY VARCHAR2(50) PATH './item[id="proposedPayInfoGSBasePay"]/value' 
                    ,PROPOSED_MARKET_PAY VARCHAR2(50) PATH './item[id="proposedPayInfoMarketPay"]/value' 
                    ,PROPOSED_TOTAL_ANNUAL_PAY VARCHAR2(50) PATH './item[id="proposedPayInfoTotalAnnualPay"]/value'  
                    ,PROPOSED_TOTAL_ANNUAL_COMPENS VARCHAR2(50) PATH './item[id="proposedPayInfoTotalAnnualComp"]/value' 
                    --,INCENTIVES_APPROVED_BY_TABG VARCHAR2(3) PATH './item[id="proposedPayInfoIncentivesApprTABG"]/value' --converted multiple value type
                    ,PROPOSED_PAY_NOTES VARCHAR2(500) PATH './item[id="proposedPayInfoNotes"]/value' 
                    --Panel
                    ,DATE_OF_MEETING VARCHAR2(10) PATH './item[id="panelDateOfMeeting"]/value' 
                    ,DATE_OF_RECOMMENDATION VARCHAR2(10) PATH './item[id="panelDateOfRecommendation"]/value' 
                    ,QUORUM_REACHED VARCHAR2(1) PATH './item[id="selectQuorumReached"]/value'
                    ,PANEL_CURRENT_SALARY VARCHAR2(20) PATH './item[id="panelCurrentSalaryGP"]/value' 
                    ,PANEL_PDP_AMOUNT VARCHAR2(20) PATH './item[id="panelPDPAmount"]/value' 
                    ,PANEL_RECOMM_ANNUAL_SALARY VARCHAR2(20) PATH './item[id="panelRecommendedAnnualSalary"]/value' 
                    --Approval and Review
                    ,SELECTING_OFFICIAL_REVIEWER VARCHAR2(100) PATH './item[id="SELECTING_OFFICIAL_REVIEWER"]/value' 
                    ,SELECTING_OFFICIAL_REVIEW_DT VARCHAR2(10) PATH './item[id="SELECTING_OFFICIAL_REVIEW_DT"]/value' 
                    ,TABG_DIVISION_DIR_REVIEW_DT VARCHAR2(10) PATH './item[id="TABG_DIVISION_DIR_REVIEW_DT"]/value' 
                    ,CMS_CHIEF_PHYSICIAN_REVIEW_DT VARCHAR2(10) PATH './item[id="CMS_CHIEF_PHYSICIAN_REVIEW_DT"]/value' 
                    ,OFM_REVIEW_DATE VARCHAR2(10) PATH './item[id="OFM_REVIEW_DATE"]/value' 
                    ,TABG_REVIEW_DATE VARCHAR2(10) PATH './item[id="TABG_REVIEW_DATE"]/value' 
                    ,OHC_REVIEW_DATE VARCHAR2(10) PATH './item[id="OHC_REVIEW_DATE"]/value' 
                    ,ADMINISTRATOR_APPROVAL_DATE VARCHAR2(10) PATH './item[id="ADMINISTRATOR_APPROVAL_DATE"]/value'
                    ) X
            WHERE FD.PROCID = I_PROCID;

        --------------------
        -- Details Tab / Muti value (used same methods in other workstream implementation).    
        SELECT XMLQUERY('for $i in /formData/items/item[id="currentPayInfoSpecialtyCertification"]/value[string-length(value/text()) > 0] return concat($i/value/text(), ", ")'
               PASSING V_XMLDOC RETURNING CONTENT).GETSTRINGVAL() INTO V_CLINICAL_SPCLTY_BOARD_CERT FROM DUAL;
        V_CLINICAL_SPCLTY_BOARD_CERT := SUBSTR(V_CLINICAL_SPCLTY_BOARD_CERT, 0, LENGTH(V_CLINICAL_SPCLTY_BOARD_CERT)-2);
        --DBMS_OUTPUT.PUT_LINE('V_CLINICAL_SPCLTY_BOARD_CERT=[' || V_CLINICAL_SPCLTY_BOARD_CERT || ']');

        SELECT XMLQUERY('for $i in /formData/items/item[id="proposedPayInfoIncentivesApprTABG"]/value[string-length(value/text()) > 0] return concat($i/value/text(), ", ")'
               PASSING V_XMLDOC RETURNING CONTENT).GETSTRINGVAL() INTO V_INCENTIVES_APPRVD_BY_TABG FROM DUAL;
        V_INCENTIVES_APPRVD_BY_TABG := SUBSTR(V_INCENTIVES_APPRVD_BY_TABG, 0, LENGTH(V_INCENTIVES_APPRVD_BY_TABG)-2);
        --DBMS_OUTPUT.PUT_LINE('V_INCENTIVES_APPRVD_BY_TABG=[' || V_INCENTIVES_APPRVD_BY_TABG || ']');

        UPDATE INCENTIVES_PDP
           SET CLINICAL_SPECIALTY_BOARD_CERT = V_CLINICAL_SPCLTY_BOARD_CERT
               , INCENTIVES_APPROVED_BY_TABG = V_INCENTIVES_APPRVD_BY_TABG
         WHERE PROC_ID = I_PROCID;

        --------------------
        --Panel Tab
        --DBMS_OUTPUT.PUT_LINE('PANEL TAB');
        --DBMS_OUTPUT.PUT_LINE('PANEL TAB-DELETE');
        DELETE FROM HHS_CMS_HR.INCENTIVES_PDP_PANEL
        WHERE PROC_ID = I_PROCID;

        --DBMS_OUTPUT.PUT_LINE('PANEL TAB-INSERT');
        INSERT INTO INCENTIVES_PDP_PANEL
                                (
                                PROC_ID
                                ,SEQ_NUM
                                ,FULL_NAME
                                ,COMPONENT_NAME
                                ,EMAIL
                                ,HHSID
                                ,ADMIN_CODE
                                ,PANEL_ROLE
                                ,VOTING_STATUS
                                ,PANEL_REC_COMP
                                )
                    SELECT FD.PROCID
                           ,ROWNUM
                           ,x.FULL_NAME
                           ,x.COMPONENT_NAME
                           ,x.EMAIL
                           ,x.HHSID
                           ,x.ADMIN_CODE
                           ,x.PANEL_ROLE
                           ,x.VOTING_STATUS
                           ,x.PANEL_REC_COMP        
                    FROM TBL_FORM_DTL FD,
                         XMLTABLE('/formData/items/item[id="panelItems"]/value' PASSING FD.FIELD_DATA COLUMNS
                            FULL_NAME			VARCHAR2(200) PATH './name'
                            ,COMPONENT_NAME		VARCHAR2(200) PATH './component'
                            ,EMAIL		        VARCHAR2(100) PATH './email'
                            ,HHSID		        VARCHAR2(20) PATH './HHSID'
                            ,ADMIN_CODE		    VARCHAR2(20) PATH './adminCode'
                            ,PANEL_ROLE		    VARCHAR2(20) PATH './role'
                            ,VOTING_STATUS		VARCHAR2(50) PATH './votingStatus'
                            ,PANEL_REC_COMP	    VARCHAR2(50) PATH './recCompensation'
                        ) X
                    WHERE FD.PROCID = I_PROCID;

	END IF;

	EXCEPTION
	WHEN OTHERS THEN
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION=' || SUBSTR(SQLERRM, 1, 200));
          --err_code := SQLCODE;
          --err_msg := SUBSTR(SQLERRM, 1, 200);

		SP_ERROR_LOG();
END;

/


create or replace PROCEDURE SP_UPDATE_INCENTIVES_SAM_TABLE
  (
    I_PROCID            IN      NUMBER
  )
IS
    V_XMLREC_CNT                INTEGER := 0;
    V_XMLDOC                    XMLTYPE;
BEGIN

    --DBMS_OUTPUT.PUT_LINE('SP_UPDATE_INCENTIVES_SAM_TBL2');
    --DBMS_OUTPUT.PUT_LINE('I_PROCID=' || TO_CHAR(I_PROCID));
	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN

        SELECT FIELD_DATA
          INTO V_XMLDOC
          FROM TBL_FORM_DTL
         WHERE PROCID = I_PROCID;

        SELECT COUNT(*)
          INTO V_XMLREC_CNT
          FROM TBL_FORM_DTL
         WHERE PROCID = I_PROCID;

        IF V_XMLREC_CNT > 0 THEN
			--DBMS_OUTPUT.PUT_LINE('RECORD FOUND PROCID=' || TO_CHAR(I_PROCID));
            
			MERGE INTO INCENTIVES_SAM TRG
			USING
			(
                SELECT FD.PROCID AS PROC_ID
                        ,X.INIT_SALARY_GRADE
                        ,X.INIT_SALARY_STEP
                        ,X.INIT_SALARY_SALARY_PER_ANNUM
                        ,regexp_replace(X."INIT_SALARY_SALARY_PER_ANNUM", '[^0-9|.]', '') as INIT_SALARY_SALARY_PER_ANNUM_N
                        ,X.INIT_SALARY_LOCALITY_PAY_SCALE
                        ,X.SUPPORT_SAM
                        ,X.RCMD_SALARY_GRADE
                        ,X.RCMD_SALARY_STEP
                        ,X.RCMD_SALARY_SALARY_PER_ANNUM
                        ,regexp_replace(X."RCMD_SALARY_SALARY_PER_ANNUM", '[^0-9|.]', '') as RCMD_SALARY_SALARY_PER_ANNUM_N
                        ,X.RCMD_SALARY_LOCALITY_PAY_SCALE
                        ,X.SELECTEE_SALARY_PER_ANNUM
                        ,regexp_replace(X."SELECTEE_SALARY_PER_ANNUM", '[^0-9|.]', '') as SELECTEE_SALARY_PER_ANNUM_N
                        ,X.SELECTEE_SALARY_TYPE
                        ,X.SELECTEE_BONUS
                        ,regexp_replace(X."SELECTEE_BONUS", '[^0-9|.]', '') as SELECTEE_BONUS_N
                        ,X.SELECTEE_BENEFITS
                        ,X.SELECTEE_TOTAL_COMPENSATION
                        ,regexp_replace(X."SELECTEE_TOTAL_COMPENSATION", '[^0-9|.]', '') as SELECTEE_TOTAL_COMPENSATION_N
                        ,X.SUP_DOC_REQ_DATE
                        ,TO_DATE(regexp_replace(X."SUP_DOC_REQ_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as SUP_DOC_REQ_DATE_D
                        ,X.SUP_DOC_RCV_DATE
                        ,TO_DATE(regexp_replace(X."SUP_DOC_RCV_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as SUP_DOC_RCV_DATE_D
                        ,X.JUSTIFICATION_SUPER_QUAL_DESC
                        ,X.JUSTIFICATION_QUAL_COMP_DESC
                        ,X.JUSTIFICATION_PAY_EQUITY_DESC
                        ,X.JUSTIFICATION_EXIST_PKG_DESC
                        ,X.JUSTIFICATION_EXPLAIN_CONSID
                        ,X.SELECT_MEET_ELIGIBILITY
                        ,X.SELECT_MEET_CRITERIA
                        ,X.SUPERIOR_QUAL_REASON
                        ,X.OTHER_FACTORS
                        ,X.SPL_AGENCY_NEED_RSN
                        ,X.SPL_AGENCY_NEED_RSN_ESS
                        ,X.QUAL_REAPPT
                        ,X.OTHER_EXCEPTS
                        ,X.BASIC_PAY_RATE_FACTOR1
                        ,X.BASIC_PAY_RATE_FACTOR2
                        ,X.BASIC_PAY_RATE_FACTOR3
                        ,X.BASIC_PAY_RATE_FACTOR4
                        ,X.BASIC_PAY_RATE_FACTOR5
                        ,X.BASIC_PAY_RATE_FACTOR6
                        ,X.BASIC_PAY_RATE_FACTOR7
                        ,X.BASIC_PAY_RATE_FACTOR8
                        ,X.BASIC_PAY_RATE_FACTOR9
                        ,X.BASIC_PAY_RATE_FACTOR10
                        ,X.OTHER_RLVNT_FACTOR
                        ,X.OTHER_REQ_JUST_APVD
                        ,X.OTHER_REQ_SUFF_INFO_PRVD
                        ,X.OTHER_REQ_INCEN_REQD
                        ,X.OTHER_REQ_DOC_PRVD
                        ,X.HRS_RVW_CERT
                        ,X.HRS_NOT_SPT_RSN
                        ,X.RVW_HRS
                        ,X.HRS_RVW_DATE
                        ,TO_DATE(regexp_replace(X."HRS_RVW_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as HRS_RVW_DATE_D
                        ,X.RCMD_GRADE
                        ,X.RCMD_STEP
                        ,X.RCMD_SALARY_PER_ANNUM
                        ,regexp_replace(X."RCMD_SALARY_PER_ANNUM", '[^0-9|.]', '') as RCMD_SALARY_PER_ANNUM_N
                        ,X.RCMD_LOCALITY_PAY_SCALE
                        ,X.RCMD_INC_DEC_AMOUNT
                        ,regexp_replace(X."RCMD_INC_DEC_AMOUNT", '[^0-9|.]', '') as RCMD_INC_DEC_AMOUNT_N
                        ,X.RCMD_PERC_DIFF
                        ,X.OHC_APPRO_REQ
                        ,X.RCMD_APPRO_OHC_NAME
                        ,X.RCMD_APPRO_OHC_EMAIL
                        ,X.RCMD_APPRO_OHC_ID
                        ,X.RVW_REMARKS
                        ,X.APPROVAL_SO_VALUE
                        ,X.APPROVAL_SO
                        ,X.APPROVAL_SO_RESP_DATE
                        ,TO_DATE(regexp_replace(X."APPROVAL_SO_RESP_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as APPROVAL_SO_RESP_DATE_D
                        ,X.APPROVAL_DGHO_VALUE
                        ,X.APPROVAL_DGHO
                        ,X.APPROVAL_DGHO_RESP_DATE
                        ,TO_DATE(regexp_replace(X."APPROVAL_DGHO_RESP_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as APPROVAL_DGHO_RESP_DATE_D
                        ,X.APPROVAL_TABG_VALUE
                        ,X.APPROVAL_TABG
                        ,X.APPROVAL_TABG_RESP_DATE
                        ,TO_DATE(regexp_replace(X."APPROVAL_TABG_RESP_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as APPROVAL_TABG_RESP_DATE_D
                        ,X.APPROVAL_OHC_VALUE
                        ,X.APPROVAL_OHC
                        ,X.APPROVAL_OHC_RESP_DATE
                        ,TO_DATE(regexp_replace(X."APPROVAL_OHC_RESP_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as APPROVAL_OHC_RESP_DATE_D
                        ,X.APPROVER_NOTES
                        ,X.COC_NAME
                        ,X.COC_EMAIL
                        ,X.COC_ID
                        ,X.COC_TITLE
                        ,X.APPROVAL_COC_VALUE
                        ,X.APPROVAL_COC_ACTING
                        ,X.APPROVAL_COC
                        ,X.APPROVAL_COC_RESP_DATE
                        ,TO_DATE(regexp_replace(X."APPROVAL_COC_RESP_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy') as APPROVAL_COC_RESP_DATE_D
                        ,X.APPROVAL_SO_ACTING
                        ,X.APPROVAL_DGHO_ACTING
                        ,X.APPROVAL_TABG_ACTING
                        ,X.APPROVAL_OHC_ACTING
                        ,X.JUSTIFICATION_MOD_REASON
                        ,X.JUSTIFICATION_MOD_SUMMARY
                        ,X.JUSTIFICATION_MODIFIER_NAME
                        ,X.JUSTIFICATION_MODIFIER_ID
                        ,X.JUSTIFICATION_MODIFIED_DATE
                        ,TO_DATE(regexp_replace(X."JUSTIFICATION_MODIFIED_DATE", '[^0-9|/]', ''), 'mm/dd/yyyy hh24:mi:ss') as JUSTIFICATION_MODIFIED_DATE_D
                        --,X.JUSTIFICATION_VER
                        --,X.JUSTIFICATION_CRT_NAME
                        --,X.JUSTIFICATION_CRT_ID
                        --,X.JUSTIFICATION_CRT_DATE
                        --,X.JUSTIFICATION_CRT_DATE_D
                        ,X.JUSTIFICATION_LASTMOD_NAME
                        ,X.JUSTIFICATION_LASTMOD_ID
                        --,X.JUSTIFICATION_LASTMOD_DATE
                        --,X.JUSTIFICATION_LASTMOD_DATE_D                            
                    FROM TBL_FORM_DTL FD,
                         XMLTABLE('/formData/items' PASSING FD.FIELD_DATA COLUMNS
                                INIT_SALARY_GRADE VARCHAR2(5) PATH './item[id="hrInitialSalaryGrade"]/value'
                                , INIT_SALARY_STEP VARCHAR2(5) PATH './item[id="hrInitialSalaryStep"]/value'
                                , INIT_SALARY_SALARY_PER_ANNUM VARCHAR2(20) PATH './item[id="hrInitialSalarySalaryPerAnnum"]/value'
                                , INIT_SALARY_LOCALITY_PAY_SCALE VARCHAR2(200) PATH './item[id="hrInitialSalaryLocalityPayScale"]/value'
                                , SUPPORT_SAM VARCHAR2(5) PATH './item[id="supportSAM"]/value'
                                , RCMD_SALARY_GRADE VARCHAR2(5) PATH './item[id="componentRcmdGrade"]/value'
                                , RCMD_SALARY_STEP VARCHAR2(5) PATH './item[id="componentRcmdStep"]/value'
                                , RCMD_SALARY_SALARY_PER_ANNUM VARCHAR2(20) PATH './item[id="componentRcmdSalaryPerAnnum"]/value'
                                , RCMD_SALARY_LOCALITY_PAY_SCALE VARCHAR2(200) PATH './item[id="componentRcmdLocalityPayScale"]/value'
                                , SELECTEE_SALARY_PER_ANNUM VARCHAR2(20) PATH './item[id="selecteeSalaryPerAnnum"]/value'
                                , SELECTEE_SALARY_TYPE VARCHAR2(25) PATH './item[id="selecteeSalaryType"]/value'
                                , SELECTEE_BONUS VARCHAR2(20) PATH './item[id="selecteeBonus"]/value'
                                , SELECTEE_BENEFITS VARCHAR2(500) PATH './item[id="selecteeBenefits"]/value'
                                , SELECTEE_TOTAL_COMPENSATION VARCHAR2(20) PATH './item[id="selecteeTotalCompensation"]/value'
                                , SUP_DOC_REQ_DATE VARCHAR2(10) PATH './item[id="dateSupDocRequested"]/value'
                                , SUP_DOC_RCV_DATE VARCHAR2(10) PATH './item[id="dateSupDocReceived"]/value'
                                -- Justification
                                , JUSTIFICATION_SUPER_QUAL_DESC VARCHAR2(4000) PATH './item[id="justificationSuperQualificationDesc"]/value'
                                , JUSTIFICATION_QUAL_COMP_DESC VARCHAR2(4000) PATH './item[id="justificationQualificationComparedDesc"]/value'
                                , JUSTIFICATION_PAY_EQUITY_DESC VARCHAR2(4000) PATH './item[id="justificationPayEquityDesc"]/value'
                                , JUSTIFICATION_EXIST_PKG_DESC VARCHAR2(4000) PATH './item[id="justificationExistingCompensationPkgDesc"]/value'
                                , JUSTIFICATION_EXPLAIN_CONSID VARCHAR2(4000) PATH './item[id="justificationExplainIncentiveConsideration"]/value'
                                -- Review
                                , SELECT_MEET_ELIGIBILITY VARCHAR2(100) PATH './item[id="selecteeMeetEligibility"]/value'
                                , SELECT_MEET_CRITERIA VARCHAR2(100) PATH './item[id="selecteeMeetCriteria"]/value'
                                , SUPERIOR_QUAL_REASON VARCHAR2(100) PATH './item[id="superiorQualificationReason"]/value'
                                , OTHER_FACTORS VARCHAR2(140) PATH './item[id="otherFactorsAsExplained"]/value'
                                , SPL_AGENCY_NEED_RSN VARCHAR2(140) PATH './item[id="specialAgencyNeedReason"]/value'
                                , SPL_AGENCY_NEED_RSN_ESS VARCHAR2(140) PATH './item[id="specialAgencyNeedReasonEssential"]/value'
                                , QUAL_REAPPT VARCHAR2(50) PATH './item[id="qualifyingReappointment"]/value'
                                , OTHER_EXCEPTS VARCHAR2(140) PATH './item[id="otherExceptions"]/value'
                                , BASIC_PAY_RATE_FACTOR1 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[1]/text'
                                , BASIC_PAY_RATE_FACTOR2 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[2]/text'
                                , BASIC_PAY_RATE_FACTOR3 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[3]/text'
                                , BASIC_PAY_RATE_FACTOR4 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[4]/text'
                                , BASIC_PAY_RATE_FACTOR5 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[5]/text'
                                , BASIC_PAY_RATE_FACTOR6 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[6]/text'
                                , BASIC_PAY_RATE_FACTOR7 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[7]/text'
                                , BASIC_PAY_RATE_FACTOR8 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[8]/text'
                                , BASIC_PAY_RATE_FACTOR9 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[9]/text'
                                , BASIC_PAY_RATE_FACTOR10 VARCHAR2(140) PATH './item[id="basicPayRateFactor"]/value[10]/text'
                                , OTHER_RLVNT_FACTOR VARCHAR2(140) PATH './item[id="otherRelevantFactors"]/value'
                                , OTHER_REQ_JUST_APVD VARCHAR2(5) PATH './item[id="otherReqJustificationApproved"]/value'
                                , OTHER_REQ_SUFF_INFO_PRVD VARCHAR2(5) PATH './item[id="otherReqSufficientInformationProvided"]/value'
                                , OTHER_REQ_INCEN_REQD VARCHAR2(5) PATH './item[id="otherReqIncentiveRequired"]/value'
                                , OTHER_REQ_DOC_PRVD VARCHAR2(5) PATH './item[id="otherReqDocumentationProvided"]/value'
                                , HRS_RVW_CERT VARCHAR2(100) PATH './item[id="hrSpecialistReviewCertification"]/value'
                                , HRS_NOT_SPT_RSN VARCHAR2(100) PATH './item[id="hrSpecialistNotSupportReason"]/value'
                                , RVW_HRS VARCHAR2(100) PATH './item[id="reviewHRSpecialist"]/value'
                                , HRS_RVW_DATE VARCHAR2(10) PATH './item[id="hrSpecialistReviewDate"]/value'
                                , RCMD_GRADE VARCHAR2(5) PATH './item[id="reviewRcmdGrade"]/value'
                                , RCMD_STEP VARCHAR2(5) PATH './item[id="reviewRcmdStep"]/value'
                                , RCMD_SALARY_PER_ANNUM VARCHAR2(20) PATH './item[id="reviewRcmdSalaryPerAnnum"]/value'
                                , RCMD_LOCALITY_PAY_SCALE VARCHAR2(200) PATH './item[id="reviewRcmdLocalityPayScale"]/value'
                                , RCMD_INC_DEC_AMOUNT VARCHAR2(20) PATH './item[id="reviewRcmdIncDecAmount"]/value'
                                , RCMD_PERC_DIFF VARCHAR2(10) PATH './item[id="reviewRcmdPercentageDifference"]/value'
                                , OHC_APPRO_REQ VARCHAR2(5) PATH './item[id="requireOHCApproval"]/value'
                                -- OHC Director
                                , RCMD_APPRO_OHC_NAME VARCHAR2(100) PATH './item[id="reviewRcmdApprovalOHCDirector"]/value/name'
                                , RCMD_APPRO_OHC_EMAIL VARCHAR2(100) PATH './item[id="reviewRcmdApprovalOHCDirector"]/value/email'
                                , RCMD_APPRO_OHC_ID VARCHAR2(10) PATH './item[id="reviewRcmdApprovalOHCDirector"]/value/id'
                                , RVW_REMARKS VARCHAR2(500) PATH './item[id="samReviewRemarks"]/value'
                                , APPROVAL_SO_VALUE VARCHAR2(10) PATH './item[id="approvalSOValue"]/value'
                                , APPROVAL_SO VARCHAR2(100) PATH './item[id="approvalSO"]/value'
                                , APPROVAL_SO_RESP_DATE VARCHAR2(10) PATH './item[id="approvalSOResponseDate"]/value'
                                , APPROVAL_DGHO_VALUE VARCHAR2(10) PATH './item[id="approvalDGHOValue"]/value'
                                , APPROVAL_DGHO VARCHAR2(100) PATH './item[id="approvalDGHO"]/value'
                                , APPROVAL_DGHO_RESP_DATE VARCHAR2(10) PATH './item[id="approvalDGHOResponseDate"]/value'
                                , APPROVAL_TABG_VALUE VARCHAR2(10) PATH './item[id="approvalTABGValue"]/value'
                                , APPROVAL_TABG VARCHAR2(100) PATH './item[id="approvalTABG"]/value'
                                , APPROVAL_TABG_RESP_DATE VARCHAR2(10) PATH './item[id="approvalTABGResponseDate"]/value'
                                , APPROVAL_OHC_VALUE VARCHAR2(10) PATH './item[id="approvalOHCValue"]/value'
                                , APPROVAL_OHC VARCHAR2(100) PATH './item[id="approvalOHC"]/value'
                                , APPROVAL_OHC_RESP_DATE VARCHAR2(10) PATH './item[id="approvalOHCResponseDate"]/value'
                                , APPROVER_NOTES VARCHAR2(500) PATH './item[id="approverNotes"]/value'
                                , COC_NAME VARCHAR2(100) PATH './item[id="cocDirector"]/value/name'
                                , COC_EMAIL VARCHAR2(100) PATH './item[id="cocDirector"]/value/email'
                                , COC_ID VARCHAR2(10) PATH './item[id="cocDirector"]/value/id'
                                , COC_TITLE VARCHAR2(100) PATH './item[id="cocDirector"]/value/title'
                                , APPROVAL_COC_VALUE VARCHAR2(10) PATH './item[id="approvalCOCValue"]/value'
                                , APPROVAL_COC_ACTING VARCHAR2(10) PATH './item[id="approvalCOCActing"]/value'
                                , APPROVAL_COC VARCHAR2(100) PATH './item[id="approvalCOC"]/value'
                                , APPROVAL_COC_RESP_DATE VARCHAR2(10) PATH './item[id="approvalCOCResponseDate"]/value'
                                , APPROVAL_SO_ACTING VARCHAR2(10) PATH './item[id="approvalSOActing"]/value'
                                , APPROVAL_DGHO_ACTING VARCHAR2(10) PATH './item[id="approvalDGHOActing"]/value'
                                , APPROVAL_TABG_ACTING VARCHAR2(10) PATH './item[id="approvalTABGActing"]/value'
                                , APPROVAL_OHC_Acting VARCHAR2(10) PATH './item[id="approvalOHCActing"]/value'
                                , JUSTIFICATION_MOD_REASON VARCHAR2(200) PATH './item[id="justificationModificationReason"]/value'
                                , JUSTIFICATION_MOD_SUMMARY VARCHAR2(500) PATH './item[id="justificationModificationSummary"]/value'
                                , JUSTIFICATION_MODIFIER_NAME VARCHAR2(100) PATH './item[id="justificationModifier"]/value'
                                , JUSTIFICATION_MODIFIER_ID VARCHAR2(10) PATH './item[id="justificationModifierId"]/value'
                                , JUSTIFICATION_MODIFIED_DATE VARCHAR2(20) PATH './item[id="justificationModified"]/value'	
                                --,JUSTIFICATION_VER	NUMBER(10,0)
                                --,JUSTIFICATION_CRT_NAME	VARCHAR2(100)
                                --,JUSTIFICATION_CRT_ID	VARCHAR2(10)
                                --,JUSTIFICATION_CRT_DATE	VARCHAR2(20)
                                --,JUSTIFICATION_CRT_DATE_D	DATE
                                , JUSTIFICATION_LASTMOD_NAME VARCHAR2(100) PATH './item[id="currentUser"]/value'
                                , JUSTIFICATION_LASTMOD_ID VARCHAR2(10) PATH './item[id="currentUserId"]/value'
                                --,JUSTIFICATION_LASTMOD_DATE	VARCHAR2(20)
                                --,JUSTIFICATION_LASTMOD_DATE_D	DATE
                        ) X
                    WHERE FD.PROCID = I_PROCID
			) SRC ON (SRC.PROC_ID = TRG.PROC_ID)
            WHEN MATCHED THEN UPDATE SET
                            TRG.INIT_SALARY_GRADE = SRC.INIT_SALARY_GRADE
                            , TRG.INIT_SALARY_STEP = SRC.INIT_SALARY_STEP
                            , TRG.INIT_SALARY_SALARY_PER_ANNUM = SRC.INIT_SALARY_SALARY_PER_ANNUM
                            , TRG.INIT_SALARY_SALARY_PER_ANNUM_N = SRC.INIT_SALARY_SALARY_PER_ANNUM_N
                            , TRG.INIT_SALARY_LOCALITY_PAY_SCALE = SRC.INIT_SALARY_LOCALITY_PAY_SCALE
                            , TRG.SUPPORT_SAM = SRC.SUPPORT_SAM
                            , TRG.RCMD_SALARY_GRADE = SRC.RCMD_SALARY_GRADE
                            , TRG.RCMD_SALARY_STEP = SRC.RCMD_SALARY_STEP
                            , TRG.RCMD_SALARY_SALARY_PER_ANNUM = SRC.RCMD_SALARY_SALARY_PER_ANNUM
                            , TRG.RCMD_SALARY_SALARY_PER_ANNUM_N = SRC.RCMD_SALARY_SALARY_PER_ANNUM_N
                            , TRG.RCMD_SALARY_LOCALITY_PAY_SCALE = SRC.RCMD_SALARY_LOCALITY_PAY_SCALE
                            , TRG.SELECTEE_SALARY_PER_ANNUM = SRC.SELECTEE_SALARY_PER_ANNUM
                            , TRG.SELECTEE_SALARY_PER_ANNUM_N = SRC.SELECTEE_SALARY_PER_ANNUM_N
                            , TRG.SELECTEE_SALARY_TYPE = SRC.SELECTEE_SALARY_TYPE
                            , TRG.SELECTEE_BONUS = SRC.SELECTEE_BONUS
                            , TRG.SELECTEE_BONUS_N = SRC.SELECTEE_BONUS_N
                            , TRG.SELECTEE_BENEFITS = SRC.SELECTEE_BENEFITS
                            , TRG.SELECTEE_TOTAL_COMPENSATION = SRC.SELECTEE_TOTAL_COMPENSATION
                            , TRG.SELECTEE_TOTAL_COMPENSATION_N = SRC.SELECTEE_TOTAL_COMPENSATION_N
                            , TRG.SUP_DOC_REQ_DATE = SRC.SUP_DOC_REQ_DATE
                            , TRG.SUP_DOC_REQ_DATE_D = SRC.SUP_DOC_REQ_DATE_D
                            , TRG.SUP_DOC_RCV_DATE = SRC.SUP_DOC_RCV_DATE
                            , TRG.SUP_DOC_RCV_DATE_D = SRC.SUP_DOC_RCV_DATE_D
                            , TRG.JUSTIFICATION_SUPER_QUAL_DESC = SRC.JUSTIFICATION_SUPER_QUAL_DESC
                            , TRG.JUSTIFICATION_QUAL_COMP_DESC = SRC.JUSTIFICATION_QUAL_COMP_DESC
                            , TRG.JUSTIFICATION_PAY_EQUITY_DESC = SRC.JUSTIFICATION_PAY_EQUITY_DESC
                            , TRG.JUSTIFICATION_EXIST_PKG_DESC = SRC.JUSTIFICATION_EXIST_PKG_DESC
                            , TRG.JUSTIFICATION_EXPLAIN_CONSID = SRC.JUSTIFICATION_EXPLAIN_CONSID
                            , TRG.SELECT_MEET_ELIGIBILITY = SRC.SELECT_MEET_ELIGIBILITY
                            , TRG.SELECT_MEET_CRITERIA = SRC.SELECT_MEET_CRITERIA
                            , TRG.SUPERIOR_QUAL_REASON = SRC.SUPERIOR_QUAL_REASON
                            , TRG.OTHER_FACTORS = SRC.OTHER_FACTORS
                            , TRG.SPL_AGENCY_NEED_RSN = SRC.SPL_AGENCY_NEED_RSN
                            , TRG.SPL_AGENCY_NEED_RSN_ESS = SRC.SPL_AGENCY_NEED_RSN_ESS
                            , TRG.QUAL_REAPPT = SRC.QUAL_REAPPT
                            , TRG.OTHER_EXCEPTS = SRC.OTHER_EXCEPTS
                            , TRG.BASIC_PAY_RATE_FACTOR1 = SRC.BASIC_PAY_RATE_FACTOR1
                            , TRG.BASIC_PAY_RATE_FACTOR2 = SRC.BASIC_PAY_RATE_FACTOR2
                            , TRG.BASIC_PAY_RATE_FACTOR3 = SRC.BASIC_PAY_RATE_FACTOR3
                            , TRG.BASIC_PAY_RATE_FACTOR4 = SRC.BASIC_PAY_RATE_FACTOR4
                            , TRG.BASIC_PAY_RATE_FACTOR5 = SRC.BASIC_PAY_RATE_FACTOR5
                            , TRG.BASIC_PAY_RATE_FACTOR6 = SRC.BASIC_PAY_RATE_FACTOR6
                            , TRG.BASIC_PAY_RATE_FACTOR7 = SRC.BASIC_PAY_RATE_FACTOR7
                            , TRG.BASIC_PAY_RATE_FACTOR8 = SRC.BASIC_PAY_RATE_FACTOR8
                            , TRG.BASIC_PAY_RATE_FACTOR9 = SRC.BASIC_PAY_RATE_FACTOR9
                            , TRG.BASIC_PAY_RATE_FACTOR10 = SRC.BASIC_PAY_RATE_FACTOR10
                            , TRG.OTHER_RLVNT_FACTOR = SRC.OTHER_RLVNT_FACTOR
                            , TRG.OTHER_REQ_JUST_APVD = SRC.OTHER_REQ_JUST_APVD
                            , TRG.OTHER_REQ_SUFF_INFO_PRVD = SRC.OTHER_REQ_SUFF_INFO_PRVD
                            , TRG.OTHER_REQ_INCEN_REQD = SRC.OTHER_REQ_INCEN_REQD
                            , TRG.OTHER_REQ_DOC_PRVD = SRC.OTHER_REQ_DOC_PRVD
                            , TRG.HRS_RVW_CERT = SRC.HRS_RVW_CERT
                            , TRG.HRS_NOT_SPT_RSN = SRC.HRS_NOT_SPT_RSN
                            , TRG.RVW_HRS = SRC.RVW_HRS
                            , TRG.HRS_RVW_DATE = SRC.HRS_RVW_DATE
                            , TRG.HRS_RVW_DATE_D = SRC.HRS_RVW_DATE_D
                            , TRG.RCMD_GRADE = SRC.RCMD_GRADE
                            , TRG.RCMD_STEP = SRC.RCMD_STEP
                            , TRG.RCMD_SALARY_PER_ANNUM = SRC.RCMD_SALARY_PER_ANNUM
                            , TRG.RCMD_SALARY_PER_ANNUM_N = SRC.RCMD_SALARY_PER_ANNUM_N
                            , TRG.RCMD_LOCALITY_PAY_SCALE = SRC.RCMD_LOCALITY_PAY_SCALE
                            , TRG.RCMD_INC_DEC_AMOUNT_N = SRC.RCMD_INC_DEC_AMOUNT_N
                            , TRG.RCMD_INC_DEC_AMOUNT = SRC.RCMD_INC_DEC_AMOUNT
                            , TRG.RCMD_PERC_DIFF = SRC.RCMD_PERC_DIFF
                            , TRG.OHC_APPRO_REQ = SRC.OHC_APPRO_REQ
                            , TRG.RCMD_APPRO_OHC_NAME = SRC.RCMD_APPRO_OHC_NAME
                            , TRG.RCMD_APPRO_OHC_EMAIL = SRC.RCMD_APPRO_OHC_EMAIL
                            , TRG.RCMD_APPRO_OHC_ID = SRC.RCMD_APPRO_OHC_ID
                            , TRG.RVW_REMARKS = SRC.RVW_REMARKS
                            , TRG.APPROVAL_SO_VALUE = SRC.APPROVAL_SO_VALUE
                            , TRG.APPROVAL_SO = SRC.APPROVAL_SO
                            , TRG.APPROVAL_SO_RESP_DATE = SRC.APPROVAL_SO_RESP_DATE
                            , TRG.APPROVAL_SO_RESP_DATE_D = SRC.APPROVAL_SO_RESP_DATE_D
                            , TRG.APPROVAL_DGHO_VALUE = SRC.APPROVAL_DGHO_VALUE
                            , TRG.APPROVAL_DGHO = SRC.APPROVAL_DGHO
                            , TRG.APPROVAL_DGHO_RESP_DATE = SRC.APPROVAL_DGHO_RESP_DATE
                            , TRG.APPROVAL_DGHO_RESP_DATE_D = SRC.APPROVAL_DGHO_RESP_DATE_D
                            , TRG.APPROVAL_TABG_VALUE = SRC.APPROVAL_TABG_VALUE
                            , TRG.APPROVAL_TABG = SRC.APPROVAL_TABG
                            , TRG.APPROVAL_TABG_RESP_DATE = SRC.APPROVAL_TABG_RESP_DATE
                            , TRG.APPROVAL_TABG_RESP_DATE_D = SRC.APPROVAL_TABG_RESP_DATE_D
                            , TRG.APPROVAL_OHC_VALUE = SRC.APPROVAL_OHC_VALUE
                            , TRG.APPROVAL_OHC = SRC.APPROVAL_OHC
                            , TRG.APPROVAL_OHC_RESP_DATE = SRC.APPROVAL_OHC_RESP_DATE
                            , TRG.APPROVAL_OHC_RESP_DATE_D = SRC.APPROVAL_OHC_RESP_DATE_D
                            , TRG.APPROVER_NOTES = SRC.APPROVER_NOTES
                            , TRG.COC_NAME = SRC.COC_NAME
                            , TRG.COC_EMAIL = SRC.COC_EMAIL
                            , TRG.COC_ID = SRC.COC_ID
                            , TRG.COC_TITLE = SRC.COC_TITLE
                            , TRG.APPROVAL_COC_VALUE = SRC.APPROVAL_COC_VALUE
                            , TRG.APPROVAL_COC_ACTING = SRC.APPROVAL_COC_ACTING
                            , TRG.APPROVAL_COC = SRC.APPROVAL_COC
                            , TRG.APPROVAL_COC_RESP_DATE = SRC.APPROVAL_COC_RESP_DATE
                            , TRG.APPROVAL_COC_RESP_DATE_D = SRC.APPROVAL_COC_RESP_DATE_D
                            , TRG.APPROVAL_SO_ACTING = SRC.APPROVAL_SO_ACTING
                            , TRG.APPROVAL_DGHO_ACTING = SRC.APPROVAL_DGHO_ACTING
                            , TRG.APPROVAL_TABG_ACTING = SRC.APPROVAL_TABG_ACTING
                            , TRG.APPROVAL_OHC_ACTING = SRC.APPROVAL_OHC_ACTING
                            , TRG.JUSTIFICATION_MOD_REASON = SRC.JUSTIFICATION_MOD_REASON
                            , TRG.JUSTIFICATION_MOD_SUMMARY = SRC.JUSTIFICATION_MOD_SUMMARY
                            , TRG.JUSTIFICATION_MODIFIER_NAME = SRC.JUSTIFICATION_MODIFIER_NAME
                            , TRG.JUSTIFICATION_MODIFIER_ID = SRC.JUSTIFICATION_MODIFIER_ID
                            , TRG.JUSTIFICATION_MODIFIED_DATE = SRC.JUSTIFICATION_MODIFIED_DATE
                            , TRG.JUSTIFICATION_MODIFIED_DATE_D = SRC.JUSTIFICATION_MODIFIED_DATE_D
                            --, TRG.JUSTIFICATION_VER = SRC.JUSTIFICATION_VER
                            --, TRG.JUSTIFICATION_CRT_NAME = SRC.JUSTIFICATION_CRT_NAME
                            --, TRG.JUSTIFICATION_CRT_ID = SRC.JUSTIFICATION_CRT_ID
                            --, TRG.JUSTIFICATION_CRT_DATE = SRC.JUSTIFICATION_CRT_DATE
                            --, TRG.JUSTIFICATION_CRT_DATE_D = SRC.JUSTIFICATION_CRT_DATE_D
                            , TRG.JUSTIFICATION_LASTMOD_NAME = SRC.JUSTIFICATION_LASTMOD_NAME
                            , TRG.JUSTIFICATION_LASTMOD_ID = SRC.JUSTIFICATION_LASTMOD_ID
                            --, TRG.JUSTIFICATION_LASTMOD_DATE = SRC.JUSTIFICATION_LASTMOD_DATE
                            --, TRG.JUSTIFICATION_LASTMOD_DATE_D = SRC.JUSTIFICATION_LASTMOD_DATE_D 
            WHEN NOT MATCHED THEN INSERT (
                            TRG.PROC_ID
                            , TRG.INIT_SALARY_GRADE
                            , TRG.INIT_SALARY_STEP
                            , TRG.INIT_SALARY_SALARY_PER_ANNUM
                            , TRG.INIT_SALARY_SALARY_PER_ANNUM_N
                            , TRG.INIT_SALARY_LOCALITY_PAY_SCALE
                            , TRG.SUPPORT_SAM
                            , TRG.RCMD_SALARY_GRADE
                            , TRG.RCMD_SALARY_STEP
                            , TRG.RCMD_SALARY_SALARY_PER_ANNUM
                            , TRG.RCMD_SALARY_SALARY_PER_ANNUM_N
                            , TRG.RCMD_SALARY_LOCALITY_PAY_SCALE
                            , TRG.SELECTEE_SALARY_PER_ANNUM
                            , TRG.SELECTEE_SALARY_PER_ANNUM_N
                            , TRG.SELECTEE_SALARY_TYPE
                            , TRG.SELECTEE_BONUS
                            , TRG.SELECTEE_BONUS_N
                            , TRG.SELECTEE_BENEFITS
                            , TRG.SELECTEE_TOTAL_COMPENSATION
                            , TRG.SELECTEE_TOTAL_COMPENSATION_N
                            , TRG.SUP_DOC_REQ_DATE
                            , TRG.SUP_DOC_REQ_DATE_D
                            , TRG.SUP_DOC_RCV_DATE
                            , TRG.SUP_DOC_RCV_DATE_D
                            , TRG.JUSTIFICATION_SUPER_QUAL_DESC
                            , TRG.JUSTIFICATION_QUAL_COMP_DESC
                            , TRG.JUSTIFICATION_PAY_EQUITY_DESC
                            , TRG.JUSTIFICATION_EXIST_PKG_DESC
                            , TRG.JUSTIFICATION_EXPLAIN_CONSID
                            , TRG.SELECT_MEET_ELIGIBILITY
                            , TRG.SELECT_MEET_CRITERIA
                            , TRG.SUPERIOR_QUAL_REASON
                            , TRG.OTHER_FACTORS
                            , TRG.SPL_AGENCY_NEED_RSN
                            , TRG.SPL_AGENCY_NEED_RSN_ESS
                            , TRG.QUAL_REAPPT
                            , TRG.OTHER_EXCEPTS
                            , TRG.BASIC_PAY_RATE_FACTOR1
                            , TRG.BASIC_PAY_RATE_FACTOR2
                            , TRG.BASIC_PAY_RATE_FACTOR3
                            , TRG.BASIC_PAY_RATE_FACTOR4
                            , TRG.BASIC_PAY_RATE_FACTOR5
                            , TRG.BASIC_PAY_RATE_FACTOR6
                            , TRG.BASIC_PAY_RATE_FACTOR7
                            , TRG.BASIC_PAY_RATE_FACTOR8
                            , TRG.BASIC_PAY_RATE_FACTOR9
                            , TRG.BASIC_PAY_RATE_FACTOR10
                            , TRG.OTHER_RLVNT_FACTOR
                            , TRG.OTHER_REQ_JUST_APVD
                            , TRG.OTHER_REQ_SUFF_INFO_PRVD
                            , TRG.OTHER_REQ_INCEN_REQD
                            , TRG.OTHER_REQ_DOC_PRVD
                            , TRG.HRS_RVW_CERT
                            , TRG.HRS_NOT_SPT_RSN
                            , TRG.RVW_HRS
                            , TRG.HRS_RVW_DATE
                            , TRG.HRS_RVW_DATE_D
                            , TRG.RCMD_GRADE
                            , TRG.RCMD_STEP
                            , TRG.RCMD_SALARY_PER_ANNUM
                            , TRG.RCMD_SALARY_PER_ANNUM_N
                            , TRG.RCMD_LOCALITY_PAY_SCALE
                            , TRG.RCMD_INC_DEC_AMOUNT_N
                            , TRG.RCMD_INC_DEC_AMOUNT
                            , TRG.RCMD_PERC_DIFF
                            , TRG.OHC_APPRO_REQ
                            , TRG.RCMD_APPRO_OHC_NAME
                            , TRG.RCMD_APPRO_OHC_EMAIL
                            , TRG.RCMD_APPRO_OHC_ID
                            , TRG.RVW_REMARKS
                            , TRG.APPROVAL_SO_VALUE
                            , TRG.APPROVAL_SO
                            , TRG.APPROVAL_SO_RESP_DATE
                            , TRG.APPROVAL_SO_RESP_DATE_D
                            , TRG.APPROVAL_DGHO_VALUE
                            , TRG.APPROVAL_DGHO
                            , TRG.APPROVAL_DGHO_RESP_DATE
                            , TRG.APPROVAL_DGHO_RESP_DATE_D
                            , TRG.APPROVAL_TABG_VALUE
                            , TRG.APPROVAL_TABG
                            , TRG.APPROVAL_TABG_RESP_DATE
                            , TRG.APPROVAL_TABG_RESP_DATE_D
                            , TRG.APPROVAL_OHC_VALUE
                            , TRG.APPROVAL_OHC
                            , TRG.APPROVAL_OHC_RESP_DATE
                            , TRG.APPROVAL_OHC_RESP_DATE_D
                            , TRG.APPROVER_NOTES
                            , TRG.COC_NAME
                            , TRG.COC_EMAIL
                            , TRG.COC_ID
                            , TRG.COC_TITLE
                            , TRG.APPROVAL_COC_VALUE
                            , TRG.APPROVAL_COC_ACTING
                            , TRG.APPROVAL_COC
                            , TRG.APPROVAL_COC_RESP_DATE
                            , TRG.APPROVAL_COC_RESP_DATE_D
                            , TRG.APPROVAL_SO_ACTING
                            , TRG.APPROVAL_DGHO_ACTING
                            , TRG.APPROVAL_TABG_ACTING
                            , TRG.APPROVAL_OHC_ACTING
                            , TRG.JUSTIFICATION_MOD_REASON
                            , TRG.JUSTIFICATION_MOD_SUMMARY
                            , TRG.JUSTIFICATION_MODIFIER_NAME
                            , TRG.JUSTIFICATION_MODIFIER_ID
                            , TRG.JUSTIFICATION_MODIFIED_DATE
                            , TRG.JUSTIFICATION_MODIFIED_DATE_D
                            --, TRG.JUSTIFICATION_VER
                            --, TRG.JUSTIFICATION_CRT_NAME
                            --, TRG.JUSTIFICATION_CRT_ID
                            --, TRG.JUSTIFICATION_CRT_DATE
                            --, TRG.JUSTIFICATION_CRT_DATE_D
                            , TRG.JUSTIFICATION_LASTMOD_NAME
                            , TRG.JUSTIFICATION_LASTMOD_ID
                            --, TRG.JUSTIFICATION_LASTMOD_DATE
                            --, TRG.JUSTIFICATION_LASTMOD_DATE_D 
                        ) VALUES (
                            SRC.PROC_ID
                            , SRC.INIT_SALARY_GRADE
                            , SRC.INIT_SALARY_STEP
                            , SRC.INIT_SALARY_SALARY_PER_ANNUM
                            , SRC.INIT_SALARY_SALARY_PER_ANNUM_N
                            , SRC.INIT_SALARY_LOCALITY_PAY_SCALE
                            , SRC.SUPPORT_SAM
                            , SRC.RCMD_SALARY_GRADE
                            , SRC.RCMD_SALARY_STEP
                            , SRC.RCMD_SALARY_SALARY_PER_ANNUM
                            , SRC.RCMD_SALARY_SALARY_PER_ANNUM_N
                            , SRC.RCMD_SALARY_LOCALITY_PAY_SCALE
                            , SRC.SELECTEE_SALARY_PER_ANNUM
                            , SRC.SELECTEE_SALARY_PER_ANNUM_N
                            , SRC.SELECTEE_SALARY_TYPE
                            , SRC.SELECTEE_BONUS
                            , SRC.SELECTEE_BONUS_N
                            , SRC.SELECTEE_BENEFITS
                            , SRC.SELECTEE_TOTAL_COMPENSATION
                            , SRC.SELECTEE_TOTAL_COMPENSATION_N
                            , SRC.SUP_DOC_REQ_DATE
                            , SRC.SUP_DOC_REQ_DATE_D
                            , SRC.SUP_DOC_RCV_DATE
                            , SRC.SUP_DOC_RCV_DATE_D
                            , SRC.JUSTIFICATION_SUPER_QUAL_DESC
                            , SRC.JUSTIFICATION_QUAL_COMP_DESC
                            , SRC.JUSTIFICATION_PAY_EQUITY_DESC
                            , SRC.JUSTIFICATION_EXIST_PKG_DESC
                            , SRC.JUSTIFICATION_EXPLAIN_CONSID
                            , SRC.SELECT_MEET_ELIGIBILITY
                            , SRC.SELECT_MEET_CRITERIA
                            , SRC.SUPERIOR_QUAL_REASON
                            , SRC.OTHER_FACTORS
                            , SRC.SPL_AGENCY_NEED_RSN
                            , SRC.SPL_AGENCY_NEED_RSN_ESS
                            , SRC.QUAL_REAPPT
                            , SRC.OTHER_EXCEPTS
                            , SRC.BASIC_PAY_RATE_FACTOR1
                            , SRC.BASIC_PAY_RATE_FACTOR2
                            , SRC.BASIC_PAY_RATE_FACTOR3
                            , SRC.BASIC_PAY_RATE_FACTOR4
                            , SRC.BASIC_PAY_RATE_FACTOR5
                            , SRC.BASIC_PAY_RATE_FACTOR6
                            , SRC.BASIC_PAY_RATE_FACTOR7
                            , SRC.BASIC_PAY_RATE_FACTOR8
                            , SRC.BASIC_PAY_RATE_FACTOR9
                            , SRC.BASIC_PAY_RATE_FACTOR10
                            , SRC.OTHER_RLVNT_FACTOR
                            , SRC.OTHER_REQ_JUST_APVD
                            , SRC.OTHER_REQ_SUFF_INFO_PRVD
                            , SRC.OTHER_REQ_INCEN_REQD
                            , SRC.OTHER_REQ_DOC_PRVD
                            , SRC.HRS_RVW_CERT
                            , SRC.HRS_NOT_SPT_RSN
                            , SRC.RVW_HRS
                            , SRC.HRS_RVW_DATE
                            , SRC.HRS_RVW_DATE_D
                            , SRC.RCMD_GRADE
                            , SRC.RCMD_STEP
                            , SRC.RCMD_SALARY_PER_ANNUM
                            , SRC.RCMD_SALARY_PER_ANNUM_N
                            , SRC.RCMD_LOCALITY_PAY_SCALE
                            , SRC.RCMD_INC_DEC_AMOUNT_N
                            , SRC.RCMD_INC_DEC_AMOUNT
                            , SRC.RCMD_PERC_DIFF
                            , SRC.OHC_APPRO_REQ
                            , SRC.RCMD_APPRO_OHC_NAME
                            , SRC.RCMD_APPRO_OHC_EMAIL
                            , SRC.RCMD_APPRO_OHC_ID
                            , SRC.RVW_REMARKS
                            , SRC.APPROVAL_SO_VALUE
                            , SRC.APPROVAL_SO
                            , SRC.APPROVAL_SO_RESP_DATE
                            , SRC.APPROVAL_SO_RESP_DATE_D
                            , SRC.APPROVAL_DGHO_VALUE
                            , SRC.APPROVAL_DGHO
                            , SRC.APPROVAL_DGHO_RESP_DATE
                            , SRC.APPROVAL_DGHO_RESP_DATE_D
                            , SRC.APPROVAL_TABG_VALUE
                            , SRC.APPROVAL_TABG
                            , SRC.APPROVAL_TABG_RESP_DATE
                            , SRC.APPROVAL_TABG_RESP_DATE_D
                            , SRC.APPROVAL_OHC_VALUE
                            , SRC.APPROVAL_OHC
                            , SRC.APPROVAL_OHC_RESP_DATE
                            , SRC.APPROVAL_OHC_RESP_DATE_D
                            , SRC.APPROVER_NOTES
                            , SRC.COC_NAME
                            , SRC.COC_EMAIL
                            , SRC.COC_ID
                            , SRC.COC_TITLE
                            , SRC.APPROVAL_COC_VALUE
                            , SRC.APPROVAL_COC_ACTING
                            , SRC.APPROVAL_COC
                            , SRC.APPROVAL_COC_RESP_DATE
                            , SRC.APPROVAL_COC_RESP_DATE_D
                            , SRC.APPROVAL_SO_ACTING
                            , SRC.APPROVAL_DGHO_ACTING
                            , SRC.APPROVAL_TABG_ACTING
                            , SRC.APPROVAL_OHC_ACTING
                            , SRC.JUSTIFICATION_MOD_REASON
                            , SRC.JUSTIFICATION_MOD_SUMMARY
                            , SRC.JUSTIFICATION_MODIFIER_NAME
                            , SRC.JUSTIFICATION_MODIFIER_ID
                            , SRC.JUSTIFICATION_MODIFIED_DATE
                            , SRC.JUSTIFICATION_MODIFIED_DATE_D
                            --, SRC.JUSTIFICATION_VER
                            --, SRC.JUSTIFICATION_CRT_NAME
                            --, SRC.JUSTIFICATION_CRT_ID
                            --, SRC.JUSTIFICATION_CRT_DATE
                            --, SRC.JUSTIFICATION_CRT_DATE_D
                            , SRC.JUSTIFICATION_LASTMOD_NAME
                            , SRC.JUSTIFICATION_LASTMOD_ID
                            --, SRC.JUSTIFICATION_LASTMOD_DATE
                            --, SRC.JUSTIFICATION_LASTMOD_DATE_D 
                        );

        END IF;
    END IF;
        
    EXCEPTION
    WHEN OTHERS THEN
        --DBMS_OUTPUT.PUT_LINE('EXCEPTION=' || SUBSTR(SQLERRM, 1, 200));
          --err_code := SQLCODE;
          --err_msg := SUBSTR(SQLERRM, 1, 200);    
    SP_ERROR_LOG();
  END;
/


CREATE OR REPLACE PROCEDURE SP_UPDATE_INCENTIVES_LE_TABLE
(
	I_PROCID            IN      NUMBER
)
IS
	l_count	int;
BEGIN
	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN 
		SELECT count(*) INTO l_count FROM VW_INCENTIVES_LE WHERE PROC_ID = I_PROCID;
		IF 0 < l_count THEN
			MERGE INTO INCENTIVES_LE t
			USING ( SELECT * FROM VW_INCENTIVES_LE WHERE PROC_ID = I_PROCID ) v
			ON (t.PROC_ID = v.PROC_ID)
			WHEN MATCHED THEN
				UPDATE 
				SET t.COC_NAME = v.COC_NAME,
					t.COC_EMAIL = v.COC_EMAIL,
					t.COC_ID = v.COC_ID,
					t.COC_TITLE = v.COC_TITLE,
					t.INIT_ANN_LA_RATE = v.INIT_ANN_LA_RATE,
					t.SUPPORT_LE = v.SUPPORT_LE,
					t.PROPS_ANN_LA_RATE = v.PROPS_ANN_LA_RATE,
					t.TOTAL_CREDITABLE_YEARS = v.TOTAL_CREDITABLE_YEARS,
					t.TOTAL_CREDITABLE_MONTHS = v.TOTAL_CREDITABLE_MONTHS,
					t.JUSTIFICATION_LASTMOD_NAME = v.JUSTIFICATION_LASTMOD_NAME,
					t.JUSTIFICATION_LASTMOD_ID = v.JUSTIFICATION_LASTMOD_ID,
					t.JUSTIFICATION_MOD_REASON = v.JUSTIFICATION_MOD_REASON,
					t.JUSTIFICATION_MOD_SUMMARY = v.JUSTIFICATION_MOD_SUMMARY,
					t.JUSTIFICATION_MODIFIER_NAME = v.JUSTIFICATION_MODIFIER_NAME,
					t.JUSTIFICATION_MODIFIER_ID = v.JUSTIFICATION_MODIFIER_ID,
					t.JUSTIFICATION_MODIFIED_DATE = v.JUSTIFICATION_MODIFIED_DATE,
					t.JUSTIFICATION_SKILL_EXP = v.JUSTIFICATION_SKILL_EXP,
					t.JUSTIFICATION_AGENCY_GOAL = v.JUSTIFICATION_AGENCY_GOAL,
					t.SELECTEE_ELIGIBILITY = v.SELECTEE_ELIGIBILITY,
					t.HRS_RVW_CERT = v.HRS_RVW_CERT,
					t.HRS_NOT_SPT_RSN = v.HRS_NOT_SPT_RSN,
					t.RVW_HRS = v.RVW_HRS,
					t.HRS_RVW_DATE = v.HRS_RVW_DATE,
					t.RCMD_LA_RATE = v.RCMD_LA_RATE,
					t.APPROVAL_SO_VALUE = v.APPROVAL_SO_VALUE,
					t.APPROVAL_SO_ACTING = v.APPROVAL_SO_ACTING,
					t.APPROVAL_SO = v.APPROVAL_SO,
					t.APPROVAL_SO_RESP_DATE = v.APPROVAL_SO_RESP_DATE,
					t.APPROVAL_COC_VALUE = v.APPROVAL_COC_VALUE,
					t.APPROVAL_COC_ACTING = v.APPROVAL_COC_ACTING,
					t.APPROVAL_COC = v.APPROVAL_COC,
					t.APPROVAL_COC_RESP_DATE = v.APPROVAL_COC_RESP_DATE,
					t.APPROVAL_DGHO_VALUE = v.APPROVAL_DGHO_VALUE,
					t.APPROVAL_DGHO_ACTING = v.APPROVAL_DGHO_ACTING,
					t.APPROVAL_DGHO = v.APPROVAL_DGHO,
					t.APPROVAL_DGHO_RESP_DATE = v.APPROVAL_DGHO_RESP_DATE,
					t.APPROVAL_TABG_VALUE = v.APPROVAL_TABG_VALUE,
					t.APPROVAL_TABG_ACTING = v.APPROVAL_TABG_ACTING,
					t.APPROVAL_TABG = v.APPROVAL_TABG,
					t.APPROVAL_TABG_RESP_DATE = v.APPROVAL_TABG_RESP_DATE,
					t.APPROVER_NOTES = v.APPROVER_NOTES
			WHEN NOT MATCHED THEN
				INSERT (t.PROC_ID,
					t.COC_NAME,
					t.COC_EMAIL,
					t.COC_ID,
					t.COC_TITLE,
					t.INIT_ANN_LA_RATE,
					t.SUPPORT_LE,
					t.PROPS_ANN_LA_RATE,
					t.TOTAL_CREDITABLE_YEARS,
					t.TOTAL_CREDITABLE_MONTHS,
					t.JUSTIFICATION_LASTMOD_NAME, 
					t.JUSTIFICATION_LASTMOD_ID,
					t.JUSTIFICATION_MOD_REASON,
					t.JUSTIFICATION_MOD_SUMMARY,
					t.JUSTIFICATION_MODIFIER_NAME,
					t.JUSTIFICATION_MODIFIER_ID,
					t.JUSTIFICATION_MODIFIED_DATE,
					t.JUSTIFICATION_SKILL_EXP,
					t.JUSTIFICATION_AGENCY_GOAL,
					t.SELECTEE_ELIGIBILITY,
					t.HRS_RVW_CERT,
					t.HRS_NOT_SPT_RSN,
					t.RVW_HRS,
					t.HRS_RVW_DATE,
					t.RCMD_LA_RATE,
					t.APPROVAL_SO_VALUE,
					t.APPROVAL_SO_ACTING,
					t.APPROVAL_SO,
					t.APPROVAL_SO_RESP_DATE,
					t.APPROVAL_COC_VALUE,
					t.APPROVAL_COC_ACTING,
					t.APPROVAL_COC,
					t.APPROVAL_COC_RESP_DATE,
					t.APPROVAL_DGHO_VALUE,
					t.APPROVAL_DGHO_ACTING,
					t.APPROVAL_DGHO,
					t.APPROVAL_DGHO_RESP_DATE,
					t.APPROVAL_TABG_VALUE,
					t.APPROVAL_TABG_ACTING,
					t.APPROVAL_TABG,
					t.APPROVAL_TABG_RESP_DATE,
					t.APPROVER_NOTES)
				VALUES (
					v.PROC_ID,
					v.COC_NAME,
					v.COC_EMAIL,
					v.COC_ID,
					v.COC_TITLE,
					v.INIT_ANN_LA_RATE,
					v.SUPPORT_LE,
					v.PROPS_ANN_LA_RATE,
					v.TOTAL_CREDITABLE_YEARS,
					v.TOTAL_CREDITABLE_MONTHS,
					v.JUSTIFICATION_LASTMOD_NAME, 
					v.JUSTIFICATION_LASTMOD_ID,
					v.JUSTIFICATION_MOD_REASON,
					v.JUSTIFICATION_MOD_SUMMARY,
					v.JUSTIFICATION_MODIFIER_NAME,
					v.JUSTIFICATION_MODIFIER_ID,
					v.JUSTIFICATION_MODIFIED_DATE,
					v.JUSTIFICATION_SKILL_EXP,
					v.JUSTIFICATION_AGENCY_GOAL,
					v.SELECTEE_ELIGIBILITY,
					v.HRS_RVW_CERT,
					v.HRS_NOT_SPT_RSN,
					v.RVW_HRS,
					v.HRS_RVW_DATE,
					v.RCMD_LA_RATE,
					v.APPROVAL_SO_VALUE,
					v.APPROVAL_SO_ACTING,
					v.APPROVAL_SO,
					v.APPROVAL_SO_RESP_DATE,
					v.APPROVAL_COC_VALUE,
					v.APPROVAL_COC_ACTING,
					v.APPROVAL_COC,
					v.APPROVAL_COC_RESP_DATE,
					v.APPROVAL_DGHO_VALUE,
					v.APPROVAL_DGHO_ACTING,
					v.APPROVAL_DGHO,
					v.APPROVAL_DGHO_RESP_DATE,
					v.APPROVAL_TABG_VALUE,
					v.APPROVAL_TABG_ACTING,
					v.APPROVAL_TABG,
					v.APPROVAL_TABG_RESP_DATE,
					v.APPROVER_NOTES);

			DELETE INCENTIVES_LE_CRED WHERE PROC_ID = I_PROCID;
			INSERT INTO INCENTIVES_LE_CRED(PROC_ID,
				SEQ_NUM,
				START_DATE,
				END_DATE,
				WORK_SCHEDULE,
				POS_TITLE,
				CALCULATED_YEARS,
				CALCULATED_MONTHS,
				CREDITABLE_YEARS,
				CREDITABLE_MONTHS)
			SELECT 
				v.PROC_ID,
				v.SEQ_NUM,
				v.START_DATE,
				v.END_DATE,
				v.WORK_SCHEDULE,
				v.POS_TITLE,
				v.CALCULATED_YEARS,
				v.CALCULATED_MONTHS,
				v.CREDITABLE_YEARS,
				v.CREDITABLE_MONTHS
			FROM VW_INCENTIVES_LE_CRED v
			WHERE PROC_ID = I_PROCID;
		END IF;
	END IF;

	EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
END;
/


CREATE OR REPLACE PROCEDURE SP_UPDATE_INCENTIVES_TABLE
(
	I_PROCID            IN      NUMBER
	, I_FIELD_DATA      IN      XMLTYPE
)
IS
	V_XMLVALUE             XMLTYPE;
	V_INCENTIVE_TYPE     NVARCHAR2(50);

BEGIN
	IF I_PROCID IS NOT NULL AND I_PROCID > 0 THEN
		V_XMLVALUE := I_FIELD_DATA.EXTRACT('/formData/items/item[id="incentiveType"]/value/text()');
		IF V_XMLVALUE IS NOT NULL THEN
			V_INCENTIVE_TYPE := V_XMLVALUE.GETSTRINGVAL();
		ELSE
			V_INCENTIVE_TYPE := NULL;
		END IF;

		SP_UPDATE_INCENTIVES_COM_TABLE(I_PROCID);

		IF 'PCA' = V_INCENTIVE_TYPE THEN
			SP_UPDATE_INCENTIVES_PCA_TABLE(I_PROCID);
		ELSIF 'PDP' = V_INCENTIVE_TYPE THEN
			SP_UPDATE_INCENTIVES_PDP_TABLE(I_PROCID);
		ELSIF 'SAM' = V_INCENTIVE_TYPE THEN
			SP_UPDATE_INCENTIVES_SAM_TABLE(I_PROCID);
		ELSIF 'LE' = V_INCENTIVE_TYPE THEN
			SP_UPDATE_INCENTIVES_LE_TABLE(I_PROCID);
		END IF;
	END IF;

	EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
END;
/

--------------------------------------------------------
--  DDL for Function FN_GET_CASE_CATEGORY
--------------------------------------------------------

/**
 * Get case categories from case category IDs
 *
 *
 * @param I_CASE_CATEGORY_IDS - Case category lookup IDs with comma delimiter 
 *
 * @return NVARCHAR2 - Case categories for the input IDs with comma delimiter
 */
CREATE OR REPLACE FUNCTION FN_GET_CASE_CATEGORY
(
	I_CASE_CATEGORY_IDS IN  VARCHAR2	
)
RETURN VARCHAR2
IS
	V_RETURN_VAL    VARCHAR2(600);
	V_VALUE  VARCHAR2(100);	
    V_CATEGORY  VARCHAR2(200);
    V_ITER  NUMBER(1);
BEGIN
    --DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_CASE_CATEGORY -------');
    --DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
    --DBMS_OUTPUT.PUT_LINE('    I_CASE_CATEGORY_IDS         = ' || I_CASE_CATEGORY_IDS );

    V_ITER := 1;
    IF I_CASE_CATEGORY_IDS IS NOT NULL THEN        
        SELECT REGEXP_SUBSTR (I_CASE_CATEGORY_IDS, '[^,]+', 1, 1) INTO V_VALUE FROM DUAL;
        IF V_VALUE IS NOT NULL THEN
		    SELECT L.TBL_LABEL INTO V_CATEGORY FROM TBL_LOOKUP L WHERE L.TBL_ID = V_VALUE AND ROWNUM = 1;
		    V_RETURN_VAL := V_CATEGORY;
	    END IF;
        
        WHILE V_VALUE IS NOT NULL
        LOOP
            V_ITER := V_ITER + 1;
            SELECT REGEXP_SUBSTR (I_CASE_CATEGORY_IDS, '[^,]+', 1, V_ITER) INTO V_VALUE FROM DUAL;
            IF V_VALUE IS NOT NULL THEN
		        SELECT L.TBL_LABEL INTO V_CATEGORY FROM TBL_LOOKUP L WHERE L.TBL_ID = V_VALUE AND ROWNUM = 1;
		        V_RETURN_VAL := V_RETURN_VAL || ', ' || V_CATEGORY;
	        END IF;
        END LOOP;

    END IF;

    RETURN V_RETURN_VAL;
EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_CASE_CATEGORY -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;

/

/**
 * Get 2nd sub organization by admin code
 *
 *
 * @param I_ADMIN_CD - Admin Code
 *
 * @return NVARCHAR2 - 2nd Sub organization code and description
 */
create or replace FUNCTION FN_GET_2ND_SUB_ORG
(
	I_ADMIN_CD IN  VARCHAR2	
)
RETURN VARCHAR2
IS
	V_RETURN_VAL    VARCHAR2(300);
	V_VALUE  VARCHAR2(30);	
    V_VALUE2 VARCHAR2(30);
    V_ORG_NAME  VARCHAR2(255);    
BEGIN
    --DBMS_OUTPUT.PUT_LINE('------- START: FN_GET_2ND_SUB_ORG -------');
    --DBMS_OUTPUT.PUT_LINE('-- PARAMETERS --');
    --DBMS_OUTPUT.PUT_LINE('    I_ADMIN_CD         = ' || I_ADMIN_CD );
    --Revision History
    --2/14/2019 : Sandesh Gurung : Added more Admin Codes to evaluate
    --2/14/2019 : Sandesh Gurung : Added length of an Admin Code in the evaluation logic 
    --2/15/2019 : Ginnah Lee : Fixed as it returned only for length of 3 and 4 admin codes.   

    SELECT SUBSTR(I_ADMIN_CD, 1, 2) INTO V_VALUE FROM DUAL;
    IF V_VALUE != 'FC' THEN    
        V_RETURN_VAL := 'N/A';
    ELSE    
        IF LENGTH(I_ADMIN_CD) = 2 THEN
            V_RETURN_VAL := 'FC';
        ELSE
            SELECT SUBSTR(I_ADMIN_CD, 3, 1) INTO V_VALUE FROM DUAL;
            CASE V_VALUE
                WHEN 'A' THEN V_RETURN_VAL := 'FCA';
                WHEN 'B' THEN V_RETURN_VAL := 'FCB';
                WHEN 'C' THEN V_RETURN_VAL := 'FCC';
                WHEN 'E' THEN V_RETURN_VAL := 'FCE';
                WHEN 'F' THEN V_RETURN_VAL := 'FCF';
                WHEN 'G' THEN V_RETURN_VAL := 'FCG';
                WHEN 'H' THEN V_RETURN_VAL := 'FCH';
                WHEN 'J' THEN V_RETURN_VAL := 'FCJ';
                WHEN 'K' THEN V_RETURN_VAL := 'FCK';
                WHEN 'L' THEN V_RETURN_VAL := 'FCL';
                WHEN 'M' THEN   
                    SELECT SUBSTR(I_ADMIN_CD, 4, 1) INTO V_VALUE2 FROM DUAL;
                    CASE V_VALUE2
                        WHEN '1' THEN V_RETURN_VAL := 'FCM1';
                        WHEN '2' THEN V_RETURN_VAL := 'FCM2';
                        WHEN '3' THEN V_RETURN_VAL := 'FCM3';
                        WHEN '4' THEN V_RETURN_VAL := 'FCM4';
                        WHEN 'A' THEN V_RETURN_VAL := 'FCMA';
                        WHEN 'B' THEN V_RETURN_VAL := 'FCMB';
                        WHEN 'C' THEN V_RETURN_VAL := 'FCMC';
                        WHEN 'E' THEN V_RETURN_VAL := 'FCME';
                        WHEN 'F' THEN V_RETURN_VAL := 'FCMF';
                        WHEN 'G' THEN V_RETURN_VAL := 'FCMG';
                        WHEN 'H' THEN V_RETURN_VAL := 'FCMH';
                        WHEN 'J' THEN V_RETURN_VAL := 'FCMJ';
                        WHEN 'K' THEN V_RETURN_VAL := 'FCMK';
                        WHEN 'L' THEN V_RETURN_VAL := 'FCML';
                        WHEN 'M' THEN V_RETURN_VAL := 'FCMM';                    
                        WHEN 'N' THEN V_RETURN_VAL := 'FCMN';
                        WHEN 'P' THEN V_RETURN_VAL := 'FCMP';
                        WHEN 'Q' THEN V_RETURN_VAL := 'FCMQ';                        
                        ELSE
                            V_RETURN_VAL := 'FCM';
                    END CASE;
                WHEN 'N' THEN V_RETURN_VAL := 'FCN';
                WHEN 'P' THEN V_RETURN_VAL := 'FCP';
                WHEN 'Q' THEN V_RETURN_VAL := 'FCQ';
                WHEN 'R' THEN V_RETURN_VAL := 'FCR';
                WHEN 'S' THEN V_RETURN_VAL := 'FCS';
                WHEN 'T' THEN V_RETURN_VAL := 'FCT';
                WHEN 'V' THEN V_RETURN_VAL := 'FCV';
                WHEN 'W' THEN V_RETURN_VAL := 'FCW';
                WHEN 'X' THEN V_RETURN_VAL := 'FCX';
                ELSE
                    V_RETURN_VAL := 'N/A';    
            END CASE;                
        END IF; 
    END IF;

    IF V_RETURN_VAL != 'N/A' THEN         
        SELECT COUNT(AC_ADMIN_CD_DESCR) INTO V_VALUE FROM ADMIN_CODES WHERE AC_ADMIN_CD = V_RETURN_VAL;
        IF V_VALUE > 0 THEN
            SELECT AC_ADMIN_CD_DESCR INTO V_ORG_NAME FROM ADMIN_CODES WHERE AC_ADMIN_CD = V_RETURN_VAL;            
            V_RETURN_VAL := V_RETURN_VAL || ' - ' || V_ORG_NAME;
        END IF;
    END IF;
    
    RETURN V_RETURN_VAL;
EXCEPTION
	WHEN OTHERS THEN
		SP_ERROR_LOG();
		--DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_2ND_SUB_ORG -------------------');
		--DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
		--DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
		RETURN NULL;
END;
/

---------------------------------------------------------
--  DDL for VW_ERLR_GEN
--------------------------------------------------------

CREATE OR REPLACE VIEW VW_ERLR_GEN
AS
SELECT
    EG.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EG.GEN_PRIMARY_SPECIALIST AND ROWNUM = 1)  AS GEN_PRIMARY_SPECIALIST_NAME	
	, EG.GEN_PRIMARY_SPECIALIST AS GEN_PRIMARY_SPECIALIST_ID
	, (SELECT M.NAME FROM BIZFLOW.MEMBER M WHERE M.MEMBERID = EG.GEN_SECONDARY_SPECIALIST AND ROWNUM = 1)  AS GEN_SECONDARY_SPECIALIST_NAME
	, EG.GEN_CUSTOMER_NAME
	, EG.GEN_CUSTOMER_PHONE
	, EG.GEN_CUSTOMER_ADMIN_CD
	, EG.GEN_CUSTOMER_ADMIN_CD_DESC
	, EG.GEN_EMPLOYEE_NAME
	, EG.GEN_EMPLOYEE_PHONE
	, EG.GEN_EMPLOYEE_ADMIN_CD
	, EG.GEN_EMPLOYEE_ADMIN_CD_DESC
	, FN_GET_2ND_SUB_ORG(EG.GEN_EMPLOYEE_ADMIN_CD) AS GEN_EMPLOYEE_2ND_SUB_ORG
	, EG.GEN_CASE_DESC
	, EG.GEN_CASE_STATUS
	, EG.GEN_CUST_INIT_CONTACT_DT
	, EG.GEN_PRIMARY_REP_AFFILIATION
	, EG.GEN_CMS_PRIMARY_REP_ID AS GEN_CMS_PRIMARY_REP_NAME
	, EG.GEN_CMS_PRIMARY_REP_PHONE
	, EG.GEN_NON_CMS_PRIMARY_FNAME
	, EG.GEN_NON_CMS_PRIMARY_MNAME
	, EG.GEN_NON_CMS_PRIMARY_LNAME
	, EG.GEN_NON_CMS_PRIMARY_EMAIL
	, EG.GEN_NON_CMS_PRIMARY_PHONE
	, EG.GEN_NON_CMS_PRIMARY_ORG
	, EG.GEN_NON_CMS_PRIMARY_ADDR
	, (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = EG.GEN_CASE_TYPE AND ROWNUM = 1) AS GEN_CASE_TYPE
	, FN_GET_CASE_CATEGORY(EG.GEN_CASE_CATEGORY) AS GEN_CASE_CATEGORY
	, EG.GEN_INVESTIGATION
	, EG.GEN_INVESTIGATE_START_DT
	, EG.GEN_INVESTIGATE_END_DT
	, EG.GEN_STD_CONDUCT
	, EG.GEN_STD_CONDUCT_TYPE
	, EG.CC_FINAL_ACTION
    , EG.CC_FINAL_ACTION_OTHER
	, EG.CC_CASE_COMPLETE_DT
	, (SELECT STATE FROM BIZFLOW.PROCS P WHERE P.PROCID = EC.PROCID) AS BF_PROCS_STATE
	, (SELECT MOD_DT FROM TBL_FORM_DTL FD WHERE FD.PROCID = EC.PROCID) AS LAST_MOD_DTS
	, ETPH.THRD_PRTY_APPEAL_TYPE
	, EG.CANCEL_REASON
FROM
	ERLR_GEN EG
    LEFT OUTER JOIN ERLR_CASE EC ON EG.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
	LEFT OUTER JOIN ERLR_3RDPARTY_HEAR ETPH ON EG.ERLR_CASE_NUMBER = ETPH.ERLR_CASE_NUMBER
;
/
--------------------------------------------------------
--  DDL for VW_ERLR_CNDT_ISSUE
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_CNDT_ISSUE
AS
SELECT
    CI.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , CI_ACTION_TYPE
	, CASE WHEN CI.CI_ADMIN_INVESTIGATORY_LEAVE = '1'  THEN 'Yes' ELSE 'No' END AS CI_ADMIN_INVESTIGATORY_LEAVE	
	, CASE WHEN CI.CI_ADMIN_NOTICE_LEAVE = '1'  THEN 'Yes' ELSE 'No' END AS CI_ADMIN_NOTICE_LEAVE
	, CI.CI_LEAVE_START_DT
	, CI.CI_LEAVE_END_DT
	, CI.CI_APPROVAL_NAME
	, CI.CI_LEAVE_START_DT_2
	, CI.CI_LEAVE_END_DT_2
	, CI.CI_APPROVAL_NAME_2
	, CI.CI_PROP_ACTION_ISSUED_DT
	, CI.CI_ORAL_PREZ_REQUESTED
	, CI.CI_ORAL_PREZ_DT
	, CI.CI_ORAL_RESPONSE_SUBMITTED
	, CI.CI_RESPONSE_DUE_DT
	, CI.CI_WRITTEN_RESPONSE_SBMT_DT
	, CI.CI_POS_TITLE
	, CI.CI_PPLAN
	, CI.CI_SERIES
	, CI.CI_CURRENT_INFO_GRADE
	, CI.CI_CURRENT_INFO_STEP
	, CI.CI_PROPOSED_POS_TITLE
	, CI.CI_PROPOSED_PPLAN
	, CI.CI_PROPOSED_SERIES
	, CI.CI_PROPOSED_INFO_GRADE
	, CI.CI_PROPOSED_INFO_STEP
	, CI.CI_FINAL_POS_TITLE
	, CI.CI_FINAL_PPLAN
	, CI.CI_FINAL_SERIES
	, CI.CI_FINAL_INFO_GRADE
	, CI.CI_FINAL_INFO_STEP
	, CI.CI_DEMO_FINAL_AGNCY_DCSN
	, CI.CI_DECIDING_OFFCL
	, CI.CI_DECISION_ISSUED_DT
	, CI.CI_DEMO_FINAL_AGENCY_EFF_DT
	, CI.CI_NUMB_DAYS
	, CI_COUNSEL_TYPE
	, CI.CI_COUNSEL_ISSUED_DT
	, CI.CI_SICK_LEAVE_ISSUED_DT
	, CI.CI_RESTRICTION_ISSED_DT	
	, CI.CI_SL_WARN_ISSUE
	, CI.CI_NOTICE_ISSUED_DT
	, CI.CI_EFFECTIVE_DT
	, CI.CI_CURRENT_ADMIN_CODE
	, CI.CI_RE_ASSIGNMENT_CURR_ORG
	, CI.CI_FINAL_ADMIN_CODE
	, CI.CI_RE_ASSIGNMENT_FINAL_ORG
	, CI.CI_REMOVAL_PROP_ACTION_DT
	, CI.CI_EMP_NOTICE_LEAVE_PLACED
	, CI.CI_REMOVAL_NOTICE_START_DT
	, CI.CI_REMOVAL_NOTICE_END_DT
	, CI.CI_RMVL_ORAL_PREZ_RQSTED
	, CI.CI_REMOVAL_ORAL_PREZ_DT
	, CI.CI_RMVL_WRTN_RESPONSE
	, CI.CI_WRITTEN_RESPONSE_DUE_DT
	, CI.CI_WRITTEN_SUBMITTED_DT
	, CI_RMVL_FINAL_AGNCY_DCSN
	, CI.CI_DECIDING_OFFCL_NAME
	, CI.CI_RMVL_DATE_DCSN_ISSUED
	, CI.CI_REMOVAL_EFFECTIVE_DT
	, CI.CI_RMVL_NUMB_DAYS
	, CI_SUSPENTION_TYPE
	, CI.CI_SUSP_PROP_ACTION_DT
	, CI.CI_SUSP_ORAL_PREZ_REQUESTED
	, CI.CI_SUSP_ORAL_PREZ_DT
	, CI.CI_SUSP_WRITTEN_RESP
	, CI.CI_SUSP_WRITTEN_RESP_DUE_DT
	, CI.CI_SUSP_WRITTEN_RESP_DT
	, CI_SUSP_FINAL_AGNCY_DCSN
	, CI.CI_SUSP_DECIDING_OFFCL_NAME
	, CI.CI_SUSP_DECISION_ISSUED_DT
	, CI.CI_SUSP_EFFECTIVE_DECISION_DT
	, CI.CI_SUS_NUMB_DAYS
	, CI.CI_REPRIMAND_ISSUE_DT
	, CI.CI_EMP_APPEAL_DECISION
    , CASE WHEN CI_ACTION_TYPE = 'Demotion' THEN CI_DEMO_FINAL_AGENCY_EFF_DT
    WHEN CI_ACTION_TYPE = 'Removal' THEN CI_REMOVAL_EFFECTIVE_DT
    WHEN CI_ACTION_TYPE = 'Counseling' THEN CI_COUNSEL_ISSUED_DT
    WHEN CI_ACTION_TYPE = 'Reprimand' THEN CI_REPRIMAND_ISSUE_DT
    ELSE null END AS CI_DATE_ACTION_TAKEN
FROM
	ERLR_CNDT_ISSUE CI
    LEFT OUTER JOIN ERLR_CASE EC ON CI.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/


--------------------------------------------------------
--  DDL for VW_ERLR_APPEAL
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_APPEAL
AS
SELECT
    A.ERLR_CASE_NUMBER
    , A.EC.ERLR_JOB_REQ_NUMBER
    , A.EC.PROCID    
    , A.EC.ERLR_CASE_CREATE_DT
    , AP_ERLR_APPEAL_TYPE
	, A.AP_ERLR_APPEAL_FILE_DT
	, A.AP_ERLR_APPEAL_TIMING
	, A.AP_APPEAL_HEARING_REQUESTED
	, A.AP_ARBITRATOR_LAST_NAME
	, A.AP_ARBITRATOR_FIRST_NAME
	, A.AP_ARBITRATOR_MIDDLE_NAME
	, A.AP_ARBITRATOR_EMAIL
	, A.AP_ARBITRATOR_PHONE_NUM
	, A.AP_ARBITRATOR_ORG_AFFIL
	, A.AP_ARBITRATOR_MAILING_ADDR
	, A.AP_ERLR_PREHEARING_DT
	, A.AP_ERLR_HEARING_DT
	, A.AP_POSTHEARING_BRIEF_DUE
	, A.AP_FINAL_ARBITRATOR_DCSN_DT
	, A.AP_ERLR_EXCEPTION_FILED
	, A.AP_ERLR_EXCEPTION_FILE_DT
	, A.AP_RESPON_TO_EXCEPT_DUE
	, A.AP_FINAL_FLRA_DECISION_DT
	, A.AP_ERLR_STEP_DECISION_DT
	, A.AP_ERLR_ARBITRATION_INVOKED
	, A.AP_ARBITRATOR_LAST_NAME_3
	, A.AP_ARBITRATOR_FIRST_NAME_3
	, A.AP_ARBITRATOR_MIDDLE_NAME_3
	, A.AP_ARBITRATOR_EMAIL_3
	, A.AP_ARBITRATOR_PHONE_NUM_3
	, A.AP_ARBITRATOR_ORG_AFFIL_3
	, A.AP_ARBITRATION_MAILING_ADDR_3
	, A.AP_ERLR_PREHEARING_DT_2
	, A.AP_ERLR_HEARING_DT_2
	, A.AP_POSTHEARING_BRIEF_DUE_2
	, A.AP_FINAL_ARBITRATOR_DCSN_DT_2
	, A.AP_ERLR_EXCEPTION_FILED_2
	, A.AP_ERLR_EXCEPTION_FILE_DT_2
	, A.AP_RESPON_TO_EXCEPT_DUE_2
	, A.AP_FINAL_FLRA_DECISION_DT_2
	, A.AP_ARBITRATOR_LAST_NAME_2
	, A.AP_ARBITRATOR_FIRST_NAME_2
	, A.AP_ARBITRATOR_MIDDLE_NAME_2
	, A.AP_ARBITRATOR_EMAIL_2
	, A.AP_ARBITRATOR_PHONE_NUM_2
	, A.AP_ARBITRATOR_ORG_AFFIL_2
	, A.AP_ARBITRATION_MAILING_ADDR_2
	, A.AP_ERLR_PREHEARING_DT_SC
	, A.AP_ERLR_HEARING_DT_SC
	, A.AP_ARBITRATOR_LAST_NAME_4
	, A.AP_ARBITRATOR_FIRST_NAME_4
	, A.AP_ARBITRATOR_MIDDLE_NAME_4
	, A.AP_ARBITRATOR_EMAIL_4
	, A.AP_ARBITRATOR_PHONE_NUM_4
	, A.AP_ARBITRATOR_ORG_AFFIL_4
	, A.AP_ARBITRATOR_MAILING_ADDR_4
	, A.AP_DT_SETTLEMENT_DISCUSSION
	, A.AP_DT_PREHEARING_DISCLOSURE
    , A.AP_DT_AGNCY_FILE_RESPON_DUE
    , A.AP_ERLR_PREHEARING_DT_MSPB
	, A.AP_WAS_DISCOVERY_INITIATED
	, A.AP_ERLR_DT_DISCOVERY_DUE
	, A.AP_ERLR_HEARING_DT_MSPB
	, A.AP_PETITION_FILE_DT_MSPB
	, A.AP_WAS_PETITION_FILED_MSPB
	, A.AP_INITIAL_DECISION_DT_MSPB
	, A.AP_FINAL_BOARD_DCSN_DT_MSPB
	, A.AP_DT_SETTLEMENT_DISCUSSION_2
	, A.AP_DT_PREHEARING_DISCLOSURE_2
	, A.AP_DT_AGNCY_FILE_RESPON_DUE_2
	, A.AP_ERLR_PREHEARING_DT_FLRA
	, A.AP_ERLR_HEARING_DT_FLRA
	, A.AP_INITIAL_DECISION_DT_FLRA
	, A.AP_WAS_PETITION_FILED_FLRA
	, A.AP_PETITION_FILE_DT_FLRA
	, A.AP_FINAL_BOARD_DCSN_DT_FLRA
FROM
	ERLR_APPEAL A
    LEFT OUTER JOIN ERLR_CASE EC ON A.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/


--------------------------------------------------------
--  DDL for VW_ERLR_WGI_DNL
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_WGI_DNL
AS
SELECT
    WD.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , WGI_DTR_DENIAL_ISSUED_DT
	, WGI_DTR_EMP_REQ_RECON
	, WGI_DTR_RECON_REQ_DT
	, WGI_DTR_RECON_ISSUE_DT
	, WGI_DTR_DENIED
	, WGI_DTR_DENIAL_ISSUE_TO_EMP_DT
	, WGI_RVW_REDTR_NOTI_ISSUED_DT
	, WGI_REVIEW_DTR_FAVORABLE
	, WGI_REVIEW_EMP_REQ_RECON
	, WGI_REVIEW_RECON_REQ_DT
	, WGI_REVIEW_RECON_ISSUE_DT
	, WGI_REVIEW_DENIED
	, WGI_EMP_APPEAL_DECISION    
FROM
	ERLR_WGI_DNL WD
    LEFT OUTER JOIN ERLR_CASE EC ON WD.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/


--------------------------------------------------------
--  DDL for VW_ERLR_MEDDOC
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_MEDDOC
AS
SELECT
    M.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = M.MD_REQUEST_REASON AND ROWNUM = 1) AS MD_REQUEST_REASON
	, MD_MED_DOC_SBMT_DEADLINE_DT
	, MD_FMLA_DOC_SBMT_DT
	, MD_FMLA_BEGIN_DT
	, MD_FMLA_APROVED
	, (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = M.MD_FMLA_DISAPRV_REASON AND ROWNUM = 1) AS MD_FMLA_DISAPRV_REASON
	, MD_FMLA_GRIEVANCE
	, MD_MEDEXAM_EXTENDED
	, MD_MEDEXAM_ACCEPTED
	, MD_MEDEXAM_RECEIVED_DT
	, MD_DOC_SUBMITTED
	, MD_DOC_SBMT_DT
	, MD_DOC_SBMT_FOH
	, MD_DOC_REVIEW_OUTCOME
	, MD_DOC_ADMTV_ACCEPTABLE
	, (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = M.MD_DOC_ADMTV_REJECT_REASON AND ROWNUM = 1) AS MD_DOC_ADMTV_REJECT_REASON

FROM
	ERLR_MEDDOC M
    LEFT OUTER JOIN ERLR_CASE EC ON M.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/

--------------------------------------------------------
--  DDL for VW_ERLR_PERF_ISSUE
--------------------------------------------------------
CREATE OR REPLACE FORCE VIEW "HHS_CMS_HR"."VW_ERLR_PERF_ISSUE" 
AS 
  SELECT
    PI.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = PI_ACTION_TYPE AND ROWNUM = 1) AS PI_ACTION_TYPE
	, PI_NEXT_WGI_DUE_DT
	, PI_PERF_COUNSEL_ISSUE_DT
	, PI_CNSL_GRV_DECISION
	, PI_DMTN_PRPS_ACTN_ISSUE_DT
	, PI_DMTN_ORAL_PRSNT_REQ
	, PI_DMTN_ORAL_PRSNT_DT
	, PI_DMTN_WRTN_RESP_SBMT
	, PI_DMTN_WRTN_RESP_DUE_DT
	, PI_DMTN_WRTN_RESP_SBMT_DT
	, PI_DMTN_CUR_POS_TITLE
	, PI_DMTN_CUR_PAY_PLAN
	, PI_DMTN_CUR_JOB_SERIES
	, PI_DMTN_CUR_GRADE
	, PI_DMTN_CUR_STEP
	, PI_DMTN_PRPS_POS_TITLE
	, PI_DMTN_PRPS_PAY_PLAN
	, PI_DMTN_PRPS_JOB_SERIES
	, PI_DMTN_PRPS_GRADE
	, PI_DMTN_PRP_STEP
	, PI_DMTN_FIN_POS_TITLE
	, PI_DMTN_FIN_PAY_PLAN
	, PI_DMTN_FIN_JOB_SERIES
	, PI_DMTN_FIN_GRADE
	, PI_DMTN_FIN_STEP
	, (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = PI_ACTION_TYPE AND ROWNUM = 1) AS PI_DMTN_FIN_AGCY_DECISION
	, PI_DMTN_FIN_DECIDING_OFC
	, PI_DMTN_FIN_DECISION_ISSUE_DT
	, PI_DMTN_DECISION_EFF_DT
	, PI_DMTN_APPEAL_DECISION
	, PI_PIP_RSNBL_ACMDTN
	, PI_PIP_EMPL_SBMT_MEDDOC
	, PI_PIP_DOC_SBMT_FOH_RVW
	, PI_PIP_WGI_WTHLD
	, PI_PIP_WGI_RVW_DT
	, PI_PIP_MEDDOC_RVW_OUTCOME
	, PI_PIP_START_DT
	, PI_PIP_END_DT
	, PI_PIP_EXT_END_DT
	, PI_PIP_EXT_END_REASON
	, PI_PIP_EXT_END_NOTIFY_DT	
	, PI_PIP_ACTUAL_DT
	, PI_PIP_END_PRIOR_TO_PLAN
	, (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = PI_PIP_END_PRIOR_TO_PLAN_RSN AND ROWNUM = 1) AS PI_PIP_END_PRIOR_TO_PLAN_RSN
	, PI_PIP_SUCCESS_CMPLT
	, PI_PIP_PMAP_RTNG_SIGN_DT
	, PI_PIP_PMAP_RVW_SIGN_DT
	, (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = PI_PIP_PRPS_ACTN AND ROWNUM = 1) AS PI_PIP_PRPS_ACTN
	, PI_PIP_PRPS_ISSUE_DT
	, PI_PIP_ORAL_PRSNT_REQ
	, PI_PIP_ORAL_PRSNT_DT
	, PI_PIP_WRTN_RESP_SBMT
	, PI_PIP_WRTN_RESP_DUE_DT
	, PI_PIP_WRTN_SBMT_DT
	, (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = PI_PIP_FIN_AGCY_DECISION AND ROWNUM = 1) AS PI_PIP_FIN_AGCY_DECISION
	, PI_PIP_DECIDING_OFFICAL
	, PI_PIP_FIN_AGCY_DECISION_DT
	, PI_PIP_DECISION_ISSUE_DT
	, PI_PIP_EFF_ACTN_DT
	, PI_PIP_EMPL_GRIEVANCE
	, PI_PIP_APPEAL_DECISION
	, PI_REASGN_NOTICE_DT
	, PI_REASGN_EFF_DT
	, PI_REASGN_CUR_ADMIN_CD
	, PI_REASGN_CUR_ORG_NM
	, PI_REASGN_FIN_ADMIN_CD
	, PI_REASGN_FIN_ORG_NM
	, PI_RMV_PRPS_ACTN_ISSUE_DT
	, PI_RMV_EMPL_NOTC_LEV
	, PI_RMV_NOTC_LEV_START_DT
	, PI_RMV_NOTC_LEV_END_DT
	, PI_RMV_ORAL_PRSNT_REQ
	, PI_RMV_ORAL_PRSNT_DT
	, PI_RMV_WRTN_RESP_DUE_DT
	, PI_RMV_WRTN_RESP_SBMT_DT
	, (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = PI_RMV_FIN_AGCY_DECISION AND ROWNUM = 1) AS PI_RMV_FIN_AGCY_DECISION
	, PI_RMV_FIN_DECIDING_OFC
	, PI_RMV_DECISION_ISSUE_DT
	, PI_RMV_EFF_DT
	, PI_RMV_NUM_DAYS
	, PI_RMV_APPEAL_DECISION
	, (SELECT L.TBL_LABEL FROM TBL_LOOKUP L WHERE L.TBL_ID = PI_WRTN_NRTV_RVW_TYPE AND ROWNUM = 1) AS PI_WRTN_NRTV_RVW_TYPE
	, PI_WNR_SPCLST_RVW_CMPLT_DT
	, PI_WNR_MGR_RVW_RTNG_DT
	, PI_WNR_CRITICAL_ELM
	, PI_WNR_FIN_RATING
	, PI_WNR_RVW_OFC_CONCUR_DT
	, PI_WNR_WGI_WTHLD
	, PI_WNR_WGI_RVW_DT
    , PI_CLPD_ENTRANCE_DUTY_DT
    , PI_CLPD_NEXT_CLP_DUE_DT
    , PI_CLPD_PRE_WITHHELD
    , PI_CLPD_FIRST_WNI_DT
    , PI_CLPD_NEXT_REVIEW_DUE_DT
    , PI_CLPD_DAPI_DT
    , PI_CLPD_FIRST_WITHHELD_DT
    , PI_CLPD_PLANNED_REVIEW_DT
    , PI_CLPD_DETER_FAV
    , PI_CLPD_SECOND_WNI_DT
    , PI_CLPD_DECISION_ISSUED_DT
    , PI_CLPD_DECIDING_OFFCL
    , PI_CLPD_EMP_GRIEVANCE
    , PI_CLPD_EMP_APPEAL_DECISION
FROM
	ERLR_PERF_ISSUE PI
    LEFT OUTER JOIN ERLR_CASE EC ON PI.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;

/

--------------------------------------------------------
--  DDL for VW_ERLR_INVESTIGATION
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_INVESTIGATION
AS
SELECT
    I.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , INVESTIGATION_TYPE
	, I_MISCONDUCT_FOUND
FROM
	ERLR_INVESTIGATION I
    LEFT OUTER JOIN ERLR_CASE EC ON I.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/

--------------------------------------------------------
--  DDL for VW_ERLR_INFO_REQUEST
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_INFO_REQUEST
AS
SELECT
    IR.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , IR_REQUESTER
	, IR_CMS_REQUESTER_NAME
	, IR_CMS_REQUESTER_PHONE
	, IR_NCMS_REQUESTER_LAST_NAME
	, IR_NCMS_REQUESTER_FIRST_NAME
	, IR_NON_CMS_REQUESTER_PHONE
	, IR_NON_CMS_REQUESTER_EMAIL
	, IR_NCMS_REQUESTER_ORG_AFFIL
	, IR_SUBMIT_DT
	, IR_MEET_PTCLRIZED_NEED_STND
	, IR_RSNABLY_AVAIL_N_NECESSARY
	, IR_PRTCT_DISCLOSURE_BY_LAW
	, IR_MAINTAINED_BY_AGENCY
	, IR_COLLECTIVE_BARGAINING_UNIT
	, IR_APPROVE
	, IR_APPEAL_DENIAL
	, IR_PROVIDE_DT
    , IR_NCMS_REQUESTER_MN

FROM
	ERLR_INFO_REQUEST IR
    LEFT OUTER JOIN ERLR_CASE EC ON IR.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/

--------------------------------------------------------
--  DDL for VW_ERLR_3RDPARTY_HEAR
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_3RDPARTY_HEAR
AS
SELECT
    TPH.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , THRD_PRTY_APPEAL_TYPE
	, THRD_PRTY_APPEAL_FILE_DT
	, THRD_PRTY_ASSISTANCE_REQ_DT
	, THRD_PRTY_HEARING_TIMING
	, THRD_PRTY_HEARING_REQUESTED
	, THRD_PRTY_STEP_DECISION_DT
	, THRD_PRTY_ARBITRATION_INVOKED
	, THRD_PRTY_ARBIT_LNM_3
	, THRD_PRTY_ARBIT_FNM_3
	, THRD_PRTY_ARBIT_MNM_3
	, THRD_PRTY_ARBIT_EMAIL_3
	, THRD_ERLR_ARBIT_PHONE_NUM_3
	, THRD_PRTY_ARBIT_ORG_AFFIL_3
	, THRD_PRTY_ARBIT_MAILING_ADDR_3
	, THRD_PRTY_PREHEARING_DT_2
	, THRD_PRTY_HEARING_DT_2
	, THRD_PRTY_POSTHEAR_BRIEF_DUE_2
	, THRD_PRTY_FNL_ARBIT_DCSN_DT_2
	, THRD_PRTY_EXCEPTION_FILED_2
	, THRD_PRTY_EXCEPTION_FILE_DT_2
	, THRD_PRTY_RSPS_TO_EXCPT_DUE_2
	, THRD_PRTY_FNL_FLRA_DCSN_DT_2
	, THRD_PRTY_ARBIT_LNM
	, THRD_PRTY_ARBIT_FNM
	, THRD_PRTY_ARBIT_MNM
	, THRD_PRTY_ARBIT_EMAIL
	, THRD_ERLR_ARBIT_PHONE_NUM
	, THRD_PRTY_ARBIT_ORG_AFFIL
	, THRD_PRTY_ARBIT_MAILING_ADDR
	, THRD_PRTY_PREHEARING_DT
	, THRD_PRTY_HEARING_DT
	, THRD_PRTY_POSTHEAR_BRIEF_DUE
	, THRD_PRTY_FNL_ARBIT_DCSN_DT
	, THRD_PRTY_EXCEPTION_FILED
	, THRD_PRTY_EXCEPTION_FILE_DT
	, THRD_PRTY_RSPS_TO_EXCPT_DUE
	, THRD_PRTY_FNL_FLRA_DCSN_DT
	, THRD_PRTY_ARBIT_LNM_4
	, THRD_PRTY_ARBIT_FNM_4
	, THRD_PRTY_ARBIT_MNM_4
	, THRD_PRTY_ARBIT_EMAIL_4
	, THRD_ERLR_ARBIT_PHONE_NUM_4
	, THRD_PRTY_ARBIT_ORG_AFFIL_4
	, THRD_PRTY_ARBIT_MAILING_ADDR_4
	, THRD_PRTY_DT_STLMNT_DSCUSN
	, THRD_PRTY_DT_PREHEAR_DSCLS
	, THRD_PRTY_DT_AGNCY_RSP_DUE
	, THRD_PRTY_PREHEARING_DT_MSPB
	, THRD_PRTY_WAS_DSCVRY_INIT
	, THRD_PRTY_DT_DISCOVERY_DUE
	, THRD_PRTY_HEARING_DT_MSPB
	, THRD_PRTY_INIT_DCSN_DT_MSPB
	, THRD_PRTY_WAS_PETI_FILED_MSPB
	, THRD_PRTY_PETITION_RV_DT
	, THRD_PRTY_FNL_BRD_DCSN_DT_MSPB
	, THRD_PRTY_DT_STLMNT_DSCUSN_2
	, THRD_PRTY_DT_PREHEAR_DSCLS_2
	, THRD_PRTY_PREHEARING_CONF
	, THRD_PRTY_HEARING_DT_FLRA
	, THRD_PRTY_DECISION_DT_FLRA
	, THRD_PRTY_TIMELY_REQ
    , THRD_PRTY_PROC_ORDER
	, THRD_PRTY_PANEL_MEMBER_LNAME
	, THRD_PRTY_PANEL_MEMBER_FNAME
	, THRD_PRTY_PANEL_MEMBER_MNAME
	, THRD_PRTY_PANEL_MEMBER_EMAIL
	, THRD_PRTY_PANEL_MEMBER_PHONE
	, THRD_PRTY_PANEL_MEMBER_ORG
	, THRD_PRTY_PANEL_MEMBER_MAILING
	, THRD_PRTY_PANEL_DESCR
FROM
	ERLR_3RDPARTY_HEAR TPH
    LEFT OUTER JOIN ERLR_CASE EC ON TPH.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/

--------------------------------------------------------
--  DDL for VW_ERLR_PROB_ACTION
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_PROB_ACTION
AS
SELECT
    PA.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , PPA_ACTION_TYPE
	, CASE WHEN PPA_TERMINATION_TYPE = 'pre_emp' THEN 'Pre-Employment'
    WHEN PPA_TERMINATION_TYPE = 'probation' THEN 'Probationary'
    ELSE null END AS PPA_TERMINATION_TYPE
	, PPA_TERM_PROP_ACTION_DT
	, PPA_TERM_ORAL_PREZ_REQUESTED
	, PPA_TERM_ORAL_PREZ_DT
	, PPA_TERM_WRITTEN_RESP
	, PPA_TERM_WRITTEN_RESP_DUE_DT
	, PPA_TERM_WRITTEN_RESP_DT
	, PPA_TERM_AGENCY_DECISION	
    , PPA_TERM_DECIDING_OFFCL_NAME
	, PPA_TERM_DECISION_ISSUED_DT
	, PPA_TERM_EFFECTIVE_DECISION_DT
	, PPA_PROB_TERM_DCSN_ISSUED_DT
	, CASE WHEN PPA_PROBATION_CONDUCT = 'tru' THEN 'Yes' ELSE 'No' END AS PPA_PROBATION_CONDUCT
	, CASE WHEN PPA_PROBATION_PERFORMANCE = 'tru' THEN 'Yes' ELSE 'No' END AS PPA_PROBATION_PERFORMANCE
	, PPA_APPEAL_GRIEVANCE_DEADLINE
	, PPA_EMP_APPEAL_DECISION
	, PPA_PROP_ACTION_ISSUED_DT
	, PPA_ORAL_PREZ_REQUESTED
	, PPA_ORAL_PREZ_DT
	, PPA_ORAL_RESPONSE_SUBMITTED
	, PPA_RESPONSE_DUE_DT
	, PPA_WRITTEN_RESPONSE_SBMT_DT
	, PPA_POS_TITLE
	, PPA_PPLAN
	, PPA_SERIES
	, PPA_CURRENT_INFO_GRADE
	, PPA_CURRENT_INFO_STEP
	, PPA_PROPOSED_POS_TITLE
	, PPA_PROPOSED_PPLAN
	, PPA_PROPOSED_SERIES
	, PPA_PROPOSED_INFO_GRADE
	, PPA_PROPOSED_INFO_STEP
	, PPA_FINAL_POS_TITLE
	, PPA_FINAL_PPLAN
	, PPA_FINAL_SERIES
	, PPA_FINAL_INFO_GRADE
	, PPA_FINAL_INFO_STEP
	, PPA_NOTICE_ISSUED_DT
	, PPA_DEMO_FINAL_AGENCY_DECISION
	, PPA_DECIDING_OFFCL
	, PPA_DECISION_ISSUED_DT
	, PPA_DEMO_FINAL_AGENCY_EFF_DT
	, PPA_NUMB_DAYS
	, PPA_EFFECTIVE_DT
	, PPA_CURRENT_ADMIN_CODE
	, PPA_RE_ASSIGNMENT_CURR_ORG
	, PPA_FINAL_ADMIN_CODE
	, PPA_FINAL_ADMIN_CODE_FINAL_ORG
    , CASE WHEN PPA_ACTION_TYPE = 'Termination' and PPA_TERMINATION_TYPE = 'pre_emp' THEN PPA_TERM_EFFECTIVE_DECISION_DT
    WHEN PPA_ACTION_TYPE = 'Termination' and PPA_TERMINATION_TYPE = 'probation' THEN PPA_PROB_TERM_DCSN_ISSUED_DT    
    ELSE null END AS PPA_DATE_ACTION_TAKEN
FROM
	ERLR_PROB_ACTION PA
    LEFT OUTER JOIN ERLR_CASE EC ON PA.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/

--------------------------------------------------------
--  DDL for VW_ERLR_GRIEVANCE
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_GRIEVANCE
AS
SELECT
    G.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , GI_TYPE
	, GI_NEGOTIATED_GRIEVANCE_TYPE
    , CASE WHEN GI_TYPE = 'Negotiated' and GI_NEGOTIATED_GRIEVANCE_TYPE = 'Individual' THEN GI_FILING_DT_2 ELSE GI_FILING_DT END AS GI_GRIEVANCE_FILED_DT
    , CASE WHEN GI_TYPE = 'Negotiated' and GI_NEGOTIATED_GRIEVANCE_TYPE = 'Individual' THEN GI_TIMELY_FILING_2 ELSE GI_TIMELY_FILING END AS GI_TIMELY_FILING
	, GI_IND_MANAGER
	, GI_IND_MEETING_DT
    , CASE WHEN GI_TYPE = 'Negotiated' and GI_NEGOTIATED_GRIEVANCE_TYPE = 'Individual' THEN GI_IND_DECISION_ISSUE_DT WHEN GI_TYPE = 'Administrative' THEN GI_ADMIN_STG_1_DECISION_DT ELSE null END AS GI_STEP_STAGE_1_DT
    , CASE WHEN GI_TYPE = 'Negotiated' and GI_NEGOTIATED_GRIEVANCE_TYPE = 'Individual' THEN GI_IND_STEP_2_DCSN_ISSUE_DT WHEN GI_TYPE = 'Administrative' THEN GI_ADMIN_STG_2_ISSUE_DT ELSE null END AS GI_STEP_STAGE_2_DT
	, GI_IND_STEP_1_DECISION_DT
    , GI_IND_STEP_1_DEADLINE
    , GI_IND_STEP_1_EXT_DUE_DT
    , GI_IND_STEP_1_EXT_DUE_REASON	
	, GI_STEP_2_REQUEST
	, GI_IND_STEP_2_MTG_DT
	, GI_IND_STEP_2_DECISION_DUE_DT	
	, GI_IND_STEP_2_DEADLINE
	, GI_IND_EXT_2_EXT_DUE_DT
	, GI_IND_STEP_2_EXT_DUE_REASON	
    , CASE WHEN GI_TYPE = 'Negotiated' and GI_NEGOTIATED_GRIEVANCE_TYPE = 'Individual' THEN G.GI_IND_THIRD_APPEAL_REQUEST 
    WHEN GI_TYPE = 'Negotiated' and GI_NEGOTIATED_GRIEVANCE_TYPE = 'Union' THEN G.GI_ARBITRATION_REQUEST 
    WHEN GI_TYPE = 'Negotiated' and GI_NEGOTIATED_GRIEVANCE_TYPE = 'Management' THEN G.GI_ARBITRATION_REQUEST 	
    ELSE null END AS GI_ARBITRATION_REQUEST
	, CASE WHEN GI_TYPE = 'Negotiated' and GI_NEGOTIATED_GRIEVANCE_TYPE = 'Individual' THEN G.GI_IND_THIRD_PARTY_APPEAL_DT 
    WHEN GI_TYPE = 'Negotiated' and GI_NEGOTIATED_GRIEVANCE_TYPE = 'Union' THEN G.GI_ARBITRATION_DEADLINE_DT 
    WHEN GI_TYPE = 'Negotiated' and GI_NEGOTIATED_GRIEVANCE_TYPE = 'Management' THEN G.GI_ARBITRATION_DEADLINE_DT 	
    ELSE null END AS GI_ARBITRATION_DEADLINE_DT	
    , GI_UM_GRIEVABILITY
	, GI_MEETING_DT
	, GI_GRIEVANCE_STATUS
	, GI_ADMIN_OFFCL_1	
	, GI_ADMIN_STG_1_ISSUE_DT
	, GI_ADMIN_STG_2_RESP
	, GI_ADMIN_OFFCL_2
	, GI_ADMIN_STG_2_DECISION_DT	
FROM
	ERLR_GRIEVANCE G
    LEFT OUTER JOIN ERLR_CASE EC ON G.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/

--------------------------------------------------------
--  DDL for VW_ERLR_ULP
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_ULP
AS
SELECT
    U.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , ULP_RECEIPT_CHARGE_DT
	, ULP_CHARGE_FILED_TIMELY
	, ULP_AGENCY_RESPONSE_DT
	, ULP_FLRA_DOCUMENT_REUQESTED
	, ULP_DOC_SUBMISSION_FLRA_DT
	, ULP_DOCUMENT_DESCRIPTION
	, ULP_DISPOSITION_DT
	, ULP_DISPOSITION_TYPE
	, ULP_COMPLAINT_DT
	, ULP_AGENCY_ANSWER_DT
	, ULP_AGENCY_ANSWER_FILED_DT
	, ULP_SETTLEMENT_DISCUSSION_DT
	, ULP_PREHEARING_DISCLOSURE_DUE
	, ULP_PREHEARING_DISCLOSUE_DT
	, ULP_PREHEARING_CONFERENCE_DT
	, ULP_HEARING_DT
	, ULP_DECISION_DT
	, ULP_EXCEPTION_FILED
	, ULP_EXCEPTION_FILED_DT
FROM
	ERLR_ULP U
    LEFT OUTER JOIN ERLR_CASE EC ON U.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/

--------------------------------------------------------
--  DDL for VW_ERLR_LABOR_NEGO
--------------------------------------------------------
CREATE OR REPLACE VIEW VW_ERLR_LABOR_NEGO
AS
SELECT
    LN.ERLR_CASE_NUMBER
    , EC.ERLR_JOB_REQ_NUMBER
    , EC.PROCID    
    , EC.ERLR_CASE_CREATE_DT
    , LN_NEGOTIATION_TYPE	
    , LN_INITIATOR
	, LN_DEMAND2BARGAIN_DT
	, LN_BRIEFING_REQUEST
	, LN_PROPOSAL_SUBMISSION_DT
	, LN_PROPOSAL_SUBMISSION
	, LN_PROPOSAL_NEGOTIABLE
	, LN_NON_NEGOTIABLE_LETTER
	, LN_FILE_ULP
	, LN_PROPOSAL_INFO_GROUND_RULES
	, LN_PRPSAL_INFO_NEG_COMMENCE_DT
	, LN_LETTER_PROVIDED
	, LN_LETTER_PROVIDED_DT
	, LN_NEGOTIABLE_PROPOSAL
	, LN_BARGAINING_BEGAN_DT
	, LN_IMPASSE_DT
	, LN_FSIP_DECISION_DT
	, LN_BARGAINING_END_DT
	, LN_AGREEMENT_DT
	, LN_SUMMARY_OF_ISSUE
	, LN_SECON_LETTER_REQUEST
	, LN_2ND_LETTER_PROVIDED
	, LN_NEGOTIABL_ISSUE_SUMMARY
	, LN_MNGMNT_ARTICLE4_NTC_DT
	, LN_MNGMNT_NOTICE_RESPONSE
	, LN_MNGMNT_BRIEFING_REQUEST
	, LN_MNGMNT_BARGAIN_SBMSSION_DT
	, LN_MNGMNT_PROPOSAL_SBMSSION
    , LN_BRIEFING_DT
    , LN_2ND_PROVIDED_DT
    , LN_BRIEFING_REQUESTED2_DT
FROM
	ERLR_LABOR_NEGO LN
    LEFT OUTER JOIN ERLR_CASE EC ON LN.ERLR_CASE_NUMBER = EC.ERLR_CASE_NUMBER
;
/

CREATE OR REPLACE PACKAGE HHS_CMS_HR.CMS_TTH_WEEKLY_DATA_PKS AS
--==========================================================

--------------------------------------------------------------------------
--PROCEDURE: INSERT_CMS_TTH_WEEKLY_DATA
--DESCRIPTION: Insert new records into CMS_TIME_TO_HIRE_WEEKLY_PILOT table
--------------------------------------------------------------------------
PROCEDURE INSERT_CMS_TTH_WEEKLY_DATA;

--------------------------------------------------------------------------
--PROCEDURE: FN_IMPORT_CMS_TTH_WEEKLY_DATA
--DESCRIPTION: FN_IMPORT_CMS_TTH_WEEKLY_DATA will be called by Oracle job, 
--which will call individual procedures in the package.
--------------------------------------------------------------------------
FUNCTION FN_IMPORT_CMS_TTH_WEEKLY_DATA 
RETURN VARCHAR2;

--------------------------------------------------------
--PROCEDURE: ERROR_LOG
--DESCRIPTION: Return SQLCODE and SQLERRM
--------------------------------------------------------
FUNCTION ERROR_LOG 
RETURN VARCHAR2;


END CMS_TTH_WEEKLY_DATA_PKS;
/

create or replace PACKAGE BODY            CMS_TTH_WEEKLY_DATA_PKS AS
--------------------------------------------------------------------------------------------------------
--THIS PACKAGE WILL HANDLE PULLING AND POPULATING CMS_TIME_TO_HIRE_WEEKLY_PILOT TABLES in HHS_HR SCHEMA 
--------------------------------------------------------------------------------------------------------
 
--======================================================
-- - - -- - - - - - - - - - - - - - - - - - - - - - - -
 
--CURSORS and TYPES
 
-- - - - - - - - - - - - - - - - - - - - - - - - - - - -
--======================================================
--------------------------------------------------------
--CURSOR: CUR_CMS_TTH_DATA
--DESCRIPTION: 
--------------------------------------------------------
CURSOR CUR_CMS_TTH_DATA 
    IS
    SELECT	ADMIN_CODE || ' - ' || ADMIN_CODE_DESC AS COMPONENT,
			REQ_JOB_REQ_NUMBER AS REQUEST_NUMBER,
			PROCESS_ID,
			PROCESS_CREATION_DATE AS STRAT_CON_START,
			PROCESS_COMPLETION_DATE AS STRAT_CON_END,
			CASE
				WHEN BIZFLOW.HHS_FN_GET_BUSDAYSDIFF(PROCESS_CREATION_DATE,PROCESS_COMPLETION_DATE) > 6
				THEN 1
				ELSE 0
			END AS MISSED_STRAT_CON,
			PROCESS_COMPLETION_DATE AS CLASS_START,
			BIZFLOW.HHS_FN_SUBTRACT_BUSDAY(ANNOUNCEMENT_OPEN_DATE, 1) AS CLASS_END,
			CASE
				WHEN BIZFLOW.HHS_FN_GET_BUSDAYSDIFF(PROCESS_COMPLETION_DATE,BIZFLOW.HHS_FN_SUBTRACT_BUSDAY(ANNOUNCEMENT_OPEN_DATE, 1)) > 15
				THEN 1
				ELSE 0
			END AS MISSED_CLASS,
			ANNOUNCEMENT_CLOSE_DATE AS QUALS_START,
			MIN(REVIEW_SENT_DATE) AS QUALS_END,
			CASE
				WHEN BIZFLOW.HHS_FN_GET_BUSDAYSDIFF(ANNOUNCEMENT_CLOSE_DATE,MIN(REVIEW_SENT_DATE)) > 17
				THEN 1
				ELSE 0
			END AS MISSED_QUALS,
			MIN(REVIEW_SENT_DATE) AS SELECTION_START,
			MIN(REVIEW_RETURN_DATE) AS SELECTION_END,
			CASE
				WHEN BIZFLOW.HHS_FN_GET_BUSDAYSDIFF(MIN(REVIEW_SENT_DATE), MIN(REVIEW_RETURN_DATE)) > 15
				THEN 1
				ELSE 0
			END AS MISSED_SELECTION
	FROM HHS_HR.ADMINISTRATIVE_CODE AC
	LEFT JOIN 
			(SELECT REQ_JOB_REQ_NUMBER,
					SUB_ORG_2_CD,
					SUB_ORG_2_DSCR,
					PROCESS_ID,
					PROCESS_NAME,
					PROCESS_CREATION_DATE,
					PROCESS_COMPLETION_DATE,
					REQUEST_STATUS
			FROM HHS_CMS_HR.VW_STRATCON SCF
			JOIN BIZFLOW.HHS_VW_CONSULTATION_PROC SCP
				ON SCF.SG_PROCID = SCP.PROCESS_ID
			WHERE REQUEST_STATUS = 'Strategic Consultation Approved'
			AND PROCESS_COMPLETION_DATE IS NOT NULL) STRATCON
		ON AC.ADMIN_CODE = STRATCON.SUB_ORG_2_CD
		AND PROCESS_CREATION_DATE > '03-FEB-19' 
	LEFT JOIN HHS_HR.DSS_CMS_TIME_TO_HIRE TTH
		ON TTH.REQUEST_NUMBER = STRATCON.REQ_JOB_REQ_NUMBER
	WHERE ((LENGTH(ADMIN_CODE) <= 3 AND ADMIN_CODE LIKE 'FC%')
	OR (LENGTH(ADMIN_CODE) = 4 AND ADMIN_CODE LIKE 'FCM%'))
	AND TTH.EOD_DATE IS NULL
	GROUP BY
			AC.ADMIN_CODE || ' - ' || AC.ADMIN_CODE_DESC,
			REQ_JOB_REQ_NUMBER,
			PROCESS_ID,
			PROCESS_CREATION_DATE,
			PROCESS_COMPLETION_DATE,
			ANNOUNCEMENT_OPEN_DATE,
			ANNOUNCEMENT_CLOSE_DATE; 
 
    TYPE TYP_CMS_TTH_DATA IS TABLE OF CUR_CMS_TTH_DATA%ROWTYPE
    INDEX BY PLS_INTEGER;
 
    CMS_TTH_DATA TYP_CMS_TTH_DATA;
 
--======================================================
-- - - -- - - - - - - - - - - - - - - - - - - - - - - -
 
--PROCEDURES
 
-- - - - - - - - - - - - - - - - - - - - - - - - - - - -
--======================================================
 
---------------------------------------------------------
--PROCEDURE: INSERT_CMS_TTH_WEEKLY_DATA
--DESCRIPTION : 
---------------------------------------------------------
PROCEDURE INSERT_CMS_TTH_WEEKLY_DATA
AS  
COUNT_REQUESTS        NUMBER(10);
SUM_MISSED_STRAT_CON  NUMBER(10);
SUM_MISSED_CLASS      NUMBER(10);
SUM_MISSED_QUALS      NUMBER(10);
SUM_MISSED_SELECTION  NUMBER(10);
BEGIN
 
    OPEN CUR_CMS_TTH_DATA;
    FETCH CUR_CMS_TTH_DATA BULK COLLECT INTO CMS_TTH_DATA;
    CLOSE CUR_CMS_TTH_DATA;
 
    IF CMS_TTH_DATA.COUNT > 0 THEN
    DBMS_OUTPUT.PUT_LINE('COUNT: ' || CMS_TTH_DATA.COUNT);
    
        
         FOR i IN CMS_TTH_DATA.FIRST.. CMS_TTH_DATA.LAST LOOP
         --Insert record into HHS_CMS_HR.CMS_TIME_TO_HIRE_WEEKLY_PILOT table
            BEGIN
          INSERT INTO HHS_CMS_HR.CMS_TIME_TO_HIRE_WEEKLY_PILOT
            (DATA_PULLED_ON, 
            WEEK_OF, 
            COMPONENT, 
            REQUEST_NUMBER, 
            PROCESS_ID, 
            STRAT_CON_START, 
            STRAT_CON_END, 
            MISSED_STRAT_CON, 
            CLASS_START, 
            CLASS_END,
            MISSED_CLASS, 
            QUALS_START, 
            QUALS_END, 
            MISSED_QUALS, 
            SELECTION_START, 
            SELECTION_END, 
            MISSED_SELECTION)
          VALUES 
            (SYSDATE,  
            NEXT_DAY(SYSDATE - 7,'Sunday'), 
            CMS_TTH_DATA(i).COMPONENT, 
            CMS_TTH_DATA(i).REQUEST_NUMBER, 
            CMS_TTH_DATA(i).PROCESS_ID, 
            CMS_TTH_DATA(i).STRAT_CON_START, 
            CMS_TTH_DATA(i).STRAT_CON_END, 
            CMS_TTH_DATA(i).MISSED_STRAT_CON, 
            CMS_TTH_DATA(i).CLASS_START, 
            CMS_TTH_DATA(i).CLASS_END,
            CMS_TTH_DATA(i).MISSED_CLASS, 
            CMS_TTH_DATA(i).QUALS_START, 
            CMS_TTH_DATA(i).QUALS_END, 
            CMS_TTH_DATA(i).MISSED_QUALS, 
            CMS_TTH_DATA(i).SELECTION_START, 
            CMS_TTH_DATA(i).SELECTION_END, 
            CMS_TTH_DATA(i).MISSED_SELECTION);   
     
          EXCEPTION
                WHEN OTHERS THEN
                        SP_ERROR_LOG();
            END;
        END LOOP;
        
        --To calculate totals for each missed process for CMS
        SELECT COUNT(REQUEST_NUMBER), SUM(MISSED_STRAT_CON), SUM(MISSED_CLASS), SUM(MISSED_QUALS), SUM(MISSED_SELECTION)
        INTO COUNT_REQUESTS, SUM_MISSED_STRAT_CON, SUM_MISSED_CLASS, SUM_MISSED_QUALS, SUM_MISSED_SELECTION
        FROM CMS_TIME_TO_HIRE_WEEKLY_PILOT
        WHERE TRUNC(DATA_PULLED_ON)=TRUNC(SYSDATE);
        
        --Insert a new row with totals for CMS
        INSERT INTO HHS_CMS_HR.CMS_TIME_TO_HIRE_WEEKLY_PILOT
            (DATA_PULLED_ON, 
            WEEK_OF, 
            COMPONENT,
            REQUEST_NUMBER,
            MISSED_STRAT_CON, 
            MISSED_CLASS,
            MISSED_QUALS, 
            MISSED_SELECTION)
          VALUES 
            (SYSDATE,  
            NEXT_DAY(SYSDATE - 7,'Sunday'), 
            'CMS - wide', 
            COUNT_REQUESTS,
            SUM_MISSED_STRAT_CON, 
            SUM_MISSED_CLASS,
            SUM_MISSED_QUALS, 
            SUM_MISSED_SELECTION); 
        
         COMMIT;
      END IF;
 
END INSERT_CMS_TTH_WEEKLY_DATA;
 
--------------------------------------------------------
--FUNCTION: FN_IMPORT_CMS_TTH_WEEKLY_DATA
--DESCRIPTION: Entry point for this package,calls individual 
--procedure run INSERT scrip inside the procedure. It will
-- return and error code and message if any. This function
--will be called by spring batch.
--------------------------------------------------------
FUNCTION FN_IMPORT_CMS_TTH_WEEKLY_DATA
RETURN VARCHAR2
AS
BEGIN
        INSERT_CMS_TTH_WEEKLY_DATA(); 
RETURN ERROR_LOG();
END FN_IMPORT_CMS_TTH_WEEKLY_DATA;
 
--------------------------------------------------------
--PROCEDURE: ERROR_LOG
--DESCRIPTION: Return SQLCODE and SQLERRM
--------------------------------------------------------
FUNCTION ERROR_LOG
RETURN VARCHAR2
IS
        ERR_CODE   PLS_INTEGER        :=SQLCODE;
        ERR_MSG    VARCHAR2(32767)    := SQLERRM;
BEGIN
        RETURN ERR_CODE ||' : ' ||ERR_MSG;
END ERROR_LOG;
 
END CMS_TTH_WEEKLY_DATA_PKS;
/

----------------------------------
-- grant for HHS_HR_RW_ROLE
----------------------------------
GRANT EXECUTE ON HHS_CMS_HR.CMS_TTH_WEEKLY_DATA_PKS TO HHS_CMS_HR_RW_ROLE;

----------------------------------
-- grant for HHS_HR_DEV_ROLE
----------------------------------
GRANT EXECUTE ON HHS_CMS_HR.CMS_TTH_WEEKLY_DATA_PKS TO HHS_CMS_HR_DEV_ROLE;

CREATE OR REPLACE FUNCTION FN_FILTER_CATEGORY
  (
    I_CASE_NUMBER IN  NUMBER,
    I_FILTER IN VARCHAR2
  )
  RETURN NUMBER
IS
  V_RETURN_VAL    NUMBER(20);
  BEGIN
    SELECT COUNT(*) into V_RETURN_VAL FROM (
      SELECT * FROM (
          WITH T AS ( SELECT GEN_CASE_CATEGORY FROM HHS_CMS_HR.VW_ERLR_GEN WHERE ERLR_CASE_NUMBER = I_CASE_NUMBER)
          SELECT TRIM(REGEXP_SUBSTR(GEN_CASE_CATEGORY, '[^,]+', 1, LEVEL )) AS VAL
            FROM T
          CONNECT BY REGEXP_SUBSTR(GEN_CASE_CATEGORY, '[^,]+', 1, LEVEL ) IS NOT NULL
      )

      INTERSECT

      SELECT * FROM (
         WITH X AS ( SELECT I_FILTER AS FILTER FROM DUAL )
         SELECT TRIM(REGEXP_SUBSTR(FILTER, '[^,]+', 1, LEVEL )) AS VAL
           FROM X
         CONNECT BY REGEXP_SUBSTR(FILTER, '[^,]+', 1, LEVEL ) IS NOT NULL
        )
     );

    RETURN V_RETURN_VAL;
    EXCEPTION
    WHEN OTHERS THEN
    SP_ERROR_LOG();
    --DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_2ND_SUB_ORG -------------------');
    --DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
    --DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
    RETURN 0;
  END;
/




-- select HHS_CMS_HR.FN_FILTER_CATEGORY(10285, 'PIP2, OTHER') from dual

grant EXECUTE ON HHS_CMS_HR.FN_FILTER_CATEGORY TO BIZFLOW;
grant EXECUTE ON HHS_CMS_HR.FN_FILTER_CATEGORY TO HHS_CMS_HR_RW_ROLE;
grant EXECUTE ON HHS_CMS_HR.FN_FILTER_CATEGORY TO HHS_CMS_HR_DEV_ROLE;

create or replace FUNCTION FN_FILTER_FINALACTION
  (
    I_CASE_NUMBER IN  NUMBER,
    I_FILTER IN NVARCHAR2
  )
  RETURN NUMBER
IS
  V_RETURN_VAL    NUMBER(20);
  BEGIN
    SELECT COUNT(*) into V_RETURN_VAL FROM (
      SELECT * FROM (
          WITH T AS ( SELECT CC_FINAL_ACTION FROM HHS_CMS_HR.VW_ERLR_GEN WHERE ERLR_CASE_NUMBER = I_CASE_NUMBER)
          SELECT TRIM(REGEXP_SUBSTR(CC_FINAL_ACTION, '[^,]+', 1, LEVEL )) AS VAL
            FROM T
          CONNECT BY REGEXP_SUBSTR(CC_FINAL_ACTION, '[^,]+', 1, LEVEL ) IS NOT NULL
      )

      INTERSECT

      SELECT * FROM (
         WITH X AS ( SELECT I_FILTER AS FILTER FROM DUAL )
         SELECT TRIM(REGEXP_SUBSTR(FILTER, '[^,]+', 1, LEVEL )) AS VAL
           FROM X
         CONNECT BY REGEXP_SUBSTR(FILTER, '[^,]+', 1, LEVEL ) IS NOT NULL
        )
     );

    RETURN V_RETURN_VAL;
    EXCEPTION
    WHEN OTHERS THEN
    SP_ERROR_LOG();
    --DBMS_OUTPUT.PUT_LINE('ERROR occurred while executing FN_GET_2ND_SUB_ORG -------------------');
    --DBMS_OUTPUT.PUT_LINE('Error code    = ' || SQLCODE);
    --DBMS_OUTPUT.PUT_LINE('Error message = ' || SQLERRM);
    RETURN 0;
  END;
/

grant EXECUTE ON HHS_CMS_HR.FN_FILTER_FINALACTION TO BIZFLOW;
grant EXECUTE ON HHS_CMS_HR.FN_FILTER_FINALACTION TO HHS_CMS_HR_RW_ROLE;
grant EXECUTE ON HHS_CMS_HR.FN_FILTER_FINALACTION TO HHS_CMS_HR_DEV_ROLE;


